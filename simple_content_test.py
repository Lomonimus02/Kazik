#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
"""

import sqlite3
import os

def test_admin_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "data/users.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö users.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_settings
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='admin_settings'")
        if not cursor.fetchone():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ admin_settings –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        new_settings = [
            'profile_description',
            'profile_photo', 
            'slot_description',
            'slot_photo',
            'calendar_description',
            'calendar_photo'
        ]
        
        found_settings = []
        missing_settings = []
        
        for setting in new_settings:
            cursor.execute("SELECT value FROM admin_settings WHERE key = ?", (setting,))
            result = cursor.fetchone()
            if result:
                found_settings.append(setting)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting} = {result[0][:50]}...")
            else:
                missing_settings.append(setting)
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting}")
        
        conn.close()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(found_settings)}/{len(new_settings)} –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–π–¥–µ–Ω–æ")
        
        if missing_settings:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing_settings)}")
            return False
        else:
            print("üéâ –í—Å–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_admin_handlers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ admin_settings.py"""
    admin_file = "app/handlers/admin_settings.py"
    
    if not os.path.exists(admin_file):
        print("‚ùå –§–∞–π–ª admin_settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(admin_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
        checks = [
            ('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', 'admin_setting_profile_description'),
            ('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã', 'admin_setting_slot_description'), 
            ('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', 'admin_setting_calendar_description'),
            ('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è', 'admin_setting_profile_photo'),
            ('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã', 'admin_setting_slot_photo'),
            ('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', 'admin_setting_calendar_photo')
        ]
        
        found_checks = []
        missing_checks = []
        
        for description, callback_data in checks:
            if callback_data in content:
                found_checks.append(description)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {description}")
            else:
                missing_checks.append(description)
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {description}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(found_checks)}/{len(checks)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
        
        if missing_checks:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {', '.join(missing_checks)}")
            return False
        else:
            print("üéâ –í—Å–µ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

def test_handler_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    files_to_check = [
        ('app/handlers/user.py', ['get_admin_setting', 'profile_description', 'profile_photo']),
        ('app/handlers/slot_machine.py', ['get_admin_setting', 'slot_description', 'slot_photo']),
        ('app/handlers/activity_calendar.py', ['get_admin_setting', 'calendar_description', 'calendar_photo'])
    ]
    
    all_passed = True
    
    for file_path, required_strings in files_to_check:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_passed = False
            continue
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            found_strings = []
            missing_strings = []
            
            for required_string in required_strings:
                if required_string in content:
                    found_strings.append(required_string)
                else:
                    missing_strings.append(required_string)
            
            print(f"\nüìÅ –§–∞–π–ª: {file_path}")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {', '.join(found_strings)}")
            
            if missing_strings:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing_strings)}")
                all_passed = False
            else:
                print("üéâ –í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {file_path}: {e}")
            all_passed = False
    
    return all_passed

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î", test_admin_settings),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", test_admin_handlers),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", test_handler_updates)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        try:
            if test_func():
                passed_tests += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\nüèÅ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
