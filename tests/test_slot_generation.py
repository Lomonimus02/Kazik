#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""
import sys
import os
import asyncio
import random
from collections import Counter
from unittest.mock import patch, MagicMock

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
def mock_get_slot_configs():
    return [
        (1, 'üçíüçíüçí', 'money', 5, 20.0, 'üçí', '–í–∏—à–Ω–∏'),
        (2, 'üçãüçãüçã', 'money', 10, 15.0, 'üçã', '–õ–∏–º–æ–Ω'),
        (3, 'üçáüçáüçá', 'stars', 13, 5.0, 'üçá', '–í–∏–Ω–æ–≥—Ä–∞–¥'),
        (4, 'üçäüçäüçä', 'stars', 21, 7.0, 'üçä', '–ê–ø–µ–ª—å—Å–∏–Ω'),
        (5, 'üíéüíéüíé', 'ton', 0.5, 1.0, 'üíé', '–ê–ª–º–∞–∑'),
        (6, '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è', 'stars', 50, 0.7, '‚≠êÔ∏è', '–ó–≤–µ–∑–¥—ã'),
        (7, 'üîîüîîüîî', 'money', 100, 0.4, 'üîî', '–ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫'),
        (8, 'üí∞üí∞üí∞', 'stars', 75, 0.3, 'üí∞', '–ú–µ—à–æ–∫ –¥–µ–Ω–µ–≥'),
        (9, 'üé∞üé∞üé∞', 'ton', 1.0, 0.1, 'üé∞', '–î–∂–µ–∫–ø–æ—Ç'),
        (10, '7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£', 'stars', 100, 0.05, '7Ô∏è‚É£', '–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º–µ—Ä–∫–∞'),
    ]

# –ü–∞—Ç—á–∏–º –∏–º–ø–æ—Ä—Ç—ã
with patch.dict('sys.modules', {
    'app.database.models': MagicMock(),
    'app.keyboards.main': MagicMock(),
    'app.utils.misc': MagicMock()
}):
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–∞—Ç—á–∏–Ω–≥–∞
    from app.utils.slot_machine import generate_slot_result, check_win_combination

async def test_generate_slot_result_distribution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    print("üé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã")
    print("=" * 60)
    
    # –ü–∞—Ç—á–∏–º get_slot_configs
    with patch('app.utils.slot_machine.get_slot_configs', mock_get_slot_configs):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        num_tests = 10000
        results = []
        
        print(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {num_tests} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        for i in range(num_tests):
            if i % 1000 == 0:
                print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{num_tests}")
            
            slot1, slot2, slot3 = await generate_slot_result()
            combination = slot1 + slot2 + slot3
            results.append(combination)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        counter = Counter(results)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print("-" * 60)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        expected_combinations = {
            'üçíüçíüçí': 20.0,
            'üçãüçãüçã': 15.0,
            'üçáüçáüçá': 5.0,
            'üçäüçäüçä': 7.0,
            'üíéüíéüíé': 1.0,
            '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è': 0.7,
            'üîîüîîüîî': 0.4,
            'üí∞üí∞üí∞': 0.3,
            'üé∞üé∞üé∞': 0.1,
            '7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£': 0.05,
        }
        
        total_wins = 0
        issues = []
        
        for combo, expected_percent in expected_combinations.items():
            actual_count = counter.get(combo, 0)
            actual_percent = (actual_count / num_tests) * 100
            total_wins += actual_count
            
            # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (¬±2% –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, ¬±0.5% –¥–ª—è –º–∞–ª—ã—Ö)
            tolerance = 2.0 if expected_percent >= 5.0 else 0.5
            
            status = "‚úÖ" if abs(actual_percent - expected_percent) <= tolerance else "‚ùå"
            
            print(f"{combo} | –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_percent:5.2f}% | –ü–æ–ª—É—á–µ–Ω–æ: {actual_percent:5.2f}% | {status}")
            
            if abs(actual_percent - expected_percent) > tolerance:
                issues.append(f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è {combo}: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {actual_percent - expected_percent:+.2f}%")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_win_percent = (total_wins / num_tests) * 100
        expected_total = sum(expected_combinations.values())
        
        print("-" * 60)
        print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_win_percent:.2f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total:.2f}%)")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: {100 - total_win_percent:.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        losing_combos = {k: v for k, v in counter.items() if k not in expected_combinations}
        if losing_combos:
            print(f"\n–¢–æ–ø-5 –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:")
            for combo, count in sorted(losing_combos.items(), key=lambda x: x[1], reverse=True)[:5]:
                percent = (count / num_tests) * 100
                print(f"  {combo}: {count} —Ä–∞–∑ ({percent:.2f}%)")
        
        print("\n" + "=" * 60)
        if issues:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ò:")
            for issue in issues:
                print(f"  {issue}")
            return False
        else:
            print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
            return True

async def test_check_win_combination():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
    print("=" * 60)
    
    with patch('app.utils.slot_machine.get_slot_configs', mock_get_slot_configs):
        test_cases = [
            # –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            ('üçí', 'üçí', 'üçí', True, 'money', 5),
            ('üçã', 'üçã', 'üçã', True, 'money', 10),
            ('üçá', 'üçá', 'üçá', True, 'stars', 13),
            ('üçä', 'üçä', 'üçä', True, 'stars', 21),
            ('üíé', 'üíé', 'üíé', True, 'ton', 0.5),
            ('‚≠êÔ∏è', '‚≠êÔ∏è', '‚≠êÔ∏è', True, 'stars', 50),
            ('üîî', 'üîî', 'üîî', True, 'money', 100),
            ('üí∞', 'üí∞', 'üí∞', True, 'stars', 75),
            ('üé∞', 'üé∞', 'üé∞', True, 'ton', 1.0),
            ('7Ô∏è‚É£', '7Ô∏è‚É£', '7Ô∏è‚É£', True, 'stars', 100),
            
            # –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            ('üçí', 'üçã', 'üçä', False, None, None),
            ('üçá', 'üíé', 'üîî', False, None, None),
            ('üé∞', '7Ô∏è‚É£', 'üçí', False, None, None),
            ('‚≠êÔ∏è', 'üçã', 'üí∞', False, None, None),
        ]
        
        issues = []
        
        for slot1, slot2, slot3, should_win, expected_type, expected_amount in test_cases:
            result = await check_win_combination(slot1, slot2, slot3)
            
            if should_win:
                if result is None:
                    issues.append(f"‚ùå {slot1}{slot2}{slot3} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                else:
                    _, _, reward_type, reward_amount, _, _, _ = result
                    if reward_type != expected_type or reward_amount != expected_amount:
                        issues.append(f"‚ùå {slot1}{slot2}{slot3}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_type} {expected_amount}, –ø–æ–ª—É—á–µ–Ω–æ {reward_type} {reward_amount}")
                    else:
                        print(f"‚úÖ {slot1}{slot2}{slot3} -> {reward_type} {reward_amount}")
            else:
                if result is not None:
                    issues.append(f"‚ùå {slot1}{slot2}{slot3} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–π, –Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è")
                else:
                    print(f"‚úÖ {slot1}{slot2}{slot3} -> –ø—Ä–æ–∏–≥—Ä—ã—à")
        
        print("\n" + "=" * 60)
        if issues:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ü–†–û–í–ï–†–ö–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ô:")
            for issue in issues:
                print(f"  {issue}")
            return False
        else:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–õ–û–¢-–ú–ê–®–ò–ù–´")
    print("=" * 80)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.seed(42)
    
    test1_passed = await test_generate_slot_result_distribution()
    test2_passed = await test_check_win_combination()
    
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if test1_passed and test2_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        return False

if __name__ == "__main__":
    asyncio.run(main())
