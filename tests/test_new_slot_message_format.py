"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""
import unittest
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.utils.slot_machine import format_slot_result


class TestNewSlotMessageFormat(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    
    def test_money_win_message_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –¥–µ–Ω–µ–≥"""
        result = format_slot_result(
            slot1="üí∞", slot2="üí∞", slot3="üí∞", 
            is_win=True, 
            reward_text="100‚ÇΩ", 
            prize_name="–î–∂–µ–∫–ø–æ—Ç", 
            reward_type="money"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.assertIn("üèÜ <b>–ü—Ä–∏–∑:</b> –î–∂–µ–∫–ø–æ—Ç", result)
        self.assertIn("üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> üí∞üí∞üí∞", result)
        self.assertIn("üíé <b>–ù–∞–≥—Ä–∞–¥–∞:</b> 100‚ÇΩ", result)
        self.assertIn("üìä <b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ", result)
        self.assertIn("üïí <b>–í—Ä–µ–º—è:</b>", result)
        self.assertIn("üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å", result)
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–Ω–µ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    def test_stars_win_message_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –∑–≤–µ–∑–¥"""
        result = format_slot_result(
            slot1="‚≠ê", slot2="‚≠ê", slot3="‚≠ê", 
            is_win=True, 
            reward_text="10‚≠ê –∑–≤–µ–∑–¥", 
            prize_name="–ó–≤–µ–∑–¥–Ω—ã–π –ø—Ä–∏–∑", 
            reward_type="stars"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.assertIn("üèÜ <b>–ü—Ä–∏–∑:</b> –ó–≤–µ–∑–¥–Ω—ã–π –ø—Ä–∏–∑", result)
        self.assertIn("üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> ‚≠ê‚≠ê‚≠ê", result)
        self.assertIn("üíé <b>–ù–∞–≥—Ä–∞–¥–∞:</b> 10‚≠ê –∑–≤–µ–∑–¥", result)
        self.assertIn("üìä <b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –ù–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ", result)
        self.assertIn("üïí <b>–í—Ä–µ–º—è:</b>", result)
        self.assertIn("üïí –ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", result)
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–≤–µ–∑–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    def test_ton_win_message_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ TON"""
        result = format_slot_result(
            slot1="üíé", slot2="üíé", slot3="üíé", 
            is_win=True, 
            reward_text="0.5 TON", 
            prize_name="TON –ø—Ä–∏–∑", 
            reward_type="ton"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.assertIn("üèÜ <b>–ü—Ä–∏–∑:</b> TON –ø—Ä–∏–∑", result)
        self.assertIn("üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> üíéüíéüíé", result)
        self.assertIn("üíé <b>–ù–∞–≥—Ä–∞–¥–∞:</b> 0.5 TON", result)
        self.assertIn("üìä <b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –ù–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ", result)
        self.assertIn("üïí <b>–í—Ä–µ–º—è:</b>", result)
        self.assertIn("üïí –ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", result)
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    def test_lose_message_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ"""
        result = format_slot_result(
            slot1="üçí", slot2="üçã", slot3="üçä", 
            is_win=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–∏–≥—Ä—ã—à–∞
        self.assertIn("üòî –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ...", result)
        self.assertIn("üçÄ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", result)
        self.assertIn("üéØ –£–¥–∞—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—ã–±–Ω–µ—Ç—Å—è –≤–∞–º!", result)
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    def test_message_structure_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞–≥—Ä–∞–¥
        test_cases = [
            ("money", "100‚ÇΩ", "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ", "üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
            ("stars", "10‚≠ê", "‚è≥ –ù–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ", "üïí –ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"),
            ("ton", "0.5 TON", "‚è≥ –ù–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ", "üïí –ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
        ]
        
        for reward_type, reward_text, expected_status, expected_message in test_cases:
            with self.subTest(reward_type=reward_type):
                result = format_slot_result(
                    slot1="üé∞", slot2="üé∞", slot3="üé∞", 
                    is_win=True, 
                    reward_text=reward_text, 
                    prize_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑", 
                    reward_type=reward_type
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                self.assertIn("üèÜ <b>–ü—Ä–∏–∑:</b>", result)
                self.assertIn("üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b>", result)
                self.assertIn("üíé <b>–ù–∞–≥—Ä–∞–¥–∞:</b>", result)
                self.assertIn("üìä <b>–°—Ç–∞—Ç—É—Å:</b>", result)
                self.assertIn("üïí <b>–í—Ä–µ–º—è:</b>", result)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                self.assertIn(expected_status, result)
                self.assertIn(expected_message, result)
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–≥—Ä–∞–¥")
    
    def test_time_format_in_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        result = format_slot_result(
            slot1="üí∞", slot2="üí∞", slot3="üí∞", 
            is_win=True, 
            reward_text="100‚ÇΩ", 
            prize_name="–î–∂–µ–∫–ø–æ—Ç", 
            reward_type="money"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        import re
        time_pattern = r"üïí <b>–í—Ä–µ–º—è:</b> \d{2}:\d{2} \d{2}\.\d{2}\.\d{4}"
        self.assertTrue(re.search(time_pattern, result), "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì")
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    def test_emoji_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —ç–º–æ–¥–∑–∏"""
        result = format_slot_result(
            slot1="‚≠ê", slot2="‚≠ê", slot3="‚≠ê", 
            is_win=True, 
            reward_text="10‚≠ê", 
            prize_name="–ó–≤–µ–∑–¥—ã", 
            reward_type="stars"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–º–æ–¥–∑–∏
        required_emojis = ["üèÜ", "üéØ", "üíé", "üìä", "üïí"]
        for emoji in required_emojis:
            self.assertIn(emoji, result, f"–≠–º–æ–¥–∑–∏ {emoji} –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        
        print("‚úÖ –≠–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")


if __name__ == '__main__':
    unittest.main()
