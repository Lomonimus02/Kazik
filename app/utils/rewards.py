import logging
from typing import Optional
from app.database.models import (
    get_user_engagement_stats, update_user_engagement_stats, 
    check_and_award_achievements, get_referrals_count, get_user_profile
)

logger = logging.getLogger(__name__)

async def update_user_stats_and_check_achievements(user_id: int, stat_type: str, value: int, bot=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        update_user_engagement_stats(user_id, stat_type, value)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        awarded = check_and_award_achievements(user_id, stat_type)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥–∞—Ö
        if awarded and bot:
            from app.utils.misc import notify_admins
            for achievement in awarded:
                await notify_admins(
                    bot,
                    f"üèÜ <b>–ù–æ–≤—ã–π —Ç—Ä–æ—Ñ–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}</b>\n"
                    f"‚ûï –ü–æ–ª—É—á–µ–Ω–æ: {achievement['reward_amount']}‚ÇΩ –∑–∞ \"{achievement['description']}\"",
                    parse_mode="HTML"
                )
        
        return awarded
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

async def update_referral_stats(user_id: int, bot=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        referrals_count = get_referrals_count(user_id)
        return await update_user_stats_and_check_achievements(user_id, 'invites', referrals_count, bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è {user_id}: {e}")
        return []

async def update_purchase_stats(user_id: int, bot=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–æ–∫
        profile = get_user_profile(user_id)
        if profile:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            purchases_count = 0  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –ø–æ–∫—É–ø–æ–∫
            return await update_user_stats_and_check_achievements(user_id, 'purchases', purchases_count, bot)
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è {user_id}: {e}")
        return []

async def update_roulette_stats(user_id: int, bot=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –≤ —Ä—É–ª–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_user_engagement_stats(user_id)
        current_games = stats[5] if len(stats) > 5 else 0
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
        new_games = current_games + 1
        
        return await update_user_stats_and_check_achievements(user_id, 'roulette', new_games, bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è {user_id}: {e}")
        return []

def get_achievement_progress(user_id: int, achievement_type: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º"""
    try:
        stats = get_user_engagement_stats(user_id)
        
        if achievement_type == 'invites':
            current = stats[2]  # total_invites
        elif achievement_type == 'purchases':
            current = stats[4]  # total_purchases
        elif achievement_type == 'roulette':
            current = stats[5] if len(stats) > 5 else 0  # total_roulette_games
        else:
            current = 0
        
        return {
            'current': current,
            'type': achievement_type
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {user_id}: {e}")
        return {'current': 0, 'type': achievement_type}

def format_achievement_progress(current: int, required: int, name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    progress = min(100, (current / required) * 100) if required > 0 else 0
    
    if progress >= 100:
        return f"‚úÖ {name} - –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!"
    else:
        return f"‚è≥ {name} - {current}/{required} ({progress:.0f}%)"

async def check_all_user_achievements(user_id: int, bot=None) -> list:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        await update_referral_stats(user_id, bot)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫
        await update_purchase_stats(user_id, bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        awarded = check_and_award_achievements(user_id)
        
        return awarded
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
        return [] 