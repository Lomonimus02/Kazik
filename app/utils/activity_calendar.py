"""
–ú–æ–¥—É–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import calendar
import datetime
from typing import List, Tuple, Dict
from app.database.models import (
    get_user_activity, mark_activity, get_user_activity_streak, 
    get_activity_rewards, claim_activity_reward
)

def get_current_date() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
    return datetime.datetime.now().strftime("%Y-%m-%d")

def generate_calendar_grid(year: int, month: int, user_activities: List[Tuple], style: str = "plain") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –º–µ—Å—è—Ü–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö: plain, unicode, markdown, emoji"""
    first_day = datetime.date(year, month, 1)
    if month == 12:
        last_day = datetime.date(year + 1, 1, 1) - datetime.timedelta(days=1)
    else:
        last_day = datetime.date(year, month + 1, 1) - datetime.timedelta(days=1)
    days_in_month = last_day.day
    start_weekday = (first_day.weekday() + 1) % 7
    active_days = set()
    for activity in user_activities:
        if len(activity) > 2 and activity[2]:
            active_days.add(activity[2])
    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    calendar = ""
    week = ['   '] * 7
    day_ptr = start_weekday
    for day in range(1, days_in_month + 1):
        date_str = f"{year:04d}-{month:02d}-{day:02d}"
        if date_str in active_days:
            if style == "emoji":
                cell = f"‚úÖ"
            elif style == "unicode":
                cell = f"{day:2d}‚úî"
            elif style == "markdown":
                cell = f"*{day:2d}*"
            else:
                cell = f"[{day:2d}]"
        else:
            cell = f"{day:2d} "
        week[day_ptr] = cell
        day_ptr += 1
        if day_ptr == 7:
            if style == "unicode":
                calendar += '‚îÉ' + '‚îÉ'.join(week) + '‚îÉ\n'
            else:
                calendar += ' '.join(week) + '\n'
            week = ['   '] * 7
            day_ptr = 0
    if any(cell.strip() for cell in week):
        if style == "unicode":
            calendar += '‚îÉ' + '‚îÉ'.join(week) + '‚îÉ\n'
        else:
            calendar += ' '.join(week) + '\n'
    if style == "unicode":
        calendar += '‚îó' + '‚îª'.join(['‚îÅ‚îÅ‚îÅ']*7) + '‚îõ'
    return calendar.strip()

def get_current_month_activities(tg_id: int) -> List[Tuple]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    current_date = datetime.datetime.now()
    activities = get_user_activity(tg_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month_activities = []
    for activity in activities:
        try:
            if len(activity) > 2 and activity[2]:  # activity[2] = date
                activity_date = datetime.datetime.strptime(activity[2], "%Y-%m-%d")
                if activity_date.year == current_date.year and activity_date.month == current_date.month:
                    current_month_activities.append(activity)
        except:
            continue
    
    return current_month_activities

def format_activity_calendar(tg_id: int, year: int, month: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    activities = get_user_activity(tg_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    month_activities = []
    for activity in activities:
        try:
            if len(activity) > 2 and activity[2]:  # activity[2] = date
                activity_date = datetime.datetime.strptime(activity[2], "%Y-%m-%d")
                if activity_date.year == year and activity_date.month == month:
                    month_activities.append(activity)
        except:
            continue
    
    calendar_text = generate_calendar_grid(year, month, month_activities)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    streak = get_user_activity_streak(tg_id)
    calendar_text += f"\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    calendar_text += f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n"
    calendar_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {len(month_activities)}\n"
    
    return calendar_text

def format_rewards_list(tg_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    rewards = get_activity_rewards()
    streak = get_user_activity_streak(tg_id)
    
    rewards_text = "üèÜ **–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** üèÜ\n\n"
    
    for reward in rewards:
        reward_id, days_required, reward_type, reward_amount, description = reward
        reward_icon = "‚≠ê" if reward_type == "stars" else "üí∞"
        
        if streak >= days_required:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
            action = f"[–ü–æ–ª—É—á–∏—Ç—å](claim_reward_{reward_id})"
        else:
            days_left = days_required - streak
            status = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
            action = ""
        
        rewards_text += f"{reward_icon} **{description}**\n"
        rewards_text += f"üìÖ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–Ω–µ–π: {days_required}\n"
        rewards_text += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount}{'‚≠ê' if reward_type == 'stars' else '‚ÇΩ'}\n"
        rewards_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        if action:
            rewards_text += f"üéØ {action}\n"
        rewards_text += "\n"
    
    return rewards_text

def format_activity_stats(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
    text += f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats['current_streak']} –¥–Ω–µ–π\n"
    text += f"üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {stats['max_streak']} –¥–Ω–µ–π\n"
    text += f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π: {stats['activities_7_days']}/7 –¥–Ω–µ–π\n"
    text += f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 30 –¥–Ω–µ–π: {stats['activities_30_days']}/30 –¥–Ω–µ–π\n"
    text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (30 –¥–Ω–µ–π): {stats['percentage_30_days']:.1f}%\n\n"
    
    # –û—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if stats['percentage_30_days'] >= 80:
        text += "üèÜ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n"
    elif stats['percentage_30_days'] >= 60:
        text += "üëç –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ!\n"
    elif stats['percentage_30_days'] >= 40:
        text += "üí™ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!\n"
    else:
        text += "üí™ –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏!\n"
    
    return text

def mark_today_activity(tg_id: int) -> bool:
    """–û—Ç–º–µ—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = get_current_date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è
    activities = get_user_activity(tg_id, today)
    if activities:
        return False  # –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞
    
    # –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    mark_activity(tg_id, today, "daily")
    return True

def get_available_rewards(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    streak = get_user_activity_streak(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    rewards = get_activity_rewards()

    available = []
    for reward in rewards:
        reward_id = reward[0]
        days_required = reward[1]
        reward_type = reward[2]
        reward_amount = reward[3]
        description = reward[4]

        if streak >= days_required:
            available.append({
                'id': reward_id,
                'days_required': days_required,
                'reward_type': reward_type,
                'reward_amount': reward_amount,
                'description': description
            })

    return available

def can_claim_reward(tg_id: int, reward_id: int) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"""
    streak = get_user_activity_streak(tg_id)
    rewards = get_activity_rewards()
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
    target_reward = None
    for reward in rewards:
        if reward[0] == reward_id:
            target_reward = reward
            break
    
    if not target_reward:
        return False, "–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    reward_id, days_required, reward_type, reward_amount, description = target_reward
    
    if streak < days_required:
        days_left = days_required - streak
        return False, f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –Ω—É–∂–Ω–æ –µ—â–µ {days_left} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –Ω–∞–≥—Ä–∞–¥—É
    activities = get_user_activity(tg_id)
    for activity in activities:
        if len(activity) > 4 and activity[3] == 'reward' and activity[4] == reward_type and activity[5] == reward_amount:
            return False, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç—É –Ω–∞–≥—Ä–∞–¥—É"
    
    return True, "–ù–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞"

async def process_reward_claim(tg_id: int, reward_id: int) -> Tuple[bool, str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã"""
    can_claim, message = can_claim_reward(tg_id, reward_id)
    
    if not can_claim:
        return False, message
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    success = claim_activity_reward(tg_id, reward_id)
    
    if success:
        rewards = get_activity_rewards()
        for reward in rewards:
            if reward[0] == reward_id:
                reward_type, reward_amount, description = reward[2], reward[3], reward[4]
                reward_text = f"{reward_amount}{'‚≠ê' if reward_type == 'stars' else '‚ÇΩ'}"
                return True, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É: {description} - {reward_text}"
    
    return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã"

def get_activity_rewards_list() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    rewards = get_activity_rewards()
    
    rewards_text = "üèÜ **–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** üèÜ\n\n"
    
    for reward in rewards:
        reward_id, days_required, reward_type, reward_amount, description = reward
        reward_icon = "‚≠ê" if reward_type == "stars" else "üí∞"
        rewards_text += f"{reward_icon} **{description}**\n"
        rewards_text += f"üìÖ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–Ω–µ–π: {days_required}\n"
        rewards_text += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount}{'‚≠ê' if reward_type == 'stars' else '‚ÇΩ'}\n\n"
    
    return rewards_text

def render_best_calendar_format(tg_id: int, year: int, month: int) -> str:
    """–ö—Ä–∞—Å–∏–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —ç–º–æ–¥–∑–∏, —Ä–∞–º–∫–æ–π –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"""
    import calendar
    now = datetime.datetime.now()
    cal = calendar.monthcalendar(year, month)
    activities = get_user_activity_for_month(tg_id, year, month)  # day:int -> bool
    text = f"üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî {calendar.month_name[month]} {year}</b>\n\n"
    text += "–ü–Ω  –í—Ç  –°—Ä  –ß—Ç  –ü—Ç  –°–±  –í—Å\n"
    for week in cal:
        week_text = ""
        for day in week:
            if day == 0:
                week_text += "‚ñ´Ô∏è "  # –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
            else:
                is_active = activities.get(day, False)
                is_today = (day == now.day and month == now.month and year == now.year)
                if is_active:
                    week_text += "‚úÖ "
                elif is_today:
                    week_text += "üîµ "
                else:
                    week_text += "‚óªÔ∏è "
        text += week_text.rstrip() + "\n"
    return text.strip()

def get_current_month_calendar(year: int, month: int) -> List[List[int]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    return calendar.monthcalendar(year, month)

def get_user_activity_for_month(tg_id: int, year: int, month: int) -> Dict[int, bool]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –º–µ—Å—è—Ü –ø–æ tg_id"""
    month_start = datetime.datetime(year, month, 1)
    if month == 12:
        month_end = datetime.datetime(year + 1, 1, 1) - datetime.timedelta(days=1)
    else:
        month_end = datetime.datetime(year, month + 1, 1) - datetime.timedelta(days=1)
    activities = {}
    current_date = month_start
    while current_date <= month_end:
        date_str = current_date.strftime("%Y-%m-%d")
        activity = get_user_activity(tg_id, date_str)
        activities[current_date.day] = bool(activity)
        current_date += datetime.timedelta(days=1)
    return activities

def format_calendar_display(year: int, month: int, user_activities: Dict[int, bool]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]
    
    text = f"üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - {month_name} {year}</b>\n\n"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    text += "–ü–Ω  –í—Ç  –°—Ä  –ß—Ç  –ü—Ç  –°–±  –í—Å\n"
    
    for week in cal:
        week_text = ""
        for day in week:
            if day == 0:
                week_text += "    "
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                is_active = user_activities.get(day, False)
                if is_active:
                    week_text += "‚úÖ "
                else:
                    week_text += f"{day:2d} "
        text += week_text + "\n"
    
    text += "\n‚úÖ - –¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ—á–µ–Ω"
    return text

def calculate_activity_streak(user_id: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ë–î)"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return get_user_activity_streak(user_id)

def get_next_reward_info(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ"""
    streak = get_user_activity_streak(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    rewards = get_activity_rewards()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π
    sorted_rewards = sorted(rewards, key=lambda x: x[1])

    for reward in sorted_rewards:
        days_required = reward[1]
        if streak < days_required:
            return {
                'days_required': days_required,
                'days_left': days_required - streak,
                'reward_type': reward[2],
                'reward_amount': reward[3],
                'description': reward[4]
            }

    return {}

def check_daily_activity_reset(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    activity = get_user_activity(user_id, today)
    return activity is None 