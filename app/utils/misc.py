"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞
"""
import logging
import asyncio
from typing import Optional, List, Dict, Any
from aiogram import Bot

from app.config import ADMINS
from app.database.models import add_referral_bonus_for_order_async, get_flag

logger = logging.getLogger(__name__)

async def notify_admins(bot: Bot, text: str, reply_markup=None, parse_mode=None, document=None, document_caption=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    if not ADMINS:
        logger.warning("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
        return
    
    success_count = 0
    for admin_id in ADMINS:
        try:
            if document:
                await bot.send_document(admin_id, document, caption=document_caption, reply_markup=reply_markup, parse_mode=parse_mode)
            else:
                await bot.send_message(admin_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
            success_count += 1
            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            continue
    
    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count}/{len(ADMINS)} –∞–¥–º–∏–Ω–∞–º")

async def notify_admin(bot, admin_id: int, text: str, reply_markup=None, parse_mode="HTML"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω—É"""
    try:
        await bot.send_message(
            admin_id,
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        return False

async def check_user_premium_status(bot, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram Premium
    –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API
    """
    try:
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Telegram API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return True
    except Exception as e:
        logger.error(f"Error checking premium status: {e}")
        return False

def format_number(number: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if number >= 1000000:
        return f"{number/1000000:.1f}M"
    elif number >= 1000:
        return f"{number/1000:.1f}K"
    else:
        return f"{number:.0f}"

def safe_int(value, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default

def safe_float(value, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π"""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default

async def retry_async(func, max_retries: int = 3, delay: float = 1.0):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            return await func()
        except Exception as e:
            if attempt == max_retries - 1:
                logger.error(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                raise
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            await asyncio.sleep(delay * (attempt + 1))

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMINS

async def process_referral_bonus(bot: Bot, user_id: int, order_amount: float, order_type: str, order_id: int) -> bool:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –±–æ–Ω—É—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω
    """
    if not get_flag('ref_active', 'true'):
        return False
        
    try:
        success, bonus_data = await add_referral_bonus_for_order_async(user_id, order_amount, order_type)
        if success and bonus_data:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
            await notify_admins(
                bot,
                f"üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: <b>{bonus_data['bonus_amount']:.2f}‚ÇΩ</b> –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É "
                f"<b>{bonus_data['referrer_name']}</b> (@{bonus_data['referrer_username']}) "
                f"–∑–∞ –ø–æ–∫—É–ø–∫—É {order_type} –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.",
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            await bot.send_message(
                bonus_data['referrer_tg_id'],
                f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É {order_type}!\n"
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus_data['bonus_amount']:.2f}‚ÇΩ</b> "
                f"({bonus_data['referral_percent']}% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏)",
                parse_mode="HTML"
            )
            
            logger.info(f"[REFERRAL] –ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å {bonus_data['bonus_amount']:.2f}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {bonus_data['referrer_tg_id']} –∑–∞ –∑–∞–∫–∞–∑ {order_id}")
            return True
        else:
            logger.info(f"[REFERRAL] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            return False
            
    except Exception as e:
        logger.error(f"[REFERRAL] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        return False
