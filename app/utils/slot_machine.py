"""
–ú–æ–¥—É–ª—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""
import asyncio
import datetime
import logging
import random
from typing import Tuple, Optional, List

from app.database.models import (
    get_slot_configs, get_user_slot_spins, use_slot_spin, 
    create_slot_win, should_reset_daily_attempts, reset_slot_spins,
    get_admin_setting, get_slot_wins, get_slot_win_by_id, add_ton_slot_win,
    get_or_create_user, create_order, get_user_profile, update_balance
)
from app.keyboards.main import slot_win_admin_kb
from app.utils.misc import notify_admins

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –ë–î)
SLOT_EMOJIS = ["üçí", "üçã", "üçä", "üçá", "‚≠êÔ∏è", "üíé", "üîî", "üí∞", "üé∞", "7Ô∏è‚É£"]

# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è —Å–ª–æ—Ç–æ–≤ (—Ç–æ—á–Ω–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É 3 —ç–º–æ–¥–∑–∏)
CENTERED_FRAME = (
    "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
    "‚îÇ   {s1}   |   {s2}   |   {s3}   ‚îÇ\n"
    "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
)

async def generate_slot_result() -> Tuple[str, str, str]:
    """
    –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–õ–û–¢-–ú–ê–®–ò–ù–´

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:
    1. –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è, –±—É–¥–µ—Ç –ª–∏ –≤—ã–∏–≥—Ä—ã—à (–æ–±—â–∏–π —à–∞–Ω—Å ~13%)
    2. –ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã—à - –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —à–∞–Ω—Å–∞–º
    3. –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è –Ω–µ–≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è

    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.
    """
    configs = get_slot_configs()

    if not configs:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        logger.warning("[SLOT] –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return random.choice(SLOT_EMOJIS), random.choice(SLOT_EMOJIS), random.choice(SLOT_EMOJIS)

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π
    total_win_chance = sum(config[4] for config in configs)  # config[4] = chance_percent
    logger.debug(f"[SLOT] –û–±—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {total_win_chance:.2f}%")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
    random_num = random.uniform(0, 100)
    logger.debug(f"[SLOT] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_num:.4f}")

    # –≠–¢–ê–ü 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –≤—ã–∏–≥—Ä—ã—à
    if random_num <= total_win_chance:
        # –í–´–ò–ì–†–´–®! –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        logger.info(f"[SLOT] –í—ã–∏–≥—Ä—ã—à! ({random_num:.4f} <= {total_win_chance:.2f}%)")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        win_random = random.uniform(0, total_win_chance)
        current_chance = 0

        for config in configs:
            config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = config
            current_chance += chance_percent

            if win_random <= current_chance:
                logger.info(f"[SLOT] –í—ã–±—Ä–∞–Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {name} ({emoji}{emoji}{emoji})")
                logger.info(f"[SLOT] –ü—Ä–∏–∑: {reward_amount} {reward_type}")
                return emoji, emoji, emoji

        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
        first_config = configs[0]
        emoji = first_config[5]
        logger.warning(f"[SLOT] Fallback –∫ –ø–µ—Ä–≤–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {emoji}{emoji}{emoji}")
        return emoji, emoji, emoji

    else:
        # –ü–†–û–ò–ì–†–´–® - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        logger.debug(f"[SLOT] –ü—Ä–æ–∏–≥—Ä—ã—à ({random_num:.4f} > {total_win_chance:.2f}%)")
        return await _generate_losing_combination(configs)


async def _generate_losing_combination(configs) -> Tuple[str, str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    """
    max_attempts = 100  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts = 0

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    winning_emojis = {config[5] for config in configs}  # config[5] = emoji

    while attempts < max_attempts:
        slot1 = random.choice(SLOT_EMOJIS)
        slot2 = random.choice(SLOT_EMOJIS)
        slot3 = random.choice(SLOT_EMOJIS)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï —Ç—Ä–æ–π–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —ç–º–æ–¥–∑–∏
        if not (slot1 == slot2 == slot3 and slot1 in winning_emojis):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ –ë–î
            combination = slot1 + slot2 + slot3
            is_winning = any(config[1] == combination for config in configs)

            if not is_winning:
                logger.debug(f"[SLOT] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {slot1}{slot2}{slot3} (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1})")
                return slot1, slot2, slot3

        attempts += 1

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    logger.warning(f"[SLOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    # –ë–µ—Ä–µ–º 3 —Ä–∞–∑–Ω—ã—Ö —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ –±—ã–ª–æ —Ç—Ä–æ–π–∫–∏
    available_emojis = [e for e in SLOT_EMOJIS if e not in winning_emojis]

    if len(available_emojis) >= 3:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µwy–∏–≥—Ä—ã—à–Ω—ã—Ö —ç–º–æ–¥–∑–∏
        selected = random.sample(available_emojis, 3)
        logger.debug(f"[SLOT] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (–Ω–µwy–∏–≥—Ä—ã—à–Ω—ã–µ —ç–º–æ–¥–∑–∏): {selected[0]}{selected[1]}{selected[2]}")
        return selected[0], selected[1], selected[2]
    else:
        # –ï—Å–ª–∏ –Ω–µwy–∏–≥—Ä—ã—à–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        slot1 = random.choice(SLOT_EMOJIS)
        slot2 = random.choice([s for s in SLOT_EMOJIS if s != slot1])
        slot3 = random.choice([s for s in SLOT_EMOJIS if s != slot1 and s != slot2])
        logger.debug(f"[SLOT] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (—Å–º–µ—à–∞–Ω–Ω–∞—è): {slot1}{slot2}{slot3}")
        return slot1, slot2, slot3

async def check_win_combination(slot1: str, slot2: str, slot3: str) -> Optional[Tuple]:
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–´–ò–ì–†–´–®–ù–´–• –ö–û–ú–ë–ò–ù–ê–¶–ò–ô

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º –∏–∑ –ë–î.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Ç–æ—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, —Ç–∞–∫ –∏ —Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏.
    """
    combination = slot1 + slot2 + slot3
    configs = get_slot_configs()

    logger.debug(f"[SLOT] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é: {combination} ({slot1} {slot2} {slot3})")

    if not configs:
        logger.warning("[SLOT] –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π")
        return None

    for config in configs:
        config_id, combo, reward_type, reward_amount, chance_percent, emoji, name = config

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ)
        if combo and combo == combination:
            logger.info(f"[SLOT] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {name}")
            logger.info(f"[SLOT] üéÅ –ü—Ä–∏–∑: {reward_amount} {reward_type}")
            return config

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–æ–π–∫—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏
        if slot1 == slot2 == slot3 == emoji:
            logger.info(f"[SLOT] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (—Ç—Ä–æ–π–∫–∞ —ç–º–æ–¥–∑–∏): {name}")
            logger.info(f"[SLOT] üéÅ –ü—Ä–∏–∑: {reward_amount} {reward_type}")
            return config

    logger.debug(f"[SLOT] ‚ùå –ö–æ–º–±–∏–Ω–∞—Ü–∏—è {combination} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π")
    return None

async def animate_slot_machine(message, callback) -> Tuple[str, str, str]:
    """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    animation_steps = 12
    
    for i in range(animation_steps):
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            slot1 = random.choice(SLOT_EMOJIS)
            slot2 = random.choice(SLOT_EMOJIS) 
            slot3 = random.choice(SLOT_EMOJIS)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
            anim = (
                f"üé∞ <b>–°–õ–û–¢-–ú–ê–®–ò–ù–ê –ö–†–£–¢–ò–¢–°–Ø...</b> üé∞\n\n"
                + CENTERED_FRAME.format(s1=slot1, s2=slot2, s3=slot3)
                + f"\n\nüéØ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç... <b>({i+1}/12)</b>"
            )
            
            await message.edit_text(anim, parse_mode="HTML")
            await asyncio.sleep(0.18 + 0.04 * (i / animation_steps))
        except Exception as e:
            logger.error(f"Error in animation step {i+1}: {e}")
            await asyncio.sleep(0.2)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        final_slot1, final_slot2, final_slot3 = await generate_slot_result()
        return final_slot1, final_slot2, final_slot3
    except Exception as e:
        logger.error(f"Error generating final result: {e}")
        return random.choice(SLOT_EMOJIS), random.choice(SLOT_EMOJIS), random.choice(SLOT_EMOJIS)

async def process_slot_win(user_id: int, config: Tuple) -> Tuple[str, Optional[int]]:
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ò–ì–†–´–®–ï–ô –í –°–õ–û–¢-–ú–ê–®–ò–ù–ï

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:
    - –î–µ–Ω—å–≥–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    - –ó–≤–µ–∑–¥—ã –∏ TON —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    - –°–æ–∑–¥–∞—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    """
    config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = config

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = get_user_profile(user_id)
    if user_profile:
        db_user_id = user_profile['id']
        tg_id = user_profile['tg_id']
    else:
        logger.error(f"[SLOT] –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id={user_id}")
        db_user_id = user_id
        tg_id = user_id

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–∏–≥—Ä—ã—à–µ
    win_id = create_slot_win(user_id, combination, reward_type, reward_amount, True)
    logger.info(f"[SLOT] üé∞ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ –≤—ã–∏–≥—Ä—ã—à–µ: win_id={win_id}, user_tg_id={tg_id}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if reward_type == "stars":
        # –î–ª—è –∑–≤–µ–∑–¥ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑, —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        create_order(db_user_id, "slot_win", reward_amount, "pending",
                    extra_data=f"–ó–≤–µ–∑–¥—ã –∑–∞ —Å–ª–æ—Ç: {combination} ({name})")
        reward_text = f"{int(reward_amount)}‚≠ê –∑–≤–µ–∑–¥"
        logger.info(f"[SLOT] ‚≠ê –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ –Ω–∞ –∑–≤–µ–∑–¥—ã: {reward_amount} –∑–≤–µ–∑–¥ –¥–ª—è tg_id={tg_id}")

    elif reward_type == "money":
        # –î–ª—è –¥–µ–Ω–µ–≥ –Ω–∞—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        update_balance(user_id, reward_amount)
        reward_text = f"{int(reward_amount)}‚ÇΩ"
        logger.info(f"[SLOT] üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {reward_amount}‚ÇΩ –¥–ª—è tg_id={tg_id}")

    elif reward_type == "ton":
        # –î–ª—è TON —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑, —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        create_order(db_user_id, "slot_ton", reward_amount, "pending",
                    extra_data=f"TON –∑–∞ —Å–ª–æ—Ç: {combination} ({name})")
        reward_text = f"{reward_amount} TON"
        logger.info(f"[SLOT] üíé –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ –Ω–∞ TON: {reward_amount} TON –¥–ª—è tg_id={tg_id}")

    else:
        reward_text = "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑"
        logger.warning(f"[SLOT] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: {reward_type}")

    logger.info(f"[SLOT] ‚úÖ –í—ã–∏–≥—Ä—ã—à '{name}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è tg_id={tg_id}, win_id={win_id}, –ø—Ä–∏–∑: {reward_text}")
    return reward_text, win_id

def try_use_slot_spin(tg_id: int) -> bool:
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–û–ü–´–¢–û–ö –°–õ–û–¢-–ú–ê–®–ò–ù–´

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ, —Ç–∞–∫ –∏ –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.
    """
    user_profile = get_user_profile(tg_id)
    if not user_profile:
        get_or_create_user(tg_id, "Unknown", None, datetime.datetime.now().strftime("%Y-%m-%d"))
        user_profile = get_user_profile(tg_id)

    user_id = user_profile['id']
    spins_used, last_reset = get_user_slot_spins(tg_id)
    daily_attempts = int(get_admin_setting('slot_daily_attempts', '5'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫ (–≤–∫–ª—é—á–∞—è –±–æ–Ω—É—Å–Ω—ã–µ)
    available_spins = get_spins_available(spins_used, daily_attempts)

    if available_spins <= 0:
        logger.info(f"[SLOT] ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è tg_id={tg_id} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {spins_used}, –ª–∏–º–∏—Ç: {daily_attempts})")
        return False

    # –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
    use_slot_spin(tg_id)
    logger.info(f"[SLOT] ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∞ –¥–ª—è tg_id={tg_id} (–æ—Å—Ç–∞–ª–æ—Å—å: {available_spins - 1})")
    return True

async def use_slot_spin_and_check_win(tg_id: int, bot=None) -> Tuple[bool, str, str, str, Optional[Tuple]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ (–ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∞–Ω–∞)"""
    slot1, slot2, slot3 = await generate_slot_result()
    win_config = await check_win_combination(slot1, slot2, slot3)
    if win_config:
        config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = win_config
        try:
            reward_text, win_id = await process_slot_win(tg_id, win_config)
        except Exception as e:
            logger.error(f"[SLOT] –û—à–∏–±–∫–∞ process_slot_win: {e}")
            reward_text = ""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è stars –∏ ton (–¥–µ–Ω—å–≥–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        if reward_type in ["stars", "ton"] and bot:
            try:
                await notify_admins_slot_win(tg_id, slot1+slot2+slot3, reward_type, reward_amount, bot=bot)
            except Exception as e:
                logger.error(f"[SLOT] –û—à–∏–±–∫–∞ notify_admins_slot_win: {e}")
        return True, slot1, slot2, slot3, (name, reward_text, reward_type, reward_amount)
    else:
        create_slot_win(tg_id, slot1 + slot2 + slot3, "none", 0, False)
        return False, slot1, slot2, slot3, None

async def check_slot_availability(tg_id: int) -> Tuple[bool, str, int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏
    if should_reset_daily_attempts(tg_id):
        reset_slot_spins(tg_id)
    
    spins_used, last_reset = get_user_slot_spins(tg_id)
    daily_attempts = int(get_admin_setting('slot_daily_attempts', '5'))
    remaining = daily_attempts - spins_used
    
    if remaining <= 0:
        return False, f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {daily_attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!", 0
    
    return True, f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –ø–æ–ø—ã—Ç–æ–∫", remaining

def format_slot_result(slot1: str, slot2: str, slot3: str, is_win: bool,
                      reward_text: str = "", prize_name: str = "", reward_type: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""

    result_text = (
        f"üé∞ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –°–õ–û–¢-–ú–ê–®–ò–ù–´</b> üé∞\n\n"
        + CENTERED_FRAME.format(s1=slot1, s2=slot2, s3=slot3)
        + "\n\n"
    )

    if is_win:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã
        if reward_type == "money":
            status = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ"
            final_message = "üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å"
        else:
            status = "‚è≥ –ù–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ"
            final_message = "üïí –ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        import datetime
        current_time = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')

        result_text += (
            f"üèÜ <b>–ü—Ä–∏–∑:</b> {prize_name}\n"
            f"üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {slot1}{slot2}{slot3}\n"
            f"üíé <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {reward_text}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {current_time}\n\n"
            f"{final_message}"
        )
    else:
        result_text += (
            f"üòî –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ...\n\n"
            f"üçÄ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n"
            f"üéØ –£–¥–∞—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—ã–±–Ω–µ—Ç—Å—è –≤–∞–º!"
        )

    return result_text

def get_spins_available(attempts_used: int, daily_attempts: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (—Å —É—á—ë—Ç–æ–º –±–æ–Ω—É—Å–Ω—ã—Ö)
    """
    if attempts_used < 0:
        bonus = abs(attempts_used)
        return daily_attempts + bonus
    else:
        return max(0, daily_attempts - attempts_used)

def format_attempts_text(attempts_used: int, daily_attempts: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã.
    –ï—Å–ª–∏ attempts_used < 0, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤).
    """
    if attempts_used < 0:
        total = daily_attempts - attempts_used  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 5 - (-2) = 7
        return f"{total}/{daily_attempts}"
    else:
        left = max(0, daily_attempts - attempts_used)
        return f"{left}/{daily_attempts}"

def get_user_slot_stats(tg_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ —Å —É—á—ë—Ç–æ–º –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    spins_used, last_reset = get_user_slot_spins(tg_id)
    daily_attempts = int(get_admin_setting('slot_daily_attempts', '5'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    wins = get_slot_wins("completed")
    user_wins = [w for w in wins if w[2] == tg_id]
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏
    if spins_used < 0:
        bonus = abs(spins_used)
        remaining = daily_attempts + bonus
    else:
        remaining = max(0, daily_attempts - spins_used)
    return {
        'spins_used': spins_used,
        'daily_attempts': daily_attempts,
        'remaining': remaining,
        'total_wins': len(user_wins),
        'last_reset': last_reset,
        'attempts_text': format_attempts_text(spins_used, daily_attempts)
    }

def get_last_slot_results(tg_id: int, limit: int = 10):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    wins = get_slot_wins("completed")
    user_wins = [w for w in wins if w[2] == tg_id]
    return user_wins[-limit:] if user_wins else []

async def notify_admins_slot_win(user_id: int, combination: str, reward_type: str, reward_amount: float, bot=None):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–∏–≥—Ä—ã—à–µ –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ"""
    user = get_user_profile(user_id)
    if user:
        tg_id = user['tg_id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è
        full_name = user['full_name']
        username = user['username']
        reg_date = user['reg_date']
        user_info = f"@{username}" if username else f"ID {tg_id}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞–≥—Ä–∞–¥
        if reward_type == "stars":
            type_emoji = "‚≠ê"
            type_text = "–ó–í–Å–ó–î–´"
            reward_text = f"{reward_amount}‚≠ê"
            hashtag = "#–∑–≤—ë–∑–¥—ã"
        elif reward_type == "ton":
            type_emoji = "üíé"
            type_text = "TON"
            reward_text = f"{reward_amount} TON"
            hashtag = "#ton"
        elif reward_type == "money":
            type_emoji = "üí∞"
            type_text = "–î–ï–ù–¨–ì–ò"
            reward_text = f"{reward_amount}‚ÇΩ"
            hashtag = "#–¥–µ–Ω—å–≥–∏"
        else:
            type_emoji = "üéÅ"
            type_text = reward_type.upper()
            reward_text = f"{reward_amount}"
            hashtag = f"#{reward_type}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, —á—Ç–æ –∏ –∑–∞–∫–∞–∑—ã
        text = (
            f"{type_emoji} <b>–í–´–ò–ì–†–´–® –í –°–õ–û–¢-–ú–ê–®–ò–ù–ï - {type_text}</b> {type_emoji}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_info}\n"
            f"üÜî <b>ID:</b> <code>{tg_id}</code>\n"
            f"üìù <b>–ò–º—è:</b> {full_name}\n"
            f"üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {combination}\n"
            f"üèÜ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> <b>{reward_text}</b>\n"
            f"üïí <b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}\n\n"
            f"#—Å–ª–æ—Ç {hashtag}"
        )

        # –ü–æ–ª—É—á–∞–µ–º win_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–≥—Ä–∞–¥
        wins = get_slot_wins("pending")
        win_id = None
        for w in wins:
            # w[2] = tg_id, w[5] = reward_type, w[6] = reward_amount
            if w[2] == user_id and w[5] == reward_type and float(w[6]) == float(reward_amount):
                win_id = w[0]
                break

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–≥—Ä–∞–¥
        if win_id:
            admin_kb = slot_win_admin_kb(win_id, user_id, reward_type, reward_amount)
        else:
            admin_kb = None

        try:
            if bot:
                await notify_admins(bot, text, admin_kb, parse_mode="HTML")
            else:
                logger.error("[SLOT] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω bot –¥–ª—è notify_admins_slot_win")
        except Exception as e:
            logger.error(f"[SLOT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")