"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import re
import json
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.config import ADMINS
from app.database.models import (
    get_admin_setting, update_admin_setting, get_all_admin_settings,
    get_slot_configs, add_slot_config, delete_slot_config,
    get_activity_rewards, add_activity_reward, delete_activity_reward,
    get_all_users, update_user_referral_percent, get_user_referral_percent,
    get_user_profile_by_id, get_user_profile, get_user_by_username,
    update_user_referral_percent_by_username,
    delete_user_everywhere_full
)
from app.keyboards.main import (
    admin_settings_kb, admin_ui_settings_kb, admin_price_settings_kb,
    admin_stars_settings_kb, admin_slot_settings_kb, admin_activity_settings_kb
)

router = Router()

class AdminSettingStates(StatesGroup):
    waiting_for_value = State()
    waiting_for_slot_combination = State()
    waiting_for_slot_reward = State()
    waiting_for_slot_amount = State()
    waiting_for_slot_chance = State()
    waiting_for_slot_emoji = State()
    waiting_for_user_to_delete = State()
    waiting_for_slot_name = State()
    waiting_for_activity_days = State()
    waiting_for_activity_reward = State()
    waiting_for_activity_amount = State()
    waiting_for_activity_description = State()
    waiting_for_user_id = State()
    waiting_for_referral_username = State()
    waiting_for_referral_percent = State()
    waiting_for_ticket_username = State()
    waiting_for_ticket_amount = State()

class SlotAttemptsStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_attempts = State()

class AdminUIButtonStates(StatesGroup):
    waiting_for_btn_text = State()
    waiting_for_btn_action = State()
    waiting_for_btn_edit_index = State()
    editing_button = State()

class AdminSettings(StatesGroup):
    waiting_for_main_photo = State()

class AdminButtons(StatesGroup):
    waiting_for_button_type = State()
    waiting_for_button_text = State()
    waiting_for_button_action = State()
    editing_button = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_setting_with_default(key: str, default: str = ""):
    value = get_admin_setting(key, "")
    if not value:
        return default
    return value
    
@router.callback_query(F.data == "admin_ui_btn_settings")
async def admin_ui_btn_settings_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–Ω–æ–ø–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        btns = get_admin_setting('main_menu_btns', '[]')
        buttons = json.loads(btns) if btns else []
        
        kb = []
        for i, btn in enumerate(buttons):
            btn_text = btn.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:15]
            kb.append([
                InlineKeyboardButton(text=f"‚úèÔ∏è {btn_text}", callback_data=f"admin_ui_btn_edit_{i}"),
                InlineKeyboardButton(text="üóë", callback_data=f"admin_ui_btn_remove_{i}")
            ])
        
        kb.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="admin_ui_btn_add")])
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ui_settings")])
        
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫</b>\n\n–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in btn settings menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–æ–∫")
        return
 
             
        
@router.callback_query(F.data == "admin_ui_btn_add")
async def admin_ui_btn_add(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminUIButtonStates.waiting_for_btn_text)
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å. 30 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_ui_btn_settings")]]
        )
    )

@router.message(AdminUIButtonStates.waiting_for_btn_text)
async def process_btn_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    btn_text = message.text.strip()
    if not btn_text or len(btn_text) > 30:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(btn_text=btn_text)
    await state.set_state(AdminUIButtonStates.waiting_for_btn_action)
    
    await message.answer(
        "üîò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="Callback", callback_data="ui_btn_type_callback"),
                InlineKeyboardButton(text="URL", callback_data="ui_btn_type_url")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_ui_btn_settings")]
        ])
    )

@router.callback_query(F.data.startswith("ui_btn_type_"))
async def set_ui_btn_type(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    btn_type = callback.data.split("_")[-1]
    await state.update_data(btn_type=btn_type)
    
    prompt = {
        'callback': "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ callback_data (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):",
        'url': "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ URL (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://):"
    }[btn_type]
    
    await callback.message.edit_text(
        prompt,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_ui_btn_settings")]]
        )
    )

@router.message(AdminUIButtonStates.waiting_for_btn_action)
async def process_btn_action(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    action = message.text.strip()
    data = await state.get_data()
    btn_type = data.get('btn_type')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if btn_type == 'callback' and not re.match(r'^[a-zA-Z0-9_]+$', action):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    elif btn_type == 'url' and not action.startswith(('http://', 'https://')):
        await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    btns = json.loads(get_admin_setting('main_menu_btns', '[]'))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
    new_btn = {'text': data['btn_text']}
    if btn_type == 'callback':
        new_btn['callback_data'] = action
    else:
        new_btn['url'] = action
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    btns.append(new_btn)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    update_admin_setting('main_menu_btns', json.dumps(btns, ensure_ascii=False))
    
    await message.answer("‚úÖ –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()
    await admin_ui_btn_settings_menu(message)

@router.callback_query(F.data.startswith("admin_ui_btn_edit_"))
async def admin_ui_btn_edit(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        idx = int(callback.data.split("_")[-1])
        btns = json.loads(get_admin_setting('main_menu_btns', '[]'))
        
        if idx >= len(btns):
            await callback.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        await state.update_data(edit_index=idx)
        await state.set_state(AdminUIButtonStates.waiting_for_btn_edit_index)
        
        btn = btns[idx]
        await callback.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ #{idx + 1}\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: <code>{btn.get('text', '')}</code>\n"
            f"–¢–∏–ø: <b>{'URL' if 'url' in btn else 'Callback'}</b>\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: <code>{btn.get('url', btn.get('callback_data', ''))}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_ui_btn_settings")]]
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error editing button: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏")

@router.message(AdminUIButtonStates.waiting_for_btn_edit_index)
async def process_btn_edit_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    new_text = message.text.strip()
    if not new_text or len(new_text) > 30:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    idx = data.get('edit_index')
    btns = json.loads(get_admin_setting('main_menu_btns', '[]'))
    
    if idx < len(btns):
        btns[idx]['text'] = new_text
        update_admin_setting('main_menu_btns', json.dumps(btns, ensure_ascii=False))
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    await state.clear()
    await admin_ui_btn_settings_menu(message)

@router.callback_query(F.data.startswith("admin_ui_btn_remove_"))
async def admin_ui_btn_remove(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        idx = int(callback.data.split("_")[-1])
        btns = json.loads(get_admin_setting('main_menu_btns', '[]'))
        
        if idx < len(btns):
            deleted_text = btns[idx].get('text', '')
            btns.pop(idx)
            update_admin_setting('main_menu_btns', json.dumps(btns, ensure_ascii=False))
            await callback.answer(f"üóë –ö–Ω–æ–ø–∫–∞ '{deleted_text}' —É–¥–∞–ª–µ–Ω–∞")
        
        await admin_ui_btn_settings_menu(callback)
    except Exception as e:
        logging.error(f"Error removing button: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏")

@router.callback_query(F.data == "admin_slot_attempts")
async def admin_slot_attempts(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—ã—Ç–æ–∫ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await admin_slot_attempts_stats(callback)

@router.callback_query(F.data == "admin_slot_attempts_stats")
async def admin_slot_attempts_stats(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    import aiosqlite
    from datetime import datetime
    
    try:
        async with aiosqlite.connect('data/users.db') as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ø—ã—Ç–∫–∞–º (–±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
            cursor = await db.execute("""
                SELECT u.tg_id, u.username, ra.attempts_used 
                FROM roulette_attempts ra
                JOIN users u ON ra.user_id = u.tg_id
                WHERE ra.attempts_used < 0
                ORDER BY ra.attempts_used ASC
                LIMIT 20
            """)
            bonus_users = await cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor = await db.execute("SELECT COUNT(*) FROM roulette_attempts")
            total_users = (await cursor.fetchone())[0]
            
            cursor = await db.execute("SELECT SUM(attempts_used) FROM roulette_attempts WHERE attempts_used < 0")
            total_bonus = abs((await cursor.fetchone())[0] or 0)
            
            cursor = await db.execute("SELECT COUNT(*) FROM roulette_attempts WHERE attempts_used > 0")
            active_users = (await cursor.fetchone())[0]
    
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        return
    
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_users}\n"
    text += f"üéÅ –í—Å–µ–≥–æ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {total_bonus}\n\n"
    text += "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏:</b>\n"
    
    for i, user in enumerate(bonus_users[:10], 1):
        tg_id, username, attempts = user
        text += f"{i}. @{username if username else 'N/A'} (ID: {tg_id}): {abs(attempts)} –ø–æ–ø—ã—Ç–æ–∫\n"
    
    keyboard = [
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="admin_add_slot_attempts")],
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_slot_attempts_stats")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]
    ]
    
    await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")

@router.callback_query(F.data == "admin_settings")
async def admin_settings_menu(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω-–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not (callback and getattr(callback, 'from_user', None) and hasattr(callback.from_user, 'id') and is_admin(callback.from_user.id)):
        if callback:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if getattr(callback, 'message', None):
        await callback.message.answer(
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=admin_settings_kb(),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "admin_ui_settings")
async def admin_ui_settings_menu(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    if not (callback and getattr(callback, 'from_user', None) and hasattr(callback.from_user, 'id') and is_admin(callback.from_user.id)):
        if callback:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if getattr(callback, 'message', None):
        await callback.message.answer(
            "üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –±–æ—Ç–∞:",
            reply_markup=admin_ui_settings_kb(),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("admin_setting_"))
async def admin_setting_handler(callback: types.CallbackQuery, state: FSMContext):
    if not (callback.from_user and isinstance(callback.from_user.id, int) and is_admin(callback.from_user.id)):
        if callback:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    if not (callback and getattr(callback, 'data', None)):
        if callback:
            await callback.answer("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π callback_data")
        return
    raw_key = callback.data.replace("admin_setting_", "") if callback.data else ""
    key_map = {
        'prem_3': 'prem_3_price',
        'prem_6': 'prem_6_price',
        'prem_12': 'prem_12_price',
        'stars_rate_low': 'stars_rate_low',
        'stars_rate_high': 'stars_rate_high',
        'stars_threshold': 'stars_threshold',
        'slot_daily_attempts': 'slot_daily_attempts',
        'slot_reset_hour': 'slot_reset_hour',
        'withdrawal_commission': 'withdrawal_commission',
    }
    setting_key = key_map.get(raw_key, raw_key)
    # –î–ª—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ —Ñ–æ—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç
    default_map = {
        'stars_description': '‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ Telegram Stars ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        'premium_description': 'üíé Telegram Premium ‚Äî —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç Telegram, –¥–∞—é—â–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:',
        'crypto_description': 'üíé –ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        'reviews_description': 'üåü –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üåü\n–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤,',
        'about_description': '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ Legal Stars ‚Äî –ª–µ–≥–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ Telegram Stars, Premium –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ë–µ–∑–æ–ø–∞—Å–Ω–æ, –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ!',
        'main_description': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:',
        'main_title': 'Legal Stars ‚Äî –ª–µ–≥–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ Telegram Stars, Premium –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.',
        'stars_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'premium_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'crypto_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'reviews_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'about_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'support_description': 'üìû <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        'support_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'profile_description': 'üöÄ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –±–∞–ª–∞–Ω—Å–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.',
        'profile_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'slot_description': 'üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –æ—Ç Legal Stars.\n\nüéÅ–í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏, –∑–≤—ë–∑–¥—ã –∏ TON!',
        'slot_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
        'calendar_description': 'üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n–û—Ç–º–µ—á–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ!',
        'calendar_photo': 'https://imgur.com/a/TkOPe7c.jpeg',
    }
    current_value = get_setting_with_default(setting_key, default_map.get(setting_key, ""))
    if setting_key.startswith("prem_") or setting_key == "withdrawal_commission":
        prev_menu = "admin_price_settings"
    elif setting_key.startswith("stars_rate") or setting_key == "stars_threshold":
        prev_menu = "admin_stars_settings"
    elif setting_key.startswith("slot_"):
        prev_menu = "admin_slot_settings"
    elif setting_key.startswith("activity_"):
        prev_menu = "admin_activity_settings"
    elif setting_key.endswith("_photo"):
        prev_menu = "admin_ui_photo_settings"
    elif setting_key.endswith("_description") or setting_key.endswith("_title"):
        prev_menu = "admin_ui_titles_settings"
    else:
        prev_menu = "admin_settings"
    await state.update_data(setting_key=setting_key)
    await state.update_data(prev_menu=prev_menu)
    await state.set_state(AdminSettingStates.waiting_for_value)
    text = f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
    text += f"–ö–ª—é—á: <code>{setting_key}</code>\n"
    text += f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}</code>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    if getattr(callback, 'message', None):
        await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=prev_menu)]]
        ), parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_value)
async def process_setting_value(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    setting_key = data.get('setting_key')
    prev_menu = data.get('prev_menu', 'admin_settings')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    if setting_key.endswith('_photo'):
        if message.photo:
            # –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            value = message.photo[-1].file_id
        elif message.text and (message.text.startswith('http://') or message.text.startswith('https://')):
            # –ï—Å–ª–∏ —ç—Ç–æ URL, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            value = message.text
        else:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é URL-—Å—Å—ã–ª–∫—É")
            return
        
        update_admin_setting(setting_key, value)
        await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–ª—è {setting_key} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        if prev_menu == "admin_ui_settings":
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
            class FakeCallback:
                def __init__(self, user_id):
                    self.from_user = types.User(id=user_id, is_bot=False, first_name="Admin")
                    self.message = message
            fake_callback = FakeCallback(message.from_user.id)
            await admin_ui_settings_menu(fake_callback)
        elif prev_menu == "admin_ui_photo_settings":
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
            class FakeCallback:
                def __init__(self, user_id):
                    self.from_user = types.User(id=user_id, is_bot=False, first_name="Admin")
                    self.message = message
            fake_callback = FakeCallback(message.from_user.id)
            await admin_ui_photo_settings_menu(fake_callback)
        else:
            await admin_settings_menu(message)
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    default_map = {
        'stars_description': '‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ Telegram Stars ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        'premium_description': 'üíé Telegram Premium ‚Äî —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç Telegram, –¥–∞—é—â–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:',
        'crypto_description': 'üíé –ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        'reviews_description': 'üåü –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üåü\n–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤,',
        'about_description': '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ Legal Stars ‚Äî –ª–µ–≥–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ Telegram Stars, Premium –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ë–µ–∑–æ–ø–∞—Å–Ω–æ, –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ!',
        'profile_description': 'üöÄ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –±–∞–ª–∞–Ω—Å–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.',
        'slot_description': 'üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –æ—Ç Legal Stars.\n\nüéÅ–í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏, –∑–≤—ë–∑–¥—ã –∏ TON!',
        'calendar_description': 'üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n–û—Ç–º–µ—á–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ!'
    }
    value = message.text if message and getattr(message, 'text', None) else ""
    if setting_key in default_map and (not value or not value.strip()):
        value = default_map[setting_key]
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if setting_key and (setting_key.startswith('prem_') or setting_key == 'withdrawal_commission' or 'rate' in setting_key or 'threshold' in setting_key):
        try:
            if not message or getattr(message, 'text', None) is None:
                raise ValueError()
            float(message.text)
        except ValueError:
            if message:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
    
    if setting_key:
        update_admin_setting(setting_key, value)
        if message:
            await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ <b>{setting_key}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: <code>{value}</code>", parse_mode="HTML")
    
    await state.clear()
    from app.keyboards.main import (
        admin_settings_kb, admin_price_settings_kb, admin_stars_settings_kb, 
        admin_slot_settings_kb, admin_activity_settings_kb
    )
    
    if prev_menu == "admin_settings":
        if message:
            await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=admin_settings_kb(), parse_mode="HTML")
    elif prev_menu == "admin_price_settings":
        if message:
            await message.answer("üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=admin_price_settings_kb(), parse_mode="HTML")
    elif prev_menu == "admin_stars_settings":
        if message:
            await message.answer("‚≠ê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–µ–∑–¥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=admin_stars_settings_kb(), parse_mode="HTML")
    elif prev_menu == "admin_slot_settings":
        if message:
            await message.answer("üé∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_slot_settings_kb(), parse_mode="HTML")
    elif prev_menu == "admin_referral_percents":
        from app.database.models import get_all_users, get_user_referral_percent
        users = get_all_users()
        text = "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞:"
        keyboard = []
        for user in users[:10]:
            percent = get_user_referral_percent(user[1])
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{user[2]} ({percent}%)",
                    callback_data=f"ref_user_{user[1]}"
                )
            ])
        keyboard.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")])
        if message:
            await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    else:
        if message:
            await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=admin_settings_kb(), parse_mode="HTML")

@router.callback_query(F.data == "admin_price_settings")
async def admin_price_settings_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    text = "üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    if callback.message:
        await callback.message.answer(text, reply_markup=admin_price_settings_kb(), parse_mode="HTML")

@router.callback_query(F.data.startswith("admin_setting_prem_"))
async def admin_premium_price_handler(callback: types.CallbackQuery, state: FSMContext):
    if not (callback.from_user and is_admin(callback.from_user.id)):
        if callback:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    if not callback.data:
        if callback:
            await callback.answer("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π callback_data")
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –ø–µ—Ä–∏–æ–¥–æ–≤
    period_map = {
        '3': '3_price',
        '6': '6_price',
        '12': '12_price'
    }
    
    period = callback.data.replace("admin_setting_prem_", "")
    setting_key = f"prem_{period_map.get(period, period)}_price"
    
    current_value = get_admin_setting(setting_key, "0")
    await state.update_data(setting_key=setting_key)
    await state.set_state(AdminSettingStates.waiting_for_value)
    
    # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
    period_names = {
        '3': '3 –º–µ—Å—è—Ü–∞',
        '6': '6 –º–µ—Å—è—Ü–µ–≤',
        '12': '12 –º–µ—Å—è—Ü–µ–≤'
    }
    
    text = f"üí∞ <b>–¶–µ–Ω–∞ Premium {period_names.get(period, period)}</b>\n\n"
    text += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{current_value}</code> RUB\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    
    if callback.message:
        await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_price_settings")]]
        ), parse_mode="HTML")

@router.callback_query(F.data == "admin_setting_withdrawal_commission")
async def admin_withdrawal_commission_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    current_value = get_admin_setting('withdrawal_commission', '3.0')
    await state.update_data(setting_key='withdrawal_commission')
    await state.set_state(AdminSettingStates.waiting_for_value)
    text = f"üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ</b>\n\n"
    text += f"–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: <code>{current_value}</code>%\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    if callback.message:
        await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_price_settings")]]
        ), parse_mode="HTML")

@router.callback_query(F.data == "admin_stars_settings")
async def admin_stars_settings_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    text = "‚≠ê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–µ–∑–¥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    if callback.message:
        await callback.message.answer(text, reply_markup=admin_stars_settings_kb(), parse_mode="HTML")

@router.callback_query(F.data == "admin_slot_settings")
async def admin_slot_settings_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    configs = get_slot_configs()
    daily_attempts = get_admin_setting('slot_daily_attempts', '5')
    text = "üé∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n"
    text += f"–í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(configs)}\n"
    text += f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {daily_attempts}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é", callback_data="slot_add_config")],
        [types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π", callback_data="slot_list_configs")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ]
    if callback.message:
        await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")

@router.callback_query(F.data == "slot_add_config")
async def slot_add_config_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await state.set_state(AdminSettingStates.waiting_for_slot_combination)
    text = "üé∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üçíüçíüçí):"

    await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]]
    ), parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_slot_combination)
async def process_slot_combination(message: types.Message, state: FSMContext):
    if not (message.from_user and hasattr(message.from_user, 'id') and isinstance(message.from_user.id, int) and is_admin(message.from_user.id)):
        return
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    await state.update_data(combination=message.text)
    await state.set_state(AdminSettingStates.waiting_for_slot_reward)
    text = "üé∞ <b>–¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:\n"
    text += "‚Ä¢ <code>money</code> - –¥–µ–Ω—å–≥–∏ (‚ÇΩ)\n"
    text += "‚Ä¢ <code>stars</code> - –∑–≤—ë–∑–¥—ã (‚≠êÔ∏è)\n"
    text += "‚Ä¢ <code>ton</code> - TON –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"

    keyboard = [
        [types.InlineKeyboardButton(text="üí∞ –î–µ–Ω—å–≥–∏", callback_data="slot_reward_money")],
        [types.InlineKeyboardButton(text="‚≠êÔ∏è –ó–≤—ë–∑–¥—ã", callback_data="slot_reward_stars")],
        [types.InlineKeyboardButton(text="üíé TON", callback_data="slot_reward_ton")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]
    ]

    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")

@router.callback_query(F.data.startswith("slot_reward_"))
async def slot_reward_type_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    reward_type = callback.data.replace("slot_reward_", "")
    await state.update_data(reward_type=reward_type)
    await state.set_state(AdminSettingStates.waiting_for_slot_amount)

    reward_names = {
        "money": "–¥–µ–Ω–µ–≥ (‚ÇΩ)",
        "stars": "–∑–≤—ë–∑–¥ (‚≠êÔ∏è)",
        "ton": "TON"
    }

    text = f"üé∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {reward_names.get(reward_type, '–Ω–∞–≥—Ä–∞–¥—ã')}</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"

    await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]]
    ), parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_slot_reward)
async def process_slot_reward(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã —Ç–µ–∫—Å—Ç–æ–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    if not (message.from_user and hasattr(message.from_user, 'id') and isinstance(message.from_user.id, int) and is_admin(message.from_user.id)):
        return
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã!")
        return
    reward_type = message.text.lower()
    if reward_type not in ['money', 'stars', 'ton']:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: money, stars, ton")
        return
    await state.update_data(reward_type=reward_type)
    await state.set_state(AdminSettingStates.waiting_for_slot_amount)

    reward_names = {
        "money": "–¥–µ–Ω–µ–≥ (‚ÇΩ)",
        "stars": "–∑–≤—ë–∑–¥ (‚≠êÔ∏è)",
        "ton": "TON"
    }

    text = f"üé∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {reward_names.get(reward_type, '–Ω–∞–≥—Ä–∞–¥—ã')}</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]]
    ), parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_slot_amount)
async def process_slot_amount(message: types.Message, state: FSMContext):
    if not (message.from_user and hasattr(message.from_user, 'id') and isinstance(message.from_user.id, int) and is_admin(message.from_user.id)):
        return
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    try:
        amount = float(message.text)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(amount=amount)
    await state.set_state(AdminSettingStates.waiting_for_slot_chance)
    text = "üé∞ <b>–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–Ω—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100):"
    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]]
    ), parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_slot_chance)
async def process_slot_chance(message: types.Message, state: FSMContext):
    if not (message.from_user and hasattr(message.from_user, 'id') and isinstance(message.from_user.id, int) and is_admin(message.from_user.id)):
        return
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å!")
        return
    try:
        chance = float(message.text)
        if not 0 <= chance <= 100:
            raise ValueError()
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–Ω—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
        return
    await state.update_data(chance=chance)
    await state.set_state(AdminSettingStates.waiting_for_slot_emoji)
    text = "üé∞ <b>–≠–º–æ–¥–∑–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:"
    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]]
    ), parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_slot_emoji)
async def process_slot_emoji(message: types.Message, state: FSMContext):
    if not (message.from_user and hasattr(message.from_user, 'id') and isinstance(message.from_user.id, int) and is_admin(message.from_user.id)):
        return
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏!")
        return
    await state.update_data(emoji=message.text)
    await state.set_state(AdminSettingStates.waiting_for_slot_name)
    text = "üé∞ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:"
    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]]
    ), parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_slot_name)
async def process_slot_name(message: types.Message, state: FSMContext):
    if not (message.from_user and hasattr(message.from_user, 'id') and isinstance(message.from_user.id, int) and is_admin(message.from_user.id)):
        return
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏!")
        return
    data = await state.get_data()
    try:
        add_slot_config(
            combination=data['combination'],
            reward_type=data['reward_type'],
            reward_amount=data['amount'],
            chance_percent=data['chance'],
            emoji=data['emoji'],
            name=message.text
        )
        await message.answer(f"‚úÖ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n"
                           f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {data['combination']}\n"
                           f"–¢–∏–ø: {data['reward_type']}\n"
                           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['amount']}\n"
                           f"–®–∞–Ω—Å: {data['chance']}%\n"
                           f"–≠–º–æ–¥–∑–∏: {data['emoji']}\n"
                           f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")
    await state.clear()

@router.callback_query(F.data == "slot_list_configs")
async def slot_list_configs(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    configs = get_slot_configs()
    if not configs:
        text = "üìã <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    else:
        text = "üìã <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n"
        for config in configs:
            text += f"üé∞ <b>{config[6]}</b> ({config[1]})\n"
            text += f"   –ù–∞–≥—Ä–∞–¥–∞: {config[2]} {config[3]}\n"
            text += f"   –®–∞–Ω—Å: {config[4]}%\n"
            text += f"   –≠–º–æ–¥–∑–∏: {config[5]}\n\n"
    keyboard = [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_settings")]]
    if callback.message:
        await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")

@router.callback_query(F.data == "admin_referral_percents")
async def admin_referral_percents_menu(callback: types.CallbackQuery, state: FSMContext):
    if not (callback and getattr(callback, 'from_user', None) and hasattr(callback.from_user, 'id') and is_admin(callback.from_user.id)):
        if callback:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏</b>\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞:"

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ])

    await state.set_state(AdminSettingStates.waiting_for_referral_username)
    if getattr(callback, 'message', None):
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(AdminSettingStates.waiting_for_referral_username)
async def process_referral_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º")
        return

    username = message.text.strip()
    if not username:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_username(username)
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º @{username.lstrip('@')} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        user_username=user['username'],
        user_tg_id=user['tg_id'],
        user_full_name=user['full_name'],
        current_percent=user['referral_percent']
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º</b>\n\n"
    text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
    text += f"üìù –ò–º—è: {user['full_name']}\n"
    text += f"üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {user['referral_percent']}%\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å %", callback_data="ref_increase_percent"),
            types.InlineKeyboardButton(text="‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å %", callback_data="ref_decrease_percent")
        ],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="ref_set_exact_percent")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_referral_percents")]
    ])

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminSettingStates.waiting_for_referral_percent)

@router.callback_query(F.data == "ref_increase_percent")
async def ref_increase_percent(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞ 1%"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    data = await state.get_data()
    username = data.get('user_username')
    current_percent = data.get('current_percent', 5.0)

    new_percent = min(100.0, current_percent + 1.0)  # –ú–∞–∫—Å–∏–º—É–º 100%

    if update_user_referral_percent_by_username(username, new_percent):
        await state.update_data(current_percent=new_percent)

        text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º</b>\n\n"
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        text += f"üìä –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {new_percent}%\n\n"
        text += "‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω!"

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å %", callback_data="ref_increase_percent"),
                types.InlineKeyboardButton(text="‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å %", callback_data="ref_decrease_percent")
            ],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="ref_set_exact_percent")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_referral_percents")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")

@router.callback_query(F.data == "ref_decrease_percent")
async def ref_decrease_percent(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞ 1%"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    data = await state.get_data()
    username = data.get('user_username')
    current_percent = data.get('current_percent', 5.0)

    new_percent = max(0.0, current_percent - 1.0)  # –ú–∏–Ω–∏–º—É–º 0%

    if update_user_referral_percent_by_username(username, new_percent):
        await state.update_data(current_percent=new_percent)

        text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º</b>\n\n"
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        text += f"üìä –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {new_percent}%\n\n"
        text += "‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω!"

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å %", callback_data="ref_increase_percent"),
                types.InlineKeyboardButton(text="‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å %", callback_data="ref_decrease_percent")
            ],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="ref_set_exact_percent")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_referral_percents")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")

@router.callback_query(F.data == "ref_set_exact_percent")
async def ref_set_exact_percent(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    data = await state.get_data()
    username = data.get('user_username')
    current_percent = data.get('current_percent', 5.0)

    text = f"üë• <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞</b>\n\n"
    text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
    text += f"üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {current_percent}%\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (0-100):"

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_referral_percents")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminSettingStates.waiting_for_referral_percent)

@router.message(AdminSettingStates.waiting_for_referral_percent)
async def process_referral_percent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º")
        return

    try:
        percent = float(message.text)
        if not 0 <= percent <= 100:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
        return

    data = await state.get_data()
    username = data.get('user_username')

    if not username:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    try:
        if update_user_referral_percent_by_username(username, percent):
            await state.update_data(current_percent=percent)

            text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º</b>\n\n"
            text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            text += f"üìä –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {percent}%\n\n"
            text += "‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"

            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å %", callback_data="ref_increase_percent"),
                    types.InlineKeyboardButton(text="‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å %", callback_data="ref_decrease_percent")
                ],
                [types.InlineKeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="ref_set_exact_percent")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_referral_percents")]
            ])

            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

# === –ë–ò–õ–ï–¢–ò–ö–ò –°–õ–û–¢-–ú–ê–®–ò–ù–´ ===

@router.callback_query(F.data == "admin_slot_tickets")
async def admin_slot_tickets_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∏–∫–∞–º–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    text = "üé´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∏–∫–∞–º–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n"
    text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):"

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminSettingStates.waiting_for_ticket_username)
    await callback.answer()

@router.message(AdminSettingStates.waiting_for_ticket_username)
async def process_ticket_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∏–ª–µ—Ç–∏–∫–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º")
        return

    username = message.text.strip().lstrip('@')
    if not username:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_username(username)
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(
        ticket_user_id=user['tg_id'],
        ticket_username=user['username'],
        ticket_full_name=user['full_name']
    )

    text = f"üé´ <b>–í—ã–¥–∞—á–∞ –±–∏–ª–µ—Ç–∏–∫–æ–≤</b>\n\n"
    text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
    text += f"üìù –ò–º—è: {user['full_name']}\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–∏–∫–æ–≤ (–ø–æ–ø—ã—Ç–æ–∫) –¥–ª—è –≤—ã–¥–∞—á–∏:"

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_slot_tickets")]
    ])

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminSettingStates.waiting_for_ticket_amount)

@router.message(AdminSettingStates.waiting_for_ticket_amount)
async def process_ticket_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–∏–∫–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º")
        return

    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    data = await state.get_data()
    user_id = data.get('ticket_user_id')
    username = data.get('ticket_username')
    full_name = data.get('ticket_full_name')

    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–∞–±–ª–∏—Ü—É bonus_attempts
        from app.handlers.user import add_slot_attempts
        await add_slot_attempts(user_id, amount)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer(
            f"‚úÖ <b>–ë–∏–ª–µ—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üìù –ò–º—è: {full_name}\n"
            f"üé´ –í—ã–¥–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {amount}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö.",
            parse_mode="HTML"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        try:
            await message.bot.send_message(
                user_id,
                f"üé´ <b>–í–∞–º –≤—ã–¥–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏!</b>\n\n"
                f"üé∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –ø–æ–ø—ã—Ç–æ–∫\n"
                f"üí´ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ!\n\n"
                f"–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer("‚ö†Ô∏è –ë–∏–ª–µ—Ç–∏–∫–∏ –≤—ã–¥–∞–Ω—ã, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∏–ª–µ—Ç–∏–∫–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∏–ª–µ—Ç–∏–∫–æ–≤: {str(e)}")

    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –±–∏–ª–µ—Ç–∏–∫–æ–≤
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üé´ –í—ã–¥–∞—Ç—å –µ—â–µ –±–∏–ª–µ—Ç–∏–∫–∏", callback_data="admin_slot_tickets")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ])

    await message.answer(
        "üé´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∏–∫–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_ui_photo_settings")
async def admin_ui_photo_settings_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    text = "üñºÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="admin_setting_main_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ Premium", callback_data="admin_setting_premium_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∑–≤—ë–∑–¥", callback_data="admin_setting_stars_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤", callback_data="admin_setting_reviews_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="admin_setting_crypto_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ about", callback_data="admin_setting_about_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="admin_setting_support_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="admin_setting_profile_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã", callback_data="admin_setting_slot_photo")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data="admin_setting_calendar_photo")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ui_settings")],
        ]
    ), parse_mode="HTML")

@router.callback_query(F.data == "admin_ui_titles_settings")
async def admin_ui_titles_settings_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    text = "üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_setting_main_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ Premium", callback_data="admin_setting_premium_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∑–≤—ë–∑–¥", callback_data="admin_setting_stars_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤", callback_data="admin_setting_reviews_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="admin_setting_crypto_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ about", callback_data="admin_setting_about_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="admin_setting_support_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="admin_setting_profile_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã", callback_data="admin_setting_slot_description")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data="admin_setting_calendar_description")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ui_settings")],
        ]
    ), parse_mode="HTML")

@router.callback_query(F.data == "admin_ui_btn_settings")
async def admin_ui_btn_settings_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        btns = get_admin_setting('main_menu_btns', '[]')
        buttons = json.loads(btns) if btns else []
        
        kb = []
        for i, btn in enumerate(buttons):
            btn_text = btn.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:15]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            kb.append([
                InlineKeyboardButton(text=f"‚úèÔ∏è {btn_text}", callback_data=f"admin_ui_btn_edit_{i}"),
                InlineKeyboardButton(text="üóë", callback_data=f"admin_ui_btn_remove_{i}")
            ])
        
        kb.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="admin_ui_btn_add")])
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ui_settings")])
        
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫</b>\n\n–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in btn settings menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–æ–∫")

@router.callback_query(F.data == "admin_ui_btn_add")
async def admin_ui_btn_add(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminUIButtonStates.waiting_for_btn_text)
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å. 30 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_ui_btn_settings")]]
        )
    )

@router.callback_query(F.data.startswith("admin_ui_btn_edit_"))
async def admin_ui_btn_edit(callback: types.CallbackQuery, state: FSMContext):
    if not (callback.from_user and is_admin(callback.from_user.id)):
        if callback:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    if not (callback.data and callback.data.startswith("admin_ui_btn_edit_")):
        if callback:
            await callback.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞")
        await admin_ui_btn_settings_menu(callback)
        return
    try:
        idx = int(callback.data.replace("admin_ui_btn_edit_", ""))
    except Exception:
        if callback:
            await callback.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞")
        await admin_ui_btn_settings_menu(callback)
        return
    await state.update_data(edit_index=idx)
    await state.set_state(AdminUIButtonStates.waiting_for_btn_edit_index)
    import json
    btns = get_admin_setting('main_menu_btns', '[]')
    try:
        btns = json.loads(btns)
    except Exception:
        btns = []
    if 0 <= idx < len(btns):
        btn = btns[idx]
        if callback.message:
            await callback.message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {btn.get('text','')}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ui_btn_settings")]]
            ))
    else:
        if callback:
            await callback.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞")
        await admin_ui_btn_settings_menu(callback)

# === –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

@router.callback_query(F.data == "admin_delete_user")
async def admin_delete_user_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç:\n"
    text += "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    text += "‚Ä¢ –í–µ—Å—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é\n"
    text += "‚Ä¢ –í—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–∫–∞–∑—ã\n"
    text += "‚Ä¢ –û—Ç–∑—ã–≤—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
    text += "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ —Å–≤—è–∑–∏"

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ])

    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except:
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await state.set_state(AdminSettingStates.waiting_for_user_to_delete)

@router.message(AdminSettingStates.waiting_for_user_to_delete)
async def process_user_deletion(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return

    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º")
        return

    user_input = message.text.strip()
    if not user_input:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º")
        return

    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É
        user = None

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if user_input.startswith('@'):
            # –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É - —É–±–∏—Ä–∞–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            username = user_input[1:].lower()
            user = get_user_by_username(username)
        elif user_input.isdigit():
            # –ü–æ–∏—Å–∫ –ø–æ tg_id
            tg_id = int(user_input)
            user_profile = get_user_profile(tg_id)
            if user_profile:
                user = {
                    'tg_id': user_profile['tg_id'],
                    'username': user_profile['username'],
                    'full_name': user_profile['full_name'],
                    'balance': user_profile['balance']
                }
        else:
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @ - –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            username = user_input.lower()
            user = get_user_by_username(username)

        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_tg_id = user['tg_id']
        user_username = user.get('username', '')
        user_full_name = user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        user_balance = user.get('balance', 0)

        username_display = f"@{user_username}" if user_username else f"ID: {user_tg_id}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{user_tg_id}")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_user")]
        ])

        await message.answer(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username_display}\n"
            f"<b>–ò–º—è:</b> {user_full_name}\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance:.2f}‚ÇΩ\n\n"
            f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å</b> —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b>!",
            parse_mode="HTML",
            reply_markup=kb
        )
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        await state.clear()

@router.callback_query(F.data.startswith("confirm_delete_user_"))
async def confirm_user_deletion(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        tg_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        user_profile = get_user_profile(tg_id)
        if not user_profile:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        username = user_profile.get('username', '')
        full_name = user_profile.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username_display = f"@{username}" if username else f"ID: {tg_id}"

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
        delete_user_everywhere_full(tg_id)

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
        ])

        try:
            await callback.message.delete()
        except Exception:
            pass

        await callback.message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"<b>–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username_display}\n"
            f"<b>–ò–º—è:</b> {full_name}\n\n"
            f"üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã:\n"
            f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            f"‚Ä¢ –ó–∞—è–≤–∫–∏ –∏ –∑–∞–∫–∞–∑—ã\n"
            f"‚Ä¢ –û—Ç–∑—ã–≤—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏",
            parse_mode="HTML",
            reply_markup=kb
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...")

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
        ])

        try:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode="HTML",
                reply_markup=kb
            )
        except:
            await callback.message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode="HTML",
                reply_markup=kb
            )

