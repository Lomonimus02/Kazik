"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
"""
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, types
import logging
import asyncio
from datetime import datetime
from typing import Optional

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import html

from app.database.models import get_user_roulette_attempts
from app.config import ADMINS, SUPPORT_CHAT_ID
from app.database.models import (
    create_support_ticket,
    get_support_ticket_by_id,
    update_support_ticket_status,
    get_user_profile_by_id,
    get_user_profile,
    get_or_create_user,
    get_admin_setting,
    get_all_support_tickets,
    delete_support_ticket,
    clear_all_support_tickets
)
from app.keyboards.main import support_menu_kb, admin_support_tickets_kb, admin_support_ticket_actions_kb, admin_clear_all_tickets_kb
from app.utils.misc import is_admin

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–Ω–∞–ª–æ–≤
from app.constants import CHANNEL_ID, CHANNEL_USERNAME, CHANNEL_LINK

router = Router()
logger = logging.getLogger(__name__)

class SupportStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    waiting_for_message = State()
    waiting_for_admin_reply = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω–æ–≤
admin_sessions = {}

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

async def check_subscription(user_id: int, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ CHANNEL_ID (–Ω–∞–¥–µ–∂–Ω–µ–µ)
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if member.status not in ['left', 'kicked']:
                return True
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ ID: {e}")

        # –ï—Å–ª–∏ –ø–æ ID –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ USERNAME
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
            return member.status not in ['left', 'kicked']
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            return False
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_subscription: {e}")
        return False

async def show_subscription_message(call: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = (
        "üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
        "üì¢ <b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?</b>\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üëá"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_callback = f"check_sub_{call.data}" if call.data != "main_menu" else "check_subscription"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=check_callback)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    except:
        await call.message.answer(text, parse_mode="HTML", reply_markup=markup)
        
@router.callback_query(F.data == "support")
async def support_menu(callback: types.CallbackQuery, bot: Bot):
    """
    –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Ñ–æ—Ç–æ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    from app.handlers.user import check_blacklist_and_respond
    if await check_blacklist_and_respond(callback.from_user.id, callback):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    from app.config_flags import proverka
    if proverka and not await check_subscription(callback.from_user.id, bot):
        await show_subscription_message(callback, bot)
        return

    try:
        support_photo = get_admin_setting('support_photo', 'https://imgur.com/a/taqnUZN.jpeg')
        support_description = get_admin_setting(
    'support_description',
    '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Legal Stars üé®\n\n'
    'üåü –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º! üåü\n\n'
    '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å. '
    '–ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º.\n\n'
    '–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏?\n'
    'üì© –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏!'
)

        msg = getattr(callback, 'message', None)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        try:
            if msg and hasattr(msg, 'edit_media'):
                # –ï—Å–ª–∏ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–¥–∏–∞
                media = types.InputMediaPhoto(
                    media=support_photo,
                    caption=support_description,
                    parse_mode="HTML"
                )
                await msg.edit_media(
                    media=media,
                    reply_markup=support_menu_kb()
                )
            elif msg and hasattr(msg, 'answer_photo'):
                await msg.answer_photo(
                    photo=support_photo,
                    caption=support_description,
                    parse_mode="HTML",
                    reply_markup=support_menu_kb()
                )
            else:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await (msg or callback.message).answer(
                    support_description,
                    parse_mode="HTML",
                    reply_markup=support_menu_kb()
                )
        except Exception as media_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {media_error}")
            await (msg or callback.message).answer(
                support_description,
                parse_mode="HTML",
                reply_markup=support_menu_kb()
            )

        await callback.answer()

    except Exception as e:
        logging.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ support_menu: {e}", exc_info=True)
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass  # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
            
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        await notify_admins(
            bot,
            f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É @{callback.from_user.username or callback.from_user.id}:\n{str(e)}"
        )

async def support_menu_no_delete(callback: types.CallbackQuery, bot: Bot):
    """
    –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    from app.handlers.user import check_blacklist_and_respond
    if await check_blacklist_and_respond(callback.from_user.id, callback):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    from app.config_flags import proverka
    if proverka and not await check_subscription(callback.from_user.id, bot):
        await show_subscription_message(callback, bot)
        return

    try:
        support_photo = get_admin_setting('support_photo', 'https://imgur.com/a/taqnUZN.jpeg')
        support_description = get_admin_setting(
    'support_description',
    '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Legal Stars üé®\n\n'
    'üåü –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º! üåü\n\n'
    '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å. '
    '–ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º.\n\n'
    '–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏?\n'
    'üì© –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏!'
)

        # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.answer_photo(
                photo=support_photo,
                caption=support_description,
                parse_mode="HTML",
                reply_markup=support_menu_kb()
            )
        except Exception as media_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {media_error}")
            await callback.message.answer(
                support_description,
                parse_mode="HTML",
                reply_markup=support_menu_kb()
            )

        await callback.answer()

    except Exception as e:
        logging.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ support_menu_no_delete: {e}", exc_info=True)
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass  # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        await notify_admins(
            bot,
            f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (no_delete) —É @{callback.from_user.username or callback.from_user.id}:\n{str(e)}"
        )

@router.callback_query(F.data == "support_contact")
async def support_contact(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        text = (
            "‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
        )
        
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer(
                text,
                parse_mode="HTML"
            )
        
        await state.set_state(SupportStates.waiting_for_message)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ support_contact: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.message(SupportStates.waiting_for_message)
async def process_support_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if not message.text or message.text.startswith('/'):
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç, –∞ —Ñ–∞–π–ª/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
            if message.document or message.photo or message.sticker or message.video or message.audio or message.voice:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
                return
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω
        if message.from_user and is_admin(message.from_user.id):
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
            await state.clear()
            return
        
        user = message.from_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile(user.id)
        if not user_profile:
            get_or_create_user(
                user.id, 
                user.full_name or user.username or str(user.id),
                user.username or "",
                datetime.now().strftime("%Y-%m-%d")
            )
            user_profile = get_user_profile(user.id)
        
        if not user_profile:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket_id = create_support_ticket(
            user_profile['id'],  # db_user_id
            user.username or "",
            user.full_name or user.username or str(user.id),
            message.text
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{html.escape(message.text)}\n\n"
            f"–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        user_display = f"@{user.username}" if user.username else (user.full_name or f"ID: {user.id}")
        support_text = (
            f"üì© <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {html.escape(user_display)}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user.id}</code>\n"
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{html.escape(message.text)}"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        try:
            bot_info = await message.bot.me()
            bot_username = bot_info.username
            reply_url = f"https://t.me/{bot_username}?start=reply_{ticket_id}"
        except Exception:
            # Fallback –Ω–∞ callback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞
            reply_url = None

        if reply_url:
            reply_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å", url=reply_url)],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_ticket_{ticket_id}")]
            ])
        else:
            reply_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket_{ticket_id}")],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_ticket_{ticket_id}")]
            ])
        
        try:
            if message.bot and SUPPORT_CHAT_ID:
                logger.info(f"[SUPPORT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç #{ticket_id} –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {SUPPORT_CHAT_ID}")
                await message.bot.send_message(
                    int(SUPPORT_CHAT_ID),
                    support_text,
                    parse_mode="HTML",
                    reply_markup=reply_kb
                )
                logger.info(f"[SUPPORT] –¢–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            elif not SUPPORT_CHAT_ID:
                logger.warning("[SUPPORT] SUPPORT_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {SUPPORT_CHAT_ID}: {e}")
            await message.answer("‚ö†Ô∏è –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ process_support_message: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("reply_ticket_"))
async def reply_ticket_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞ —Ç–∏–∫–µ—Ç"""
    try:
        if not callback.from_user or not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        ticket_id = int(callback.data.replace("reply_ticket_", ""))
        ticket = get_support_ticket_by_id(ticket_id)
        
        if not ticket:
            await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∞
        admin_sessions[callback.from_user.id] = {
            'ticket_id': ticket_id,
            'user_id': ticket['user_id'],
            'username': ticket['username'],
            'full_name': ticket['full_name'],
            'message': ticket['message']
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID
        user_profile = get_user_profile_by_id(ticket['user_id'])
        user_display = f"@{ticket['username']}" if ticket['username'] else ticket['full_name']
        user_tg_id = user_profile['tg_id'] if user_profile else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ –õ–°
        admin_text = (
            f"‚úçÔ∏è <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {html.escape(user_display)}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user_tg_id}</code>\n"
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{html.escape(ticket['message'])}\n\n"
            f"üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:</b>"
        )
        
        try:
            if callback.bot:
                await callback.bot.send_message(
                    callback.from_user.id,
                    admin_text,
                    parse_mode="HTML"
                )
                await callback.answer("‚úÖ –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç –≤ –õ–°!", show_alert=True)
        except Exception as e:
            logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –õ–°.", show_alert=True)
            
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ reply_ticket_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)

@router.callback_query(F.data.startswith("close_ticket_"))
async def close_ticket_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä—ã—Ç—å' —Ç–∏–∫–µ—Ç"""
    try:
        if not callback.from_user or not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        ticket_id = int(callback.data.replace("close_ticket_", ""))
        ticket = get_support_ticket_by_id(ticket_id)
        if not ticket:
            await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
        update_support_ticket_status(ticket_id, "closed")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile_by_id(ticket['user_id'])
        if user_profile and callback.bot:
            try:
                await callback.bot.send_message(
                    user_profile['tg_id'],  # tg_id
                    f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                    f"–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        # –í–º–µ—Å—Ç–æ edit_text –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        msg = callback.message
        if msg and hasattr(msg, 'answer'):
            await msg.answer(
                f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç</b>",
                parse_mode="HTML"
            )
        await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ close_ticket_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞", show_alert=True)

@router.message(F.chat.type == 'private')
async def handle_admin_reply(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM-—Å—Ü–µ–Ω–∞—Ä–∏–∏ ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
        return
    # –ù–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
    try:
        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
        if not message.from_user or not is_admin(message.from_user.id):
            return

        admin_id = message.from_user.id

        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è - –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if admin_id not in admin_sessions:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, admin_settings) –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            return
        
        session = admin_sessions[admin_id]
        ticket_id = session['ticket_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ticket = get_support_ticket_by_id(ticket_id)
        if not ticket:
            await message.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            del admin_sessions[admin_id]
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile_by_id(session['user_id'])
        if not user_profile:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            del admin_sessions[admin_id]
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot and message.text:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ tg_id —ç—Ç–æ —á–∏—Å–ª–æ
                tg_id = int(user_profile['tg_id'])
                await message.bot.send_message(
                    tg_id,
                    f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}</b>\n\n"
                    f"{html.escape(message.text)}",
                    parse_mode="HTML"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
                update_support_ticket_status(
                    ticket_id, 
                    "replied", 
                    message.text,
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
                # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
                del admin_sessions[admin_id]
                
        except Exception as e:
            logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            del admin_sessions[admin_id]
            
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ handle_admin_reply: {e}")
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@router.message(Command("cancel"))
async def cancel_support(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    try:
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ cancel_support: {e}")

@router.message(Command("reply"))
async def admin_reply_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç: /reply <ticket_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>"""
    try:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        if not message.text or not message.text.startswith('/reply '):
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <ticket_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
            return
        
        try:
            ticket_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞")
            return
        
        reply_text = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket = get_support_ticket_by_id(ticket_id)
        if not ticket:
            await message.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile_by_id(ticket['user_id'])
        if not user_profile:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            if message.bot:
                await message.bot.send_message(
                    user_profile['tg_id'],  # tg_id
                    f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}</b>\n\n"
                    f"{html.escape(reply_text)}",
                    parse_mode="HTML"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
                update_support_ticket_status(
                    ticket_id, 
                    "replied", 
                    reply_text,
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                )
                
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
        except Exception as e:
            logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ admin_reply_command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")

@router.message(F.reply_to_message)
async def support_reply_in_group(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ reply –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        if not SUPPORT_CHAT_ID or message.chat.id != int(SUPPORT_CHAT_ID):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Ç–∏–∫–µ—Ç–æ–º
        if not message.reply_to_message or not message.reply_to_message.from_user or not message.reply_to_message.from_user.is_bot:
            return
        
        # –ò—â–µ–º ticket_id –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_text = message.reply_to_message.text or ""
        if "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É" not in reply_text:
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ticket_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏—â–µ–º #–Ω–æ–º–µ—Ä)
        import re
        match = re.search(r'#(\d+)', reply_text)
        if not match:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–∏–∫–µ—Ç–∞")
            return
        
        ticket_id = int(match.group(1))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket = get_support_ticket_by_id(ticket_id)
        if not ticket:
            await message.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile_by_id(ticket['user_id'])
        if not user_profile:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot and message.text:
                await message.bot.send_message(
                    user_profile['tg_id'],  # tg_id
                    f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}</b>\n\n"
                    f"{html.escape(message.text)}",
                    parse_mode="HTML"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
                update_support_ticket_status(
                    ticket_id, 
                    "replied", 
                    message.text,
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                )
                
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
        except Exception as e:
            logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ reply: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ –≤ support_reply_in_group: {e}")
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

@router.callback_query(F.data == "admin_support_tickets")
async def admin_support_tickets(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    tickets = get_all_support_tickets()
    if not tickets:
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer("–ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.", reply_markup=admin_support_tickets_kb([]))
        await callback.answer()
        return
    if callback.message and hasattr(callback.message, 'answer'):
        await callback.message.answer(
            "üéüÔ∏è <b>–í—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=admin_support_tickets_kb(tickets)
        )
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("admin_support_ticket_") and not c.data.startswith("admin_support_ticket_delete_"))
async def admin_support_ticket_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    if not callback.data:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    ticket_id = int(callback.data.replace("admin_support_ticket_", ""))
    ticket = get_support_ticket_by_id(ticket_id)
    if not ticket:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID
    user_profile = get_user_profile_by_id(ticket['user_id'])
    user_display = f"@{ticket['username']}" if ticket['username'] else ticket['full_name']
    user_tg_id = user_profile['tg_id'] if user_profile else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    text = (
        f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket['id']}</b>\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_display}\n"
        f"üÜî <b>Telegram ID:</b> <code>{user_tg_id}</code>\n"
        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {ticket['message']}\n"
        f"üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> {ticket['status']}\n"
    )
    if callback.message and hasattr(callback.message, 'answer'):
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=admin_support_ticket_actions_kb(ticket_id)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_support_ticket_delete_"))
async def admin_support_ticket_delete(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    if not callback.data:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    ticket_id = int(callback.data.replace("admin_support_ticket_delete_", ""))
    ticket = get_support_ticket_by_id(ticket_id)
    if not ticket:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    try:
        delete_support_ticket(ticket_id)
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}.")
    await callback.answer()

@router.callback_query(F.data == "admin_clear_all_tickets")
async def admin_clear_all_tickets(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if callback.message and hasattr(callback.message, 'answer'):
        await callback.message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=admin_clear_all_tickets_kb()
        )
    await callback.answer()

@router.callback_query(F.data == "admin_clear_all_tickets_confirm")
async def admin_clear_all_tickets_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        clear_all_support_tickets()
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer("‚úÖ –í—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"[SUPPORT] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.")
    await callback.answer()
