"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
"""
import asyncio
import datetime
import logging
import random
import aiosqlite 
from typing import Tuple, Optional

from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types.message import Message

from app.database.models import get_slot_configs
from app.config import ADMINS
from app.database.models import (
    get_user_slot_spins, get_slot_wins, get_slot_wins_async, update_slot_win_status,
    get_admin_setting, create_slot_win, create_order, update_balance,
    get_slot_configs, get_user_profile, should_reset_daily_attempts,
    use_slot_spin, reset_slot_spins, get_slot_win_by_id, add_stars_to_user, add_ton_to_user,
    get_user_roulette_attempts, use_roulette_attempt, reset_roulette_attempts, get_roulette_configs
)
from app.keyboards.main import slot_machine_kb, slot_win_admin_kb
from app.utils.slot_machine import (
    format_slot_result, generate_slot_result, check_win_combination,
    animate_slot_machine, process_slot_win, notify_admins_slot_win
)

router = Router()

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏)
SLOT_EMOJIS = ["üçí", "üçã", "üçä", "üçá", "‚≠êÔ∏è", "üíé", "üîî", "üí∞", "üé∞", "7Ô∏è‚É£"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_ID = -1002680464877
CHANNEL_USERNAME = "@legal_stars"
CHANNEL_LINK = "https://t.me/legal_stars"

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

async def check_subscription(user_id: int, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def show_subscription_message(call: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = (
        "üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üëá"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_callback = f"check_sub_{call.data}" if call.data != "main_menu" else "check_subscription"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=check_callback)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    except:
        await call.message.answer(text, parse_mode="HTML", reply_markup=markup)

async def get_user_attempts(user_id: int) -> Tuple[int, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)"""
    async with aiosqlite.connect('data/users.db') as db:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        cursor = await db.execute(
            "SELECT attempts_used FROM roulette_attempts WHERE user_id = ?",
            (user_id,)
        )
        attempts_used = (await cursor.fetchone() or [0])[0]
        
        # –ë–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        cursor = await db.execute(
            "SELECT attempts FROM bonus_attempts WHERE user_id = ?",
            (user_id,)
        )
        bonus_attempts = (await cursor.fetchone() or [0])[0]
        
    return attempts_used, bonus_attempts

async def use_slot_attempt(user_id: int) -> bool:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É (—Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å–Ω—ã–µ, –ø–æ—Ç–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)"""
    async with aiosqlite.connect('data/users.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        cursor = await db.execute(
            "SELECT attempts FROM bonus_attempts WHERE user_id = ?",
            (user_id,)
        )
        bonus = (await cursor.fetchone() or [0])[0]
        
        if bonus > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–Ω—É—Å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            await db.execute(
                "UPDATE bonus_attempts SET attempts = attempts - 1 WHERE user_id = ?",
                (user_id,)
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            await db.execute(
                "UPDATE roulette_attempts SET attempts_used = attempts_used + 1 WHERE user_id = ?",
                (user_id,)
            )
        
        await db.commit()
        return True

@router.callback_query(F.data == "slot_machine")
async def slot_machine_menu(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    try:
        user_id = callback.from_user.id

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        from app.handlers.user import check_blacklist_and_respond
        if await check_blacklist_and_respond(user_id, callback):
            return

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∫–∏)
        if not await check_subscription(user_id, callback.bot):
            await show_subscription_message(callback, callback.bot)
            return
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ø—ã—Ç–∫–∞—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
        today = datetime.date.today().isoformat()
        roulette_data = await get_user_roulette_attempts(user_id)
        attempts_used = roulette_data[0] if roulette_data else 0
        last_reset = roulette_data[1] if roulette_data else None
        
        # 3. –°–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
        if last_reset != today:
            await reset_roulette_attempts(user_id)
            attempts_used = 0
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –±–æ–Ω—É—Å–Ω—ã–µ)
        attempts_used, bonus_attempts = await get_user_attempts(user_id)

        # 5. –°–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        slot_data = get_user_slot_spins(user_id)
        last_reset = slot_data[1] if slot_data else None
        if should_reset_daily_attempts(last_reset):
            reset_slot_spins(user_id)
            attempts_used = 0
        
        # 5. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        daily_attempts_str = get_admin_setting('slot_daily_attempts', '5')
        daily_attempts = int(daily_attempts_str) if daily_attempts_str and daily_attempts_str.isdigit() else 5
        slot_description = get_admin_setting('slot_description', 'üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –æ—Ç Legal Stars.\n\nüéÅ–í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏, –∑–≤—ë–∑–¥—ã –∏ TON!')
        slot_photo = get_admin_setting('slot_photo', 'https://imgur.com/a/TkOPe7c.jpeg')

        # 7. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
        from app.database.models import get_user_profile, get_unclaimed_referrals_count
        user_profile = get_user_profile(user_id)
        unclaimed_referrals = 0
        if user_profile:
            try:
                unclaimed_referrals = await get_unclaimed_referrals_count(user_profile['id'])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")

        # 8. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        remaining_standard = max(0, daily_attempts - attempts_used)
        text = (
            f"{slot_description}\n\n"
            f"üîÑ –°–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ø–æ –ú–°–ö\n"
            f"üéØ –ü–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {remaining_standard}/{daily_attempts} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)\n"
            f"üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏: {bonus_attempts}\n"
            f"üë• –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {unclaimed_referrals}"
        )

        # 9. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        referral_button_text = f"üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å ({unclaimed_referrals})" if unclaimed_referrals > 0 else "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="spin_slot")],
            [InlineKeyboardButton(text=referral_button_text, callback_data="claim_referral_bonus")],
            [InlineKeyboardButton(text="üèÜ –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥", callback_data="slot_prizes")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="slot_stats")],
            [InlineKeyboardButton(text="üéÅ –ú–æ–∏ –ø—Ä–∏–∑—ã", callback_data="my_prizes")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        # 10. –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer_photo(
            photo=slot_photo,
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    
    except Exception as e:
        logging.error(f"Error in slot_machine_menu: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "my_prizes")
async def my_prizes_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –≤—ã–∏–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏)
        # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ –≥–¥–µ is_win=True, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        wins = await get_slot_wins_async(user_id=user_id)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä—ã—à–∏ (is_win=True –∏–ª–∏ 1)
        actual_wins = [win for win in wins if win[7] in (True, 1)]  # win[7] = is_win

        if not actual_wins:
            text = (
                "üéÅ <b>–í–∞—à–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.\n\n"
                "üé∞ –ö—Ä—É—Ç–∏—Ç–µ —Å–ª–æ—Ç—ã, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!"
            )
        else:
            text = "üéÅ <b>–í–∞—à–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã</b>\n\n"

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            slot_configs = get_slot_configs()

            for win in actual_wins[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–∏–∑–æ–≤
                combination = win[4]     # sm.combination
                reward_type = win[5]     # sm.reward_type
                reward_amount = win[6]   # sm.reward_amount
                created_at = win[8] if len(win) > 8 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # sm.created_at
                status = win[9] if len(win) > 9 else "pending"  # sm.status

                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î
                prize_name = combination
                for config in slot_configs:
                    if config[1] == combination:  # config[1] = combination
                        prize_name = config[6]  # config[6] = name
                        break

                if reward_type == "money":
                    reward_text = f"{int(reward_amount)}‚ÇΩ"
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ"  # –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                elif reward_type == "stars":
                    reward_text = f"{int(reward_amount)}‚≠êÔ∏è"
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ" if status == "completed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                elif reward_type == "ton":
                    reward_text = f"{reward_amount} TON"
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ" if status == "completed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                else:
                    reward_text = str(reward_amount)
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ" if status == "completed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    if isinstance(created_at, str) and len(created_at) >= 10:
                        date_part = created_at[:10]
                    else:
                        date_part = str(created_at)[:10] if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                except:
                    date_part = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                text += f"üèÜ {prize_name}\nüí∞ {reward_text}\nüìä {status_text}\nüìÖ {date_part}\n\n"

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="spin_slot")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="slot_machine")]
        ])
        
        try:
            await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_prizes_handler: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "spin_slot")
async def spin_slot_machine(callback: types.CallbackQuery):
    """–í—Ä–∞—â–µ–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    user_id = callback.from_user.id
    user = callback.from_user

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        from app.handlers.user import check_blacklist_and_respond
        if await check_blacklist_and_respond(user_id, callback):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∫–∏)
        if not await check_subscription(user_id, callback.bot):
            await show_subscription_message(callback, callback.bot)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        attempts_used, bonus_attempts = await get_user_attempts(user_id)
        daily_attempts = int(get_admin_setting('slot_daily_attempts', '5'))
        remaining_standard = max(0, daily_attempts - attempts_used)
        total_available = remaining_standard + bonus_attempts
        
        if total_available <= 0:
            text = (
                "üé∞ <b>–°–õ–û–¢-–ú–ê–®–ò–ù–ê</b> üé∞\n\n"
                "üî¥ <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏!</b>\n\n"
                f"üîÑ –ü–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏:\n"
                f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π\n"
                f"‚Ä¢ –ó–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥\n"
                f"‚Ä¢ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"
            )
            
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="slot_machine")],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="spin_slot")]
            ])
            
            try:
                await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
            except:
                await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—ã—Ç–∫—É (—Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å–Ω—ã–µ)
        await use_slot_attempt(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        anim_message = await callback.message.answer(
            "üé∞ <b>–°–õ–û–¢-–ú–ê–®–ò–ù–ê –ö–†–£–¢–ò–¢–°–Ø...</b> üé∞\n\n"
            "        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            "        ‚îÇ  üé∞  ‚îÇ  üé∞  ‚îÇ  üé∞  ‚îÇ\n"
            "        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            "üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Ä–∞—â–µ–Ω–∏—é..."
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ utils
        slot1, slot2, slot3 = await animate_slot_machine(anim_message, callback)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –ë–î
        win_config = await check_win_combination(slot1, slot2, slot3)

        if win_config:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ utils
            config_id, combination, reward_type, reward_amount, chance_percent, emoji, prize_name = win_config

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            reward_text, win_id = await process_slot_win(user_id, win_config)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            result_text = format_slot_result(
                slot1, slot2, slot3, True, reward_text, prize_name, reward_type
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è stars –∏ ton (–¥–µ–Ω—å–≥–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            if reward_type in ["stars", "ton"]:
                try:
                    await notify_admins_slot_win(user_id, combination, reward_type, reward_amount, callback.bot)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        else:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            combination = slot1 + slot2 + slot3
            create_slot_win(user_id, combination, "none", 0, False)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–∞
            result_text = format_slot_result(slot1, slot2, slot3, False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
        attempts_used, bonus_attempts = await get_user_attempts(user_id)
        remaining_standard = max(0, daily_attempts - attempts_used)
        total_remaining = remaining_standard + bonus_attempts
        
        result_text += (
            f"\n\nüéØ <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:</b>\n"
            f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: {remaining_standard}/{daily_attempts}\n"
            f"‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ: {bonus_attempts}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_remaining}"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="spin_slot")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="slot_machine")]
        ])
        
        try:
            await anim_message.edit_text(result_text, reply_markup=kb, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("slot_win_confirm_"))
async def slot_win_confirm_handler(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    import datetime
    import json

    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–∏–≥—Ä—ã—à–∞
        win_id = int(callback.data.replace("slot_win_confirm_", ""))

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∞ –∏–∑ –ë–î
        win_data_db = get_slot_win_by_id(win_id)
        if not win_data_db:
            await callback.answer("‚ùå –í—ã–∏–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∞ (—Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è extra_data)
        win_data = {
            'id': win_data_db[0],           # sm.id
            'user_id': win_data_db[1],      # sm.user_id
            'tg_id': win_data_db[2],        # u.tg_id
            'full_name': win_data_db[3],    # u.full_name
            'combination': win_data_db[4],  # sm.combination
            'reward_type': win_data_db[5],  # sm.reward_type
            'reward_amount': win_data_db[6], # sm.reward_amount
            'is_win': win_data_db[7],       # sm.is_win
            'created_at': win_data_db[8],   # sm.created_at
            'status': win_data_db[9],       # sm.status
            'extra_data': win_data_db[10] if len(win_data_db) > 10 else None  # sm.extra_data
        }

        confirm_time = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')
        admin_username = f"@{callback.from_user.username}" if callback.from_user.username else f"ID {callback.from_user.id}"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_id = win_data['user_id']
        combination = win_data['combination']
        reward_type = win_data['reward_type']
        reward_amount = win_data['reward_amount']
        created_at = win_data.get('created_at', datetime.datetime.now().strftime('%d.%m.%Y %H:%M'))

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user_profile = get_user_profile(user_id)
            if user_profile:
                username = user_profile.get('username', f"ID {user_id}")
            else:
                username = f"ID {user_id}"
        except Exception as e:
            logging.warning(f"[SLOT] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {user_id}: {e}")
            username = f"ID {user_id}"

        user_mention = f"@{username}" if username.startswith("@") else username

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤ –ë–î
        slot_configs = get_slot_configs()
        prize_info = None
        for config in slot_configs:
            if config[1] == combination:  # config[1] = combination
                prize_info = config
                break

        if not prize_info:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è")
            return

        prize_name = prize_info[6]  # config[6] = name

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É
        if reward_type == "money":
            reward_text = f"{reward_amount}‚ÇΩ"
        elif reward_type == "stars":
            reward_text = f"{reward_amount}‚≠êÔ∏è"
        elif reward_type == "ton":
            reward_text = f"{reward_amount} TON"
        else:
            reward_text = str(reward_amount)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–∏–≥—Ä—ã—à–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        from app.database.models import update_slot_win_status_with_extra, add_stars_to_user, add_ton_to_user
        extra_data = json.dumps({
            "confirmed_at": confirm_time,
            "confirmed_by": admin_username
        })
        update_slot_win_status_with_extra(win_id, "completed", extra_data)

        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_tg_id = win_data['tg_id']
        if reward_type == "stars":
            add_stars_to_user(user_tg_id, reward_amount)
        elif reward_type == "ton":
            add_ton_to_user(user_tg_id, reward_amount)
        # –î–µ–Ω—å–≥–∏ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–∏–≥—Ä—ã—à–∞
        try:
            message_text = f"‚úÖ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}"
            await callback.bot.send_message(user_tg_id, message_text)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            new_text = (
                f"\n\n‚úÖ –í–´–ò–ì–†–´–® #{win_id} –û–¢–ü–†–ê–í–õ–ï–ù\n"
                f"–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_username}"
            )

            if callback.message.text:
                await callback.message.edit_text(
                    text=callback.message.text + new_text,
                    reply_markup=None,  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer(new_text)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await callback.answer("‚úÖ –í—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logging.error(f"[SLOT] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {win_id}: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")

@router.callback_query(F.data.startswith("slot_win_reject_"))
async def slot_win_reject_handler(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    win_id = int(callback.data.replace("slot_win_reject_", ""))
    
    try:
        win_data = get_slot_win_by_id(win_id)
        if not win_data or len(win_data) < 7:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–∞")
            return
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        win_id = win_data[0]
        user_id = win_data[1]
        combination = win_data[2]
        reward_type = win_data[3]
        reward_amount = win_data[4]
        created_at = win_data[6] if len(win_data) > 6 else datetime.datetime.now().strftime('%d.%m.%Y %H:%M')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–∏–≥—Ä—ã—à–∞
        update_slot_win_status(win_id, "rejected", callback.message.message_id)

        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            await callback.bot.send_message(
                user_id,
                f"‚ùå <b>–í–∞—à –≤—ã–∏–≥—Ä—ã—à –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                f"üèÜ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {combination}\n"
                f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount} "
                f"{'‚≠êÔ∏è' if reward_type == 'stars' else 'TON' if reward_type == 'ton' else '‚ÇΩ'}\n\n"
                f"üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.warning(f"[SLOT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await callback.answer("‚ùå –í—ã–∏–≥—Ä—ã—à –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        text = (
            f"‚ùå –í–´–ò–ì–†–´–® –û–¢–ö–õ–û–ù–ï–ù\n\n"
            f"üîß ID: {win_id}\n"
            f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {combination}\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount} "
            f"{'‚≠êÔ∏è' if reward_type == 'stars' else 'TON' if reward_type == 'ton' else '‚ÇΩ'}\n"
            f"üïí –í—Ä–µ–º—è: {created_at}"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"[SLOT] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ {win_id}: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...")

@router.callback_query(F.data.startswith("slot_win_delete_"))
async def slot_win_delete_handler(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    win_id = int(callback.data.replace("slot_win_delete_", ""))
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        from app.database.models import delete_slot_win
        delete_slot_win(win_id)
        
        await callback.answer("üóëÔ∏è –í—ã–∏–≥—Ä—ã—à —É–¥–∞–ª–µ–Ω!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—ã–∏–≥—Ä—ã—à–µ–π
        await admin_slot_wins_handler(callback)
        
    except Exception as e:
        logging.error(f"[SLOT] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ {win_id}: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "claim_referral_bonus")
async def claim_referral_bonus_handler(callback: types.CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤"""
    await callback.answer()

    try:
        from app.database.models import get_unclaimed_referrals_count, claim_referral_bonus, get_user_profile

        user = get_user_profile(callback.from_user.id)
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_id = user['id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        unclaimed_count = await get_unclaimed_referrals_count(user_id)

        if unclaimed_count == 0:
            await callback.message.answer(
                "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã</b>\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"
                "üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, "
                "–∏ –ø–æ—Å–ª–µ –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏!",
                parse_mode="HTML"
            )
            return

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
        success, activated_count, total_attempts = await claim_referral_bonus(user_id)

        if success:
            await callback.message.answer(
                f"üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
                f"üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{activated_count}</b>\n"
                f"üé∞ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{total_attempts}</b>\n\n"
                f"–ü–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –≤–∞—à–µ–º—É —Å—á–µ—Ç—É –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ!",
                parse_mode="HTML"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            from app.utils.misc import notify_admins
            await notify_admins(
                callback.bot,
                f"üéÅ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or 'Unknown'} (ID: {callback.from_user.id})\n"
                f"üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {activated_count}\n"
                f"üé∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="HTML"
            )

    except Exception as e:
        logging.error(f"[REFERRAL] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–æ–≤: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
@router.callback_query(F.data == "admin_slot_wins")
async def admin_slot_wins_handler(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–∏–≥—Ä—ã—à–µ–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        wins = await get_slot_wins_async(status="pending")

        if not wins:
            text = "üìã –í–´–ò–ì–†–´–®–ò –°–õ–û–¢-–ú–ê–®–ò–ù–´\n\n–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π"
        else:
            text = "üìã –í–´–ò–ì–†–´–®–ò –°–õ–û–¢-–ú–ê–®–ò–ù–´\n\n"
            for win in wins[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã
                    if len(win) < 9:
                        logging.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∞: {win}")
                        continue

                    win_id = win[0] if len(win) > 0 else 0          # sm.id
                    user_id = win[1] if len(win) > 1 else 0         # sm.user_id
                    tg_id = win[2] if len(win) > 2 else 0           # u.tg_id
                    full_name = win[3] if len(win) > 3 else "Unknown"       # u.full_name
                    combination = win[4] if len(win) > 4 else "???"     # sm.combination
                    reward_type = win[5] if len(win) > 5 else "unknown"     # sm.reward_type
                    reward_amount = win[6] if len(win) > 6 else 0   # sm.reward_amount
                    created_at = win[8] if len(win) > 8 else "Unknown"      # sm.created_at

                    user_profile = get_user_profile(tg_id)
                    username = user_profile['username'] if user_profile and user_profile.get('username') else f"ID {tg_id}"

                    if reward_type == "money":
                        reward_text = f"{reward_amount}‚ÇΩ"
                    elif reward_type == "stars":
                        reward_text = f"{reward_amount}‚≠ê"
                    elif reward_type == "ton":
                        reward_text = f"{reward_amount} TON"
                    else:
                        reward_text = f"{reward_amount}"

                    text += f"üë§ {username}\n"
                    text += f"üé∞ {combination} ‚Üí {reward_text}\n"
                    text += f"üìÖ {created_at[:10] if isinstance(created_at, str) and len(created_at) >= 10 else str(created_at)}\n"
                    text += f"üîß ID: {win_id}\n\n"

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞ {win}: {e}")
                    continue

        await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        ))

    except Exception as e:
        logging.error(f"Error in admin_slot_wins_handler: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–∏–≥—Ä—ã—à–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ router

@router.callback_query(F.data == "slot_prizes")
async def slot_prizes_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    is_user_admin = is_admin(user_id)

    if is_user_admin:
        text = (
            "üèÜ <b>–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã (–ê–¥–º–∏–Ω)</b> üèÜ\n\n"
            "üé∞ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:\n\n"
        )
    else:
        text = (
            "üèÜ <b>–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b> üèÜ\n\n"
            "üé∞ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:\n\n"
        )

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    slot_configs = get_slot_configs()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ –ë–î
    for config in slot_configs:
        config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = config

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É
        if reward_type == "money":
            reward_text = f"{int(reward_amount)}‚ÇΩ"
        elif reward_type == "stars":
            reward_text = f"{int(reward_amount)}‚≠êÔ∏è"
        elif reward_type == "ton":
            reward_text = f"{reward_amount} TON"
        else:
            reward_text = str(reward_amount)

        # –í–ê–ñ–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¢–û–õ–¨–ö–û –∞–¥–º–∏–Ω–∞–º, –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Ö –Ω–µ –≤–∏–¥—è—Ç
        if is_user_admin:
            text += (
                f"{combination} - {name}\n"
                f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward_text}\n"
                f"üéØ –®–∞–Ω—Å: {chance_percent}%\n\n"
            )
        else:
            # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –≤–∏–¥—è—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è
            text += (
                f"{combination} - {name}\n"
                f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward_text}\n\n"
            )

    text += "üíé –ö—Ä—É—Ç–∏—Ç–µ —Å–ª–æ—Ç—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="spin_slot")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="slot_machine")]
    ])

    try:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except:
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

async def slot_machine_menu_no_delete(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)"""
    try:
        user_id = callback.from_user.id

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        from app.handlers.user import check_blacklist_and_respond
        if await check_blacklist_and_respond(user_id, callback):
            return

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∫–∏)
        if not await check_subscription(user_id, callback.bot):
            await show_subscription_message(callback, callback.bot)
            return

        # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile(user_id)
        if not user_profile:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏
        if should_reset_daily_attempts(user_id):
            reset_slot_spins(user_id)

        # 5. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        spins_used, last_reset = get_user_slot_spins(user_id)
        daily_attempts = int(get_admin_setting('slot_daily_attempts', '5'))

        # 6. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        from app.database.models import get_unclaimed_referrals_count
        try:
            unclaimed_referrals = await get_unclaimed_referrals_count(user_profile['id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
            unclaimed_referrals = 0

        # 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏
        from app.utils.slot_machine import format_attempts_text
        attempts_text = format_attempts_text(spins_used, daily_attempts)

        # 8. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        slot_description = get_admin_setting('slot_description',
            '–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –æ—Ç Legal Stars. üé∞üéÅ –í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏, –∑–≤—ë–∑–¥—ã –∏ TON!')

        text = (
            f"üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ Legal Stars</b> üé∞\n\n"
            f"{slot_description}\n\n"
            f"üîÑ <b>–ü–æ–ø—ã—Ç–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ú–°–ö</b>\n"
            f"{attempts_text}"
        )

        # 9. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        referral_button_text = f"üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å ({unclaimed_referrals})" if unclaimed_referrals > 0 else "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="spin_slot")],
            [InlineKeyboardButton(text=referral_button_text, callback_data="claim_referral_bonus")],
            [InlineKeyboardButton(text="üèÜ –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥", callback_data="slot_prizes")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="slot_stats")],
            [InlineKeyboardButton(text="üéÅ –ú–æ–∏ –ø—Ä–∏–∑—ã", callback_data="my_prizes")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        # 10. –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        slot_photo = get_admin_setting('slot_photo', 'https://imgur.com/a/TkOPe7c.jpeg')
        await callback.message.answer_photo(
            photo=slot_photo,
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ slot_machine_menu_no_delete: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "slot_stats")
async def slot_stats_handler(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_wins = await get_slot_wins_async(user_id=user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_spins = len(user_wins)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–∏–≥—Ä—ã—à–∏)
        winning_spins = len([win for win in user_wins if win[7] in (True, 1)])  # win[7] = is_win

        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
        biggest_win = 0
        biggest_win_type = ""
        for win in user_wins:
            if win[7] in (True, 1):  # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã—à (sm.is_win)
                reward_amount = win[6]  # sm.reward_amount
                reward_type = win[5]    # sm.reward_type

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if reward_type == "money":
                    value = reward_amount
                elif reward_type == "stars":
                    value = reward_amount * 2  # –£—Å–ª–æ–≤–Ω–æ –∑–≤–µ–∑–¥—ã –¥–æ—Ä–æ–∂–µ
                elif reward_type == "ton":
                    value = reward_amount * 1000  # TON —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π
                else:
                    value = 0

                if value > biggest_win:
                    biggest_win = value
                    if reward_type == "money":
                        biggest_win_type = f"{int(reward_amount)}‚ÇΩ"
                    elif reward_type == "stars":
                        biggest_win_type = f"{int(reward_amount)}‚≠êÔ∏è"
                    elif reward_type == "ton":
                        biggest_win_type = f"{reward_amount} TON"

        win_rate = (winning_spins / total_spins * 100) if total_spins > 0 else 0

        text = (
            "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å–ª–æ—Ç–∞—Ö</b>\n\n"
            f"üé∞ –í—Å–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏–π: {total_spins}\n"
            f"üèÜ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π: {winning_spins}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {win_rate:.1f}%\n"
            f"üí∞ –°–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {biggest_win_type if biggest_win_type else '–ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π'}\n\n"
            f"üçÄ –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–∞—Ö!"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="spin_slot")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="slot_machine")]
        ])

        try:
            await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ slot_stats_handler: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)