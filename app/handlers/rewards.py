import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.models import (
    get_engagement_achievements, get_user_achievements, get_user_engagement_stats,
    get_available_achievements, award_achievement, check_and_award_achievements,
    get_engagement_stats_summary, update_user_engagement_stats
)
from app.keyboards.rewards import (
    rewards_menu_kb, available_rewards_kb, my_achievements_kb,
    rewards_stats_kb, rewards_pagination_kb
)
from app.utils.misc import is_admin, notify_admins
from app.config import ADMINS

router = Router()
logger = logging.getLogger(__name__)

class RewardsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    waiting_for_claim_confirmation = State()

@router.callback_query(F.data == "rewards")
async def rewards_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    try:
        if not callback.message:
            return
        
        text = "üèÜ <b>–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥</b>\n\n"
        text += "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
        text += "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π\n"
        text += "‚Ä¢ –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫\n"
        text += "‚Ä¢ –ò–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        
        await callback.message.edit_text(
            text,
            reply_markup=rewards_menu_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rewards_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "available_rewards")
async def show_available_rewards(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        awarded = check_and_award_achievements(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        available = get_available_achievements(user_id)
        
        if not callback.message:
            return
        
        if not available:
            text = "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n"
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏!"
            
            if awarded:
                text += f"\n\nüéâ <b>–¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ:</b>\n"
                for achievement in awarded:
                    text += f"‚Ä¢ {achievement['name']} - {achievement['reward_amount']}‚ÇΩ\n"
        else:
            text = "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n"
            
            if awarded:
                text += "üéâ <b>–¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ:</b>\n"
                for achievement in awarded:
                    text += f"‚Ä¢ {achievement['name']} - {achievement['reward_amount']}‚ÇΩ\n"
                text += "\n"
            
            text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:\n"
            for i, achievement in enumerate(available[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                achievement_id, name, description, type_, requirement, reward_type, reward_amount, is_active = achievement
                text += f"{i}. <b>{name}</b>\n"
                text += f"   üìù {description}\n"
                text += f"   üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount}‚ÇΩ\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=available_rewards_kb(available),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥–∞—Ö
        if awarded:
            for achievement in awarded:
                await notify_admins(
                    callback.bot,
                    f"üèÜ <b>–ù–æ–≤—ã–π —Ç—Ä–æ—Ñ–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username or 'Unknown'} (ID: {user_id})</b>\n"
                    f"‚ûï –ü–æ–ª—É—á–µ–Ω–æ: {achievement['reward_amount']}‚ÇΩ –∑–∞ \"{achievement['description']}\"",
                    parse_mode="HTML"
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_available_rewards: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "my_achievements")
async def show_my_achievements(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        achievements = get_user_achievements(user_id)
        
        if not callback.message:
            return
        
        if not achievements:
            text = "üèÜ <b>–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!"
        else:
            text = "üèÜ <b>–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
            for achievement in achievements:
                achievement_id, user_id, achievement_id_db, achieved_at, reward_claimed, name, description, reward_type, reward_amount = achievement
                text += f"<b>{name}</b>\n"
                text += f"üìù {description}\n"
                text += f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount}‚ÇΩ\n"
                text += f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {achieved_at[:10]}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=my_achievements_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_my_achievements: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "rewards_stats")
async def show_rewards_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–≥—Ä–∞–¥"""
    try:
        user_id = callback.from_user.id
        stats = get_user_engagement_stats(user_id)
        
        if not callback.message:
            return
        
        text = "üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        text += f"üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> {stats[2]}\n"
        text += f"üõí <b>–ü–æ–∫—É–ø–æ–∫:</b> {stats[4]}\n"
        text += f"üé∞ <b>–ò–≥—Ä –≤ —Ä—É–ª–µ—Ç–∫—É:</b> {stats[5] if len(stats) > 5 else 0}\n"
        text += f"üí∞ <b>–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {stats[5]:.0f}‚ÇΩ\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        available = get_available_achievements(user_id)
        if available:
            text += "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
            for achievement in available[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                achievement_id, name, description, type_, requirement, reward_type, reward_amount, is_active = achievement
                current_value = 0
                if type_ == 'invites':
                    current_value = stats[2]
                elif type_ == 'purchases':
                    current_value = stats[4]
                elif type_ == 'roulette':
                    current_value = stats[5] if len(stats) > 5 else 0
                
                progress = min(100, (current_value / requirement) * 100)
                text += f"‚Ä¢ {name}: {current_value}/{requirement} ({progress:.0f}%)\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=rewards_stats_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_rewards_stats: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("claim_reward_"))
async def claim_reward(callback: CallbackQuery):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"""
    try:
        if not callback.data:
            return
        
        achievement_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        
        success, message = award_achievement(user_id, achievement_id)
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await notify_admins(
                callback.bot,
                f"üèÜ <b>–ù–æ–≤—ã–π —Ç—Ä–æ—Ñ–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username or 'Unknown'} (ID: {user_id})</b>\n"
                f"‚ûï –ü–æ–ª—É—á–µ–Ω–æ: {message}",
                parse_mode="HTML"
            )
            
            if callback.message:
                await callback.message.edit_text(
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n{message}\n\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥!",
                    reply_markup=rewards_menu_kb(),
                    parse_mode="HTML"
                )
        else:
            await callback.answer(message, show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ claim_reward: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("rewards_page_"))
async def rewards_pagination(callback: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–≥—Ä–∞–¥"""
    try:
        page = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        available = get_available_achievements(user_id)
        
        if not callback.message:
            return
        
        per_page = 5
        start_idx = page * per_page
        end_idx = start_idx + per_page
        page_achievements = available[start_idx:end_idx]
        
        if not page_achievements and page > 0:
            page = 0
            start_idx = 0
            end_idx = per_page
            page_achievements = available[start_idx:end_idx]
        
        text = "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n"
        
        if not page_achievements:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏!"
        else:
            for i, achievement in enumerate(page_achievements, start_idx + 1):
                achievement_id, name, description, type_, requirement, reward_type, reward_amount, is_active = achievement
                text += f"{i}. <b>{name}</b>\n"
                text += f"   üìù {description}\n"
                text += f"   üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount}‚ÇΩ\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=rewards_pagination_kb(available, page, per_page),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rewards_pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("rewards_admin"))
async def rewards_admin_menu(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        stats = get_engagement_stats_summary()
        
        text = "üéØ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥</b>\n\n"
        text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: {stats['total_awards']}\n"
        text += f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: {stats['total_bonuses']:.0f}‚ÇΩ\n\n"
        
        text += "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        text += "‚Ä¢ /rewards_stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        text += "‚Ä¢ /rewards_top - –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "‚Ä¢ /rewards_reset - –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rewards_admin_menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(Command("rewards_stats"))
async def admin_rewards_stats(message: Message):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        stats = get_engagement_stats_summary()
        
        text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥</b>\n\n"
        text += f"üéØ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: {stats['total_awards']}\n"
        text += f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: {stats['total_bonuses']:.0f}‚ÇΩ\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['total_bonuses'] / max(stats['total_awards'], 1):.0f}‚ÇΩ\n\n"
        
        text += "üèÜ <b>–¢–û–ü-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        for i, (user_id, count) in enumerate(stats['top_users'][:10], 1):
            text += f"{i}. ID {user_id}: {count} –Ω–∞–≥—Ä–∞–¥\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_rewards_stats: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(Command("rewards_reset"))
async def admin_rewards_reset(message: Message):
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await message.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_rewards_reset: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 