"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
import logging
import json
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.config import ADMINS
from app.database.models import (
    get_all_pending_withdrawals, get_withdrawal_by_id, update_withdrawal_status,
    get_all_orders, get_order_by_id, update_order_status, delete_order, clear_all_orders,
    get_all_reviews, update_review_status, delete_review, clear_all_reviews,
    get_user_profile_by_id, add_stars_to_user, add_ton_to_user, update_balance,
    add_referral_bonus_for_order_async, get_flag, get_all_users, get_review_by_id
)

router = Router()

class AdminStates(StatesGroup):
    waiting_for_value = State()
    waiting_for_user_id = State()
    waiting_for_amount = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

async def check_admin_access(handler, message_or_callback):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not hasattr(message_or_callback, 'from_user') or not hasattr(message_or_callback.from_user, 'id'):
            logging.error("Admin access check failed: invalid message/callback object")
            return False
            
        if not is_admin(message_or_callback.from_user.id):
            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            else:
                await message_or_callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return False
        return True
    except Exception as e:
        logging.error(f"Error in admin access check: {e}")
        return False

@router.message(Command("admin"))
async def admin_menu(message: types.Message):
    if not await check_admin_access(admin_menu, message):
        return
    
    text = "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")],
        [InlineKeyboardButton(text="üìã –ó–∞—è–≤–∫–∏", callback_data="admin_orders")],
        [InlineKeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã", callback_data="admin_reviews")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞", callback_data="admin_slot_settings")],
        [InlineKeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
    ])
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_users")
async def admin_users_menu(callback: types.CallbackQuery):
    if not await check_admin_access(admin_users_menu, callback):
        return
    
    text = "üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance")],
        [InlineKeyboardButton(text="‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_remove_balance")],
        [InlineKeyboardButton(text="‚≠ê –î–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="admin_add_stars")],
        [InlineKeyboardButton(text="üíé –î–æ–±–∞–≤–∏—Ç—å TON", callback_data="admin_add_ton")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_users_list")
async def admin_users_list(callback: types.CallbackQuery):
    if not await check_admin_access(admin_users_list, callback):
        return
    
    try:
        users = get_all_users()
        if not users:
            await callback.message.answer("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ")
            return
            
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        for user in users[:15]:
            text += (
                f"ID: {user[1]}\n"
                f"–ò–º—è: {user[2]}\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user[3] if user[3] else '–Ω–µ—Ç'}\n"
                f"–ë–∞–ª–∞–Ω—Å: {user[5]} RUB\n"
                f"–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {user[6]} RUB\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[4]}\n\n"
            )
            
        if len(users) > 15:
            text += f"\n...–∏ –µ—â–µ {len(users)-15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
        await callback.message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Error in admin_users_list: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.callback_query(F.data.startswith("admin_add_"))
async def admin_balance_action(callback: types.CallbackQuery, state: FSMContext):
    if not await check_admin_access(admin_balance_action, callback):
        return
    
    action = callback.data.split("_")[-1]
    await state.update_data(action=action)
    await state.set_state(AdminStates.waiting_for_user_id)
    
    action_text = {
        "balance": "–±–∞–ª–∞–Ω—Å",
        "stars": "–∑–≤—ë–∑–¥—ã",
        "ton": "TON"
    }.get(action, "–±–∞–ª–∞–Ω—Å")
    
    await callback.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è {action_text}:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]]
        )
    )

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    if not await check_admin_access(process_user_id, message):
        return
    
    try:
        user_id = int(message.text)
        user = get_user_profile_by_id(user_id)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        data = await state.get_data()
        action = data.get('action', 'balance')
        await state.update_data(user_id=user_id)
        await state.set_state(AdminStates.waiting_for_amount)
        
        currency = {
            'balance': 'RUB',
            'stars': '–∑–≤—ë–∑–¥',
            'ton': 'TON'
        }.get(action, 'RUB')
        
        await message.answer(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {currency} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]]
            )
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@router.message(AdminStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    if not await check_admin_access(process_amount, message):
        return
    
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return
            
        data = await state.get_data()
        user_id = data.get('user_id')
        action = data.get('action', 'balance')
        
        user = get_user_profile_by_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await state.clear()
            return
            
        if action == 'balance':
            update_balance(user['tg_id'], amount)
        elif action == 'stars':
            add_stars_to_user(user['tg_id'], amount)
        elif action == 'ton':
            add_ton_to_user(user['tg_id'], amount)
            
        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['full_name']} (ID: {user['tg_id']}) "
            f"–¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} {'RUB' if action == 'balance' else '–∑–≤—ë–∑–¥' if action == 'stars' else 'TON'}"
        )
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

@router.message(Command("orders"))
async def show_orders(message: types.Message):
    if not await check_admin_access(show_orders, message):
        return
    
    try:
        orders = get_all_orders()
        if not orders:
            await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return
            
        text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        for order in orders[:10]:
            order_id, user_id, order_type, amount, status, created_at, file_id, extra_data = order
            type_emoji = {
                "withdraw": "üí∞",
                "premium": "‚≠ê",
                "stars": "üåü",
                "crypto": "‚Çø",
                "activity_reward": "üéÅ",
                "slot_win": "üé∞"
            }.get(order_type, "üìã")
            
            type_label = {
                "activity_reward": "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "slot_win": "–†—É–ª–µ—Ç–∫–∞",
                "withdraw": "–í—ã–≤–æ–¥",
                "premium": "–ü—Ä–µ–º–∏—É–º",
                "stars": "–ó–≤—ë–∑–¥—ã",
                "crypto": "–ö—Ä–∏–ø—Ç–∞"
            }.get(order_type, order_type)
            
            text += (
                f"{type_emoji} <b>–ó–∞—è–≤–∫–∞ #{order_id}</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                f"üìä –¢–∏–ø: {type_label}\n"
                f"üí∞ –°—É–º–º–∞: <b>{amount}</b>\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {extra_data}\n\n"
            )
            
        if len(orders) > 10:
            text += f"... –∏ –µ—â–µ {len(orders) - 10} –∑–∞—è–≤–æ–∫"
            
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Error in show_orders: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")

@router.callback_query(F.data.startswith("order_approve_"))
async def order_approve(callback: types.CallbackQuery):
    if not await check_admin_access(order_approve, callback):
        return
    
    try:
        order_id = int(callback.data.split("_")[2])
        order = get_order_by_id(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        update_order_status(order_id, 'approved', callback.message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        from app.utils.misc import process_referral_bonus
        try:
            await process_referral_bonus(callback.bot, order['user_id'], order['amount'], order['order_type'], order_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile_by_id(order['user_id'])
        if user_profile:
            try:
                await callback.bot.send_message(
                    user_profile['tg_id'],
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                    f"–¢–∏–ø: {order['order_type']}\n"
                    f"–°—É–º–º–∞: {order['amount']}"
                )
            except Exception as e:
                logging.error(f"Error notifying user: {e}")
                
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    except Exception as e:
        logging.error(f"Error in order_approve: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

@router.callback_query(F.data.startswith("order_delete_"))
async def order_delete(callback: types.CallbackQuery):
    if not await check_admin_access(order_delete, callback):
        return
    
    try:
        order_id = int(callback.data.split("_")[2])
        delete_order(order_id)
        await callback.answer("üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        await callback.message.edit_text(f"üóë –ó–∞—è–≤–∫–∞ #{order_id} —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logging.error(f"Error in order_delete: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

@router.message(Command("clear_orders"))
async def clear_orders(message: types.Message):
    if not await check_admin_access(clear_orders, message):
        return
    
    try:
        clear_all_orders()
        await message.answer("üóë –í—Å–µ –∑–∞—è–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"Error in clear_orders: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞—è–≤–æ–∫")

@router.message(Command("reviews"))
async def show_reviews(message: types.Message):
    if not await check_admin_access(show_reviews, message):
        return
    
    try:
        reviews = get_all_reviews()
        if not reviews:
            await message.answer("üìù –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
            return
            
        text = "üìù <b>–û—Ç–∑—ã–≤—ã:</b>\n\n"
        for review in reviews[:10]:
            review_id, user_id, content, status, created_at, file_id, admin_msg_id, channel_msg_id = review
            text += (
                f"üí¨ <b>–û—Ç–∑—ã–≤ #{review_id}</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                f"üí≠ –¢–µ–∫—Å—Ç: {content[:100]}{'...' if len(content) > 100 else ''}\n\n"
            )
            
        if len(reviews) > 10:
            text += f"... –∏ –µ—â–µ {len(reviews) - 10} –æ—Ç–∑—ã–≤–æ–≤"
            
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Error in show_reviews: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤")

@router.callback_query(F.data.startswith("review_reject_"))
async def review_reject(callback: types.CallbackQuery):
    if not await check_admin_access(review_reject, callback):
        return
    
    try:
        review_id = int(callback.data.split("_")[2])
        update_review_status(review_id, 'rejected', callback.message.message_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        review = get_review_by_id(review_id)
        if review:
            try:
                await callback.bot.send_message(
                    review['user_id'],
                    "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            except Exception as e:
                logging.error(f"Error notifying user about rejected review: {e}")
                
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        await callback.message.edit_text(f"‚ùå –û—Ç–∑—ã–≤ #{review_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    except Exception as e:
        logging.error(f"Error in review_reject: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")

@router.callback_query(F.data == "admin_reviews")
async def admin_reviews_menu(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"""
    if not await check_admin_access(admin_reviews_menu, callback):
        return

    try:
        reviews = get_all_reviews()

        text = "üìù <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê–ú–ò</b>\n\n"

        if not reviews:
            text += "üìù –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
        else:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            pending_count = len([r for r in reviews if r[3] == 'pending'])
            published_count = len([r for r in reviews if r[3] == 'published'])
            rejected_count = len([r for r in reviews if r[3] == 'rejected'])

            text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}\n"
            text += f"‚Ä¢ ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_count}\n"
            text += f"‚Ä¢ ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã: {published_count}\n"
            text += f"‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {rejected_count}\n\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤
            text += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n"
            for review in reviews[:5]:
                review_id, user_id, content, status, created_at, file_id, admin_msg_id, channel_msg_id = review
                status_emoji = {"pending": "‚è≥", "published": "‚úÖ", "rejected": "‚ùå"}
                status_icon = status_emoji.get(status, "‚ùî")

                text += f"#{review_id} {status_icon} | ID:{user_id} | {content[:30]}...\n"

            if len(reviews) > 5:
                text += f"... –∏ –µ—â–µ {len(reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data="admin_all_reviews"),
                InlineKeyboardButton(text="‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="admin_pending_reviews")
            ],
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="add_review"),
                InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="admin_clear_reviews")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in admin_reviews_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

@router.callback_query(F.data == "admin_all_reviews")
async def admin_all_reviews(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã"""
    if not await check_admin_access(admin_all_reviews, callback):
        return

    try:
        reviews = get_all_reviews()
        if not reviews:
            await callback.answer("üìù –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)
            return

        text = "üìù <b>–í–°–ï –û–¢–ó–´–í–´:</b>\n\n"
        for review in reviews[:10]:
            review_id, user_id, content, status, created_at, file_id, admin_msg_id, channel_msg_id = review
            status_emoji = {"pending": "‚è≥", "published": "‚úÖ", "rejected": "‚ùå"}
            status_icon = status_emoji.get(status, "‚ùî")

            text += (
                f"üí¨ <b>–û—Ç–∑—ã–≤ #{review_id}</b> {status_icon}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                f"üí≠ –¢–µ–∫—Å—Ç: {content[:100]}{'...' if len(content) > 100 else ''}\n\n"
            )

        if len(reviews) > 10:
            text += f"... –∏ –µ—â–µ {len(reviews) - 10} –æ—Ç–∑—ã–≤–æ–≤"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_reviews")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in admin_all_reviews: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

@router.callback_query(F.data == "admin_pending_reviews")
async def admin_pending_reviews(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if not await check_admin_access(admin_pending_reviews, callback):
        return

    try:
        all_reviews = get_all_reviews()
        pending_reviews = [r for r in all_reviews if r[3] == 'pending']

        if not pending_reviews:
            await callback.answer("‚è≥ –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            return

        text = "‚è≥ <b>–û–¢–ó–´–í–´ –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò:</b>\n\n"
        for review in pending_reviews[:10]:
            review_id, user_id, content, status, created_at, file_id, admin_msg_id, channel_msg_id = review

            text += (
                f"üí¨ <b>–û—Ç–∑—ã–≤ #{review_id}</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                f"üí≠ –¢–µ–∫—Å—Ç: {content[:150]}{'...' if len(content) > 150 else ''}\n\n"
            )

        if len(pending_reviews) > 10:
            text += f"... –∏ –µ—â–µ {len(pending_reviews) - 10} –æ—Ç–∑—ã–≤–æ–≤"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_reviews")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in admin_pending_reviews: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

@router.callback_query(F.data == "admin_clear_reviews")
async def admin_clear_reviews_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    if not await check_admin_access(admin_clear_reviews_confirm, callback):
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_clear_reviews_confirmed"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_reviews")
        ]
    ])

    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç–∑—ã–≤—ã?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_clear_reviews_confirmed")
async def admin_clear_reviews_execute(callback: types.CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    if not await check_admin_access(admin_clear_reviews_execute, callback):
        return

    try:
        clear_all_reviews()
        await callback.message.edit_text(
            "üóë <b>–í—Å–µ –æ—Ç–∑—ã–≤—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_reviews")]
            ]),
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –û—Ç–∑—ã–≤—ã –æ—á–∏—â–µ–Ω—ã")

    except Exception as e:
        logging.error(f"Error in admin_clear_reviews_execute: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

@router.message(Command("clear_reviews"))
async def clear_reviews(message: types.Message):
    if not await check_admin_access(clear_reviews, message):
        return

    try:
        clear_all_reviews()
        await message.answer("üóë –í—Å–µ –æ—Ç–∑—ã–≤—ã –æ—á–∏—â–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"Error in clear_reviews: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Ç–∑—ã–≤–æ–≤")

@router.callback_query(F.data == "admin_orders_page:0")
async def admin_orders_first_page(callback: types.CallbackQuery):
    await admin_orders_page_callback(callback)

@router.callback_query(F.data.startswith("admin_orders_page:"))
async def admin_orders_page_callback(callback: types.CallbackQuery):
    if not await check_admin_access(admin_orders_page_callback, callback):
        return
    
    try:
        page = int(callback.data.split(":")[1])
        orders = get_all_orders()
        per_page = 5
        total_pages = (len(orders) + per_page - 1) // per_page
        start = page * per_page
        end = start + per_page
        orders_page = orders[start:end]
        
        if not orders_page:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
            ])
            await callback.message.answer("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=kb)
            return
            
        text = f"<b>–ó–ê–Ø–í–ö–ò (—Å—Ç—Ä. {page+1} –∏–∑ {total_pages}):</b>\n\n"
        status_emoji = {"pending": "‚è≥", "completed": "‚úÖ", "rejected": "‚ùå"}
        type_icons = {
            "premium": "‚≠êÔ∏è", "stars": "üåü", "crypto": "ü™ô", 
            "withdraw": "üí∏", "slot_win": "üé∞", "activity_reward": "üéÅ"
        }
        
        for order in orders_page:
            order_id, user_id, order_type, amount, status, created_at, file_id, extra_data, admin_msg_id = order
            icon = type_icons.get(order_type, "‚ùî")
            stat = status_emoji.get(status, "‚ùî")
            text += f"{icon} –ó–ê–ö–ê–ó #{order_id} {stat}\nID: {user_id}\n"
            
            try:
                amount_f = float(amount)
                text += f"üí∞ –°—É–º–º–∞: {amount_f:.2f}‚ÇΩ\n"
            except Exception:
                text += f"üí∞ –°—É–º–º–∞: {amount}\n"
                
            text += f"üìä –¢–∏–ø: {order_type}\n"
            
            try:
                extra = json.loads(extra_data) if extra_data else {}
                if order_type == 'premium':
                    text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {extra.get('period','-')}\n"
                    text += f"üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {extra.get('recipient','-')}\n"
                elif order_type == 'stars':
                    text += f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {extra.get('amount','-')}\n"
                    text += f"üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {extra.get('recipient','-')}\n"
                elif order_type == 'crypto':
                    text += f"ü™ô –ú–æ–Ω–µ—Ç–∞: {extra.get('coin','-')}\n"
                    text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {extra.get('amount','-')}\n"
                    text += f"üè¶ –ö–æ—à–µ–ª—ë–∫: {extra.get('wallet','-')}\n"
                elif order_type == 'withdraw':
                    text += f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {extra.get('requisites','-')}\n"
            except Exception:
                pass
                
            text += f"‚è∞ –í—Ä–µ–º—è: {created_at}\n\n"
            
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_orders_page:{page-1}"))
        if (page + 1) < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_orders_page:{page+1}"))
            
        nav_buttons.append(InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="admin_panel"))
        
        kb = InlineKeyboardMarkup(inline_keyboard=[nav_buttons])
        await callback.message.delete()
        await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    except Exception as e:
        logging.error(f"Error in admin_orders_page_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—è–≤–æ–∫")