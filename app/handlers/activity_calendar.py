"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import datetime
from typing import Optional
import logging

from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from app.config import ADMINS
from app.database.models import (
    get_activity_rewards, claim_activity_reward, get_admin_setting, 
    mark_activity, get_user_activity_streak, update_balance, 
    add_stars_to_user, add_ton_to_user, init_activity_rewards_custom, 
    get_or_create_user, get_all_orders, get_user_profile
)
from app.keyboards.main import activity_calendar_kb
from app.utils.activity_calendar import (
    format_activity_calendar, format_rewards_list, format_activity_stats,
    mark_today_activity, get_available_rewards, render_best_calendar_format, 
    get_current_date
)
from app.utils.misc import notify_admins

router = Router()

REWARDS_PER_PAGE = 5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_ID = -1002680464877
CHANNEL_USERNAME = "@legal_stars"
CHANNEL_LINK = "https://t.me/legal_stars"

async def check_subscription(user_id: int, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def show_subscription_message(call: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = (
        "üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üëá"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_callback = f"check_sub_{call.data}" if call.data != "main_menu" else "check_subscription"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=check_callback)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    except:
        await call.message.answer(text, parse_mode="HTML", reply_markup=markup)

class ActivityStates(StatesGroup):
    waiting_for_claim_confirmation = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMINS

# –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def init_activity_rewards_custom():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–±—Ä–æ—Å –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π)
    """
    from app.database.models import get_db_connection
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM activity_rewards')
    rewards = [
        (3, 'balance', 15, '3 –¥–Ω—è ‚Äî 15‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å'),
        (7, 'balance', 50, '7 –¥–Ω–µ–π ‚Äî 50‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å'),
        (15, 'stars', 13, '15 –¥–Ω–µ–π ‚Äî 13 –∑–≤—ë–∑–¥'),
        (21, 'stars', 21, '21 –¥–µ–Ω—å ‚Äî 21 –∑–≤–µ–∑–¥–∞'),
        (28, 'ton', 0.1, '28 –¥–Ω–µ–π ‚Äî 0.1 TON'),
        (30, 'ton', 0.5, '30 –¥–Ω–µ–π ‚Äî 0.5 TON'),
    ]
    for days, rtype, amount, desc in rewards:
        cursor.execute('INSERT INTO activity_rewards (days_required, reward_type, reward_amount, description) VALUES (?, ?, ?, ?)', (days, rtype, amount, desc))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "activity" —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ user.py
# –í user.py —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏

@router.callback_query(F.data == "activity_calendar")
async def show_activity_calendar(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    from app.handlers.user import check_blacklist_and_respond
    if await check_blacklist_and_respond(callback.from_user.id, callback):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    if not await check_subscription(callback.from_user.id, callback.bot):
        await show_subscription_message(callback, callback.bot)
        return

    user_id = callback.from_user.id
    from app.database.models import get_user_profile, get_admin_setting
    profile = get_user_profile(user_id)
    if not profile:
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        get_or_create_user(user_id, callback.from_user.full_name, callback.from_user.username, datetime.datetime.now().strftime("%Y-%m-%d"))

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    calendar_description = get_admin_setting('calendar_description', 'üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n–û—Ç–º–µ—á–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ!')
    calendar_photo = get_admin_setting('calendar_photo', 'https://imgur.com/a/TkOPe7c.jpeg')

    now = datetime.datetime.now()
    year = now.year
    month = now.month
    from app.utils.activity_calendar import render_best_calendar_format
    calendar_text = render_best_calendar_format(user_id, year, month)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    full_text = f"{calendar_description}\n\n{calendar_text}"

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="activity")]]
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer_photo(
        photo=calendar_photo,
        caption=full_text,
        reply_markup=kb,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "activity_rewards")
async def show_activity_rewards(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    if not await check_subscription(callback.from_user.id, callback.bot):
        await show_subscription_message(callback, callback.bot)
        return

    user_id = callback.from_user.id
    streak = get_user_activity_streak(user_id)
    rewards = get_activity_rewards()
    from app.database.models import get_user_activity
    text = "üèÜ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n\n"
    text += f"üî• –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n\n"
    text += "üéÅ <b>–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b>\n"
    text += f"‚ñ∏ {'‚úÖ' if streak >= 3 else '‚óªÔ∏è'} 3 –¥–µ–Ω—å: ü™ô 15‚ÇΩ\n"
    text += f"‚ñ∏ {'‚úÖ' if streak >= 7 else '‚óªÔ∏è'} 7 –¥–µ–Ω—å: üí∞ 50‚ÇΩ\n"
    text += f"‚ñ∏ {'‚úÖ' if streak >= 15 else '‚óªÔ∏è'} 15 –¥–µ–Ω—å: ‚≠ê 13 –∑–≤—ë–∑–¥\n"
    text += f"‚ñ∏ {'‚úÖ' if streak >= 21 else '‚óªÔ∏è'} 21 –¥–µ–Ω—å: ‚ú® 21 –∑–≤–µ–∑–¥–∞\n"
    text += f"‚ñ∏ {'‚úÖ' if streak >= 28 else '‚óªÔ∏è'} 28 –¥–µ–Ω—å: üíé 0.1 TON\n"
    text += f"‚ñ∏ {'‚úÖ' if streak >= 30 else '‚óªÔ∏è'} 30 –¥–µ–Ω—å: üî• 0.5 TON\n\n"
    keyboard = []
    for reward in rewards:
        reward_id = reward[0]
        days_required = reward[1]
        reward_type = reward[2]
        reward_amount = reward[3]
        description = reward[4]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω–∞ –ª–∏ –Ω–∞–≥—Ä–∞–¥–∞
        user_acts = get_user_activity(user_id)
        already_claimed = any(
            act[3] == 'reward' and act[4] == reward_type and act[5] == reward_amount for act in user_acts
        )
        if reward_type == "balance":
            reward_text = f"{reward_amount}‚ÇΩ"
        elif reward_type == "stars":
            reward_text = f"{reward_amount}‚≠ê"
        elif reward_type == "ton":
            reward_text = f"{reward_amount} TON"
        else:
            reward_text = f"{reward_amount} {reward_type}"
        if already_claimed:
            status = "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ"
        elif streak >= days_required:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
        else:
            days_left = days_required - streak
            status = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
        text += f"‚Ä¢ <b>{days_required} –¥–Ω–µ–π</b>: {reward_text}\n  {description}\n  {status}\n\n"
        # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if streak >= days_required and not already_claimed:
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"üéÅ –ü–æ–ª—É—á–∏—Ç—å {reward_text}",
                    callback_data=f"claim_reward_{reward_id}"
                )
            ])
    keyboard.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="activity")])
    try:
        if callback.message and hasattr(callback.message, 'text') and getattr(callback.message, 'text', None):
            await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard))
        else:
            if callback.message and hasattr(callback.message, 'delete'):
                await callback.message.delete()
            if callback.message and hasattr(callback.message, 'answer'):
                await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard))
    except Exception:
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard))

@router.callback_query(F.data.startswith("claim_reward_"))
async def claim_activity_reward_handler(callback: types.CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞)"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    if not await check_subscription(callback.from_user.id, callback.bot):
        await show_subscription_message(callback, callback.bot)
        return

    user_id = callback.from_user.id
    reward_id = int(callback.data.replace("claim_reward_", ""))
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –Ω–∞–≥—Ä–∞–¥—É
        rewards = get_activity_rewards()
        reward = None
        for r in rewards:
            if r[0] == reward_id:
                reward = r
                break
        if not reward:
            await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        days_required = reward[1]
        reward_type = reward[2]
        reward_amount = reward[3]
        description = reward[4]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        streak = get_user_activity_streak(user_id)
        if streak < days_required:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: {days_required}, —É –≤–∞—Å: {streak}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = get_user_profile(user_id)
        if not profile:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        db_user_id = profile[0]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if reward_type == "balance":
            # –î–µ–Ω—å–≥–∏ - –Ω–∞—á–∏—Å–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
            update_balance(user_id, reward_amount)
            reward_text = f"{reward_amount}‚ÇΩ"
            success_message = f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ {reward_text} –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"
            
        elif reward_type == "stars":
            # –ó–≤—ë–∑–¥—ã - —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            create_order(db_user_id, "activity_stars", reward_amount, "pending", extra_data=f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {reward_amount} –∑–≤–µ–∑–¥")
            reward_text = f"{reward_amount}‚≠ê"
            success_message = f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {reward_text} —Å–æ–∑–¥–∞–Ω–∞! –ê–¥–º–∏–Ω—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            
        elif reward_type == "ton":
            # TON - —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            create_order(db_user_id, "activity_ton", reward_amount, "pending", extra_data=f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {reward_amount} TON")
            reward_text = f"{reward_amount} TON"
            success_message = f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {reward_text} —Å–æ–∑–¥–∞–Ω–∞! –ê–¥–º–∏–Ω—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            
        else:
            # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –Ω–∞–≥—Ä–∞–¥
            reward_text = f"{reward_amount} {reward_type}"
            success_message = f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ {reward_text} –≤—ã–¥–∞–Ω–∞!"
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—É—é
        claim_activity_reward(user_id, reward_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer(success_message, show_alert=True)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –∑–≤—ë–∑–¥—ã –∏ TON
        if reward_type in ["stars", "ton"]:
            try:
                await notify_admins(
                    callback.bot,
                    f"üéÅ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                    f"üÜî ID: {user_id}\n"
                    f"üèÜ –ù–∞–≥—Ä–∞–¥–∞: {reward_text}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üî• –°–µ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {streak} –¥–Ω–µ–π"
                )
            except Exception as e:
                logging.error(f"[ACTIVITY] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
        await show_activity_rewards(callback)
        
    except Exception as e:
        logging.error(f"[ACTIVITY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ mark_activity —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ user.py —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –Ω–∞–≥—Ä–∞–¥

@router.callback_query(F.data == "activity_stats")
async def activity_stats_handler(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    if not await check_subscription(callback.from_user.id, callback.bot):
        await show_subscription_message(callback, callback.bot)
        return

    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    streak = get_user_activity_streak(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    today = datetime.datetime.now()
    activities_count = 0
    for i in range(30):
        date = today - datetime.timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        activity = get_user_activity(user_id, date_str)
        if activity:
            activities_count += 1
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
    text += f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n"
    text += f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 30 –¥–Ω–µ–π: {activities_count}/30 –¥–Ω–µ–π\n"
    text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(activities_count/30)*100:.1f}%\n\n"
    if activities_count >= 25:
        text += "üèÜ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n"
    elif activities_count >= 15:
        text += "üëç –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ!\n"
    else:
        text += "üí™ –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏!\n"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="activity")]]
    )
    try:
        if callback.message and hasattr(callback.message, 'text') and getattr(callback.message, 'text', None):
            await callback.message.edit_text(text, reply_markup=kb)
        else:
            if callback.message and hasattr(callback.message, 'delete'):
                await callback.message.delete()
            if callback.message and hasattr(callback.message, 'answer'):
                await callback.message.answer(text, reply_markup=kb)
    except Exception:
        if callback.message and hasattr(callback.message, 'answer'):
            await callback.message.answer(text, reply_markup=kb)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "admin_activity_stats")
async def admin_activity_stats_handler(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    from app.database.models import get_all_users
    
    users = get_all_users()
    total_users = len(users)
    active_users = 0
    total_streaks = 0
    
    for user in users:
        user_id = user[1]  # tg_id
        streak = get_user_activity_streak(user_id)
        if streak > 0:
            active_users += 1
            total_streaks += streak
    
    avg_streak = total_streaks / active_users if active_users > 0 else 0
    
    text = "üìä <b>–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
    text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_users/total_users)*100:.1f}%\n"
    text += f"üìä –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä–∏—è: {avg_streak:.1f} –¥–Ω–µ–π\n\n"
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user_streaks = []
    for user in users:
        user_id = user[1]
        streak = get_user_activity_streak(user_id)
        if streak > 0:
            user_streaks.append((user[2], streak))  # full_name, streak
    
    user_streaks.sort(key=lambda x: x[1], reverse=True)
    
    if user_streaks:
        text += "üèÜ <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        for i, (name, streak) in enumerate(user_streaks[:10], 1):
            text += f"{i}. {name}: {streak} –¥–Ω–µ–π\n"
    
    await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    ))

@router.callback_query(F.data == "admin_activity_users")
async def admin_activity_users_handler(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    from app.database.models import get_all_users
    
    users = get_all_users()
    
    text = "üë• <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    for user in users[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = user[1]  # tg_id
        full_name = user[2]
        username = user[3]
        
        streak = get_user_activity_streak(user_id)
        
        user_info = f"@{username}" if username else f"ID {user_id}"
        
        if streak > 0:
            text += f"üî• {full_name} ({user_info}): {streak} –¥–Ω–µ–π\n"
        else:
            text += f"‚ùå {full_name} ({user_info}): –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
    
    if len(users) > 20:
        text += f"\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    ))

# –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ —Ü–µ–ø–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (streak) –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–Ω—è
from app.database.models import get_user_activity
import datetime

def check_and_reset_streak_on_skip(tg_id):
    today = datetime.datetime.now().date()
    streak = 0
    for i in range(1, 31):
        check_date = today - datetime.timedelta(days=i)
        acts = get_user_activity(tg_id, check_date.strftime("%Y-%m-%d"))
        if acts:
            streak += 1
        else:
            break
    # –ï—Å–ª–∏ –≤—á–µ—Ä–∞ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—é —Ü–µ–ø–æ—á–∫—É
    yesterday = today - datetime.timedelta(days=1)
    if not get_user_activity(tg_id, yesterday.strftime("%Y-%m-%d")):
        return True
    return False 