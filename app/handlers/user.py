"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from app.database.models import get_user_last_activity_date,reset_user_activity
from aiogram.filters import Command, CommandStart
from aiogram.filters.command import CommandObject
from aiogram.filters.state import StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Dispatcher, types
from app.configprem import PREMIUM_PRICES
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Bot
from app.database import models
import asyncio
import datetime
import json
import logging
import re
import traceback
from typing import Optional

import aiohttp
import aiosqlite
import sqlite3
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.config import ADMINS
from app.constants import CHANNEL_ID, CHANNEL_USERNAME, CHANNEL_LINK, REVIEWS_CHANNEL, REVIEW_CHANNEL_ID, PREMIUM_FIXED_PRICES, STARS_PRICES, CRYPTO_PRICES
from app.utils.misc import is_admin
from app.config_flags import ref_active, proverka
from app.database.models import (
    get_or_create_user, get_user_profile, get_referrals_count, get_all_users,
    update_balance, freeze_balance, unfreeze_balance, create_withdrawal,
    get_all_pending_withdrawals, get_withdrawal_by_id, update_withdrawal_status,
    confirm_withdrawal, get_withdrawals, get_user_profile_by_id,
    create_order, get_order_by_id, get_all_orders, update_order_status, delete_order, clear_all_orders,
    create_review, get_review_by_id, get_all_reviews, update_review_status, delete_review, clear_all_reviews,
    get_admin_setting, update_admin_setting, get_all_admin_settings,
    get_slot_configs, add_slot_config, delete_slot_config,
    get_user_slot_spins, use_slot_spin, reset_slot_spins, create_slot_win,
    get_slot_wins, update_slot_win_status, get_slot_win_by_id, delete_slot_win,
    get_activity_rewards, add_activity_reward, delete_activity_reward,
    get_user_activity, mark_activity, get_user_activity_streak, claim_activity_reward,
    get_user_referral_percent, update_user_referral_percent,
    calculate_withdrawal_commission, calculate_stars_price, get_daily_attempts_reset_time,
    should_reset_daily_attempts, get_user_share_story_status, use_share_story, reset_share_story,
    add_ton_slot_win, reset_user_activity, check_and_reset_activity_streak,
    clear_all_calendar_data, clear_all_activity_prizes, clear_all_slot_data, clear_all_slot_prizes,
    reset_all_prizes, delete_user_everywhere_full,
    add_referral_bonus_for_order_async, get_flag
)
from app.keyboards.main import (
    main_menu_inline_kb, stars_menu_inline_kb, crypto_menu_inline_kb, 
    reviews_menu_inline_kb, withdraw_confirm_kb, withdraw_requisites_kb, 
    admin_withdrawal_kb, back_to_profile_kb, admin_panel_kb,
    premium_menu_inline_kb, about_menu_inline_kb, activity_calendar_kb
)
from app.utils.activity_calendar import mark_today_activity, get_current_date
from app.utils.misc import notify_admins, process_referral_bonus
from app.handlers.admin import router as admin_router

router = Router()

class PremiumStates(StatesGroup):
    waiting_receipt_pdf = State()
    waiting_recipient = State()
    waiting_review = State()
    waiting_custom_stars = State()

class StarsStates(StatesGroup):
    waiting_receipt_pdf = State()
    waiting_recipient = State()
    waiting_review = State()

class CryptoStates(StatesGroup):
    waiting_ton = State()
    waiting_not = State()
    waiting_dogs = State()

class CryptoPayStates(StatesGroup):
    waiting_receipt_pdf = State()
    waiting_wallet = State()
    waiting_review = State()

class WithdrawStates(StatesGroup):
    waiting_amount = State()
    confirm = State()
    waiting_requisites = State()
    waiting_method = State()

class Form(StatesGroup):
    waiting_for_message_text = State()
    waiting_for_button_text = State()
    waiting_for_button_url = State()
    waiting_for_button2_text = State()
    waiting_for_button2_url = State()   
    photo_id = State()

class DBFSM(StatesGroup):
    waiting_for_page_number = State()

class AdminDBFSM(StatesGroup):
    waiting_for_page_number = State()

class AdminDB(StatesGroup):
    waiting_for_search_query = State()

class BlacklistFSM(StatesGroup):
    waiting_for_user_to_add = State()
    waiting_for_reason = State()
    waiting_for_user_to_remove = State()

class AdminFSM(StatesGroup):
    waiting_for_user_to_delete = State()

class AddReviewFSM(StatesGroup):
    waiting_for_author = State()
    waiting_for_content = State()

class AddBalanceFSM(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()

class RemoveBalanceFSM(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()
    confirm = State()

storage = MemoryStorage()




DEFAULT_MAIN_DESCRIPTION = (
    "–£ –Ω–∞—Å –º–æ–∂–Ω–æ –ª–µ–≥–∞–ª—å–Ω–æ –∫—É–ø–∏—Ç—å –∏ –ø–æ–¥–∞—Ä–∏—Ç—å:\n"
    "‚Ä¢ <b>–∑–≤—ë–∑–¥—ã Telegram</b> üéÅ\n"
    "‚Ä¢ <b>–ø–æ–¥–ø–∏—Å–∫—É Telegram Premium</b> üöÄ\n"
    "‚Ä¢ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É TON, NOT –∏ –¥—Ä—É–≥–∏–µ</b> üí∞\n"
    "‚Ä¢ <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∫—É</b> –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑—ã\n"
    "‚Ä¢ <b>–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b> –¥–ª—è –Ω–∞–≥—Ä–∞–¥\n\n"
    "<em>–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ ‚Äî –¥–µ–ª–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –ª–µ–≥–∫–æ –∏ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é!</em> üòä"
)



async def delete_previous_message(call: types.CallbackQuery):
    try:
        if call.message:
            await call.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª

async def check_subscription(user_id: int, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ CHANNEL_ID (–Ω–∞–¥–µ–∂–Ω–µ–µ)
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if member.status not in ['left', 'kicked']:
                return True
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ ID: {e}")

        # –ï—Å–ª–∏ –ø–æ ID –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ USERNAME
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
            return member.status not in ['left', 'kicked']
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            return False
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_subscription: {e}")
        return False

async def show_subscription_message(call: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = (
        "üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
        "üì¢ <b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?</b>\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üëá"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_callback = f"check_sub_{call.data}" if call.data != "main_menu" else "check_subscription"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=check_callback)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    except:
        await call.message.answer(text, parse_mode="HTML", reply_markup=markup)
        
async def add_slot_attempts(user_id: int, additional_attempts: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    async with aiosqlite.connect('data/users.db') as db:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        await db.execute(
            """CREATE TABLE IF NOT EXISTS bonus_attempts (
                user_id INTEGER PRIMARY KEY,
                attempts INTEGER DEFAULT 0
            )"""
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        await db.execute(
            """INSERT INTO bonus_attempts (user_id, attempts)
               VALUES (?, ?)
               ON CONFLICT(user_id) DO UPDATE SET attempts = attempts + ?""",
            (user_id, additional_attempts, additional_attempts)
        )
        await db.commit()
        
@router.message(Command("add_attempts"))
async def add_attempts_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç: /add_attempts <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError
        
        user_id = int(parts[1])
        attempts = int(parts[2])
        
        await add_slot_attempts(user_id, attempts)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {attempts} –ø–æ–ø—ã—Ç–æ–∫!")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                user_id,
                f"üé∞ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {attempts} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã!"
            )
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_attempts <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Error in add_attempts: {str(e)}")

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, command: CommandObject):
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if message.from_user:
        if await check_blacklist_and_respond(message.from_user.id, message):
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ deep link –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
    if command.args and command.args.startswith("reply_"):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        from app.handlers.support import admin_sessions
        from app.database.models import get_support_ticket_by_id
        import html

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if not message.from_user or not is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        try:
            ticket_id = int(command.args.replace("reply_", ""))
            ticket = get_support_ticket_by_id(ticket_id)

            if not ticket:
                await message.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∞
            admin_sessions[message.from_user.id] = {
                'ticket_id': ticket_id,
                'user_id': ticket['user_id'],
                'username': ticket['username'],
                'full_name': ticket['full_name'],
                'message': ticket['message']
            }

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID
            from app.database.models import get_user_profile_by_id
            user_profile = get_user_profile_by_id(ticket['user_id'])
            user_display = f"@{ticket['username']}" if ticket['username'] else ticket['full_name']
            user_tg_id = user_profile['tg_id'] if user_profile else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ –∏ –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç
            admin_text = (
                f"‚úçÔ∏è <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {html.escape(user_display)}\n"
                f"üÜî <b>Telegram ID:</b> <code>{user_tg_id}</code>\n"
                f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{html.escape(ticket['message'])}\n\n"
                f"üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:</b>"
            )

            await message.answer(admin_text, parse_mode="HTML")
            return

        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
            return
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    MAIN_PHOTO = get_admin_setting('main_photo', 'https://imgur.com/a/TkOPe7c.jpeg')
    MAIN_DESCRIPTION = get_admin_setting('main_description', DEFAULT_MAIN_DESCRIPTION)

    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    tg_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user_profile(tg_id)

    if not user:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referrer_id = None
        if command.args and command.args.startswith("ref_"):
            try:
                referrer_tg_id = int(command.args.replace("ref_", ""))
                # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ –µ–≥–æ tg_id
                referrer_profile = get_user_profile(referrer_tg_id)
                if referrer_profile and referrer_tg_id != tg_id:  # –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
                    referrer_id = referrer_profile['id']
                    logging.info(f"[REFERRAL] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {referrer_tg_id}")
            except (ValueError, TypeError) as e:
                logging.warning(f"[REFERRAL] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {command.args}, –æ—à–∏–±–∫–∞: {e}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å referrer_id
        reg_date = datetime.datetime.now().strftime("%Y-%m-%d")
        get_or_create_user(tg_id, full_name, username, reg_date, referrer_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        referral_info = ""
        if referrer_id:
            referrer_profile = get_user_profile_by_id(referrer_id)
            if referrer_profile:
                referral_info = f"\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω: @{referrer_profile.get('username', '–Ω–µ—Ç')} (ID: {referrer_profile['tg_id']})"

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ
                try:
                    await message.bot.send_message(
                        referrer_profile['tg_id'],
                        f"üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n\n"
                        f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ ‚Üí üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.warning(f"[REFERRAL] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ {referrer_profile['tg_id']}: {e}")

        await notify_admins(message.bot, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n–ò–º—è: {full_name}\nUsername: @{username if username else '–Ω–µ—Ç'}\nID: {tg_id}{referral_info}")

    user_caption = f"<b>@{username if username else full_name}</b>, –î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Legal Stars! ‚ú®\n\n{MAIN_DESCRIPTION}"

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
    try:
        await message.answer_photo(
            photo=MAIN_PHOTO,
            caption=user_caption,
            reply_markup=main_menu_inline_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º.")
        await message.answer(
            text=user_caption,
            reply_markup=main_menu_inline_kb(),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "back_to_stars_menu")
async def back_to_stars_menu(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await stars_menu(call)

@router.callback_query(F.data == "back_to_premium_menu")
async def back_to_premium_menu(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await tg_premium_menu(call)
    
@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_inline_kb()
    )

@router.callback_query(F.data == "main_menu")
async def main_menu_handler(call: types.CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if await check_blacklist_and_respond(call.from_user.id, call):
            return

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        from aiogram.filters.state import State, StatesGroup
        states = [PremiumStates, StarsStates, CryptoStates, CryptoPayStates,
                 WithdrawStates, Form, DBFSM, AdminDBFSM, AdminDB,
                 BlacklistFSM, AdminFSM, AddReviewFSM, AddBalanceFSM,
                 RemoveBalanceFSM]

        for state_group in states:
            try:
                await call.bot.current_state(user=call.from_user.id).reset_state()
            except:
                pass

        MAIN_PHOTO = get_admin_setting('main_photo', 'https://imgur.com/a/TkOPe7c.jpeg')
        MAIN_DESCRIPTION = get_admin_setting('main_description', DEFAULT_MAIN_DESCRIPTION)

        await delete_previous_message(call)

        if proverka and not await check_subscription(call.from_user.id, call.bot):
            await show_subscription_message(call, call.bot)
            return

        try:
            await call.message.answer_photo(
                photo=MAIN_PHOTO,
                caption=MAIN_DESCRIPTION,
                reply_markup=main_menu_inline_kb()
            )
        except Exception as photo_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: {photo_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º.")
            await call.message.answer(
                text=MAIN_DESCRIPTION,
                reply_markup=main_menu_inline_kb(),
                parse_mode="HTML"
            )
    except Exception as e:
        logging.error(f"Error in main_menu_handler: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def main_menu_handler_no_delete(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if await check_blacklist_and_respond(call.from_user.id, call):
            return

        MAIN_PHOTO = get_admin_setting('main_photo', 'https://imgur.com/a/TkOPe7c.jpeg')
        MAIN_DESCRIPTION = get_admin_setting('main_description', DEFAULT_MAIN_DESCRIPTION)

        # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞—Å—Å—ã–ª–∫—É)

        if proverka and not await check_subscription(call.from_user.id, call.bot):
            await show_subscription_message(call, call.bot)
            return

        try:
            await call.message.answer_photo(
                photo=MAIN_PHOTO,
                caption=MAIN_DESCRIPTION,
                reply_markup=main_menu_inline_kb()
            )
        except Exception as photo_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: {photo_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º.")
            await call.message.answer(
                text=MAIN_DESCRIPTION,
                reply_markup=main_menu_inline_kb(),
                parse_mode="HTML"
            )
    except Exception as e:
        logging.error(f"Error in main_menu_handler_no_delete: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
@router.errors()
async def errors_handler(error_event: types.ErrorEvent):
    try:
        update = error_event.update
        exception = error_event.exception

        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        elif hasattr(update, 'message') and update.message:
            await update.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu_inline_kb())
    except:
        pass

    logging.error(f"Update: {error_event.update}\nException: {error_event.exception}")
    return True

@router.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: types.CallbackQuery):
    is_subscribed = await check_subscription(callback.from_user.id, callback.bot)
    
    if is_subscribed:
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        try:
            await callback.message.delete()
        except Exception:
            pass
            
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        MAIN_PHOTO = get_admin_setting('main_photo', 'https://imgur.com/a/TkOPe7c.jpeg')
        MAIN_TITLE = "–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Legal Stars! ‚ú®"
        MAIN_DESCRIPTION = (
            "–£ –Ω–∞—Å –º–æ–∂–Ω–æ –ª–µ–≥–∞–ª—å–Ω–æ –∫—É–ø–∏—Ç—å –∏ –ø–æ–¥–∞—Ä–∏—Ç—å:\n"
            "‚Ä¢ <b>–∑–≤—ë–∑–¥—ã Telegram</b> üéÅ\n"
            "‚Ä¢ <b>–ø–æ–¥–ø–∏—Å–∫—É Telegram Premium</b> üöÄ\n"
            "‚Ä¢ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É TON, NOT –∏ –¥—Ä—É–≥–∏–µ</b> üí∞\n"
            "‚Ä¢ <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∫—É</b> –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑—ã\n"
            "‚Ä¢ <b>–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b> –¥–ª—è –Ω–∞–≥—Ä–∞–¥\n\n"
            "<em>–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ ‚Äî –¥–µ–ª–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –ª–µ–≥–∫–æ –∏ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é!</em> üòä"
        )

        try:
            await callback.message.answer_photo(
                photo=MAIN_PHOTO,
                caption=f"{MAIN_TITLE}\n\n{MAIN_DESCRIPTION}",
                reply_markup=main_menu_inline_kb()
            )
        except Exception as photo_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: {photo_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º.")
            await callback.message.answer(
                text=f"{MAIN_TITLE}\n\n{MAIN_DESCRIPTION}",
                reply_markup=main_menu_inline_kb(),
                parse_mode="HTML"
            )
    else:
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data.startswith("check_sub_"))
async def check_subscription_for_section(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    is_subscribed = await check_subscription(callback.from_user.id, callback.bot)

    if is_subscribed:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback_data
        original_callback = callback.data.replace("check_sub_", "")

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
        if original_callback == "tg_premium":
            await tg_premium_menu(callback)
        elif original_callback == "stars":
            await stars_menu(callback)
        elif original_callback == "crypto":
            await crypto_menu(callback)
        else:
            # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await main_menu_handler(callback)
    else:
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "activity")
async def activity_menu_from_main(call: types.CallbackQuery, bot: Bot):
    await delete_previous_message(call)
    if not await check_subscription(call.from_user.id, bot):
        await show_subscription_message(call, bot)
        return

    try:
        user_id = call.from_user.id
        current_date = datetime.datetime.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é –∏–∑ –ë–î
        from app.database.models import get_user_activity_streak
        streak = get_user_activity_streak(user_id)
        
        text = (
            "<b>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
            "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–∞ –∏ –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n"
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ä—è–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 14 –∏–ª–∏ 20 –¥–Ω–µ–π), –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –±–æ–Ω—É—Å.\n"
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å, –µ–≥–æ \"—Ü–µ–ø–æ—á–∫–∞\" –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è ‚Äî —Å—á–µ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω—É–ª—é.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª 20 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –∞ –Ω–∞ 21-–π –¥–µ–Ω—å –Ω–µ –∑–∞—à–µ–ª ‚Äî –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ –Ω—É–ª—è.\n\n"
            f"<b>üî• –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {streak} –¥–Ω–µ–π\n"
            f"üìå <b>–°–µ–≥–æ–¥–Ω—è:</b> {current_date.strftime('%d.%m.%Y')}"
        )

        await call.message.answer(
            text,
            reply_markup=activity_calendar_kb(),
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ activity_menu: {str(e)}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "mark_activity")
async def mark_user_activity(call: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    if not await check_subscription(call.from_user.id, call.bot):
        await show_subscription_message(call, call.bot)
        return

    try:
        user_id = call.from_user.id
        today_str = datetime.date.today().strftime("%Y-%m-%d")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î)
        from app.database.models import get_user_activity, mark_activity, get_user_activity_streak
        existing_activity = get_user_activity(user_id, today_str)

        if existing_activity:
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            await call.answer("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞! üòäüöÄ", show_alert=True)
            return

        # –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ë–î
        mark_activity(user_id, today_str, "daily")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é –∏–∑ –ë–î
        streak = get_user_activity_streak(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        rewards = {
            3: "15‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å",
            7: "50‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å",
            15: "13‚≠ê",
            21: "21‚≠ê",
            28: "0.1 TON",
            30: "0.5 TON"
        }

        reward_text = ""
        if streak in rewards:
            reward = rewards[streak]
            if streak in [3, 7]:  # –ù–∞–≥—Ä–∞–¥—ã –≤ —Ä—É–±–ª—è—Ö
                update_balance(user_id, int(reward.split('‚ÇΩ')[0]))
            elif streak in [15, 21]:  # –ù–∞–≥—Ä–∞–¥—ã –≤ –∑–≤–µ–∑–¥–∞—Ö - —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
                stars_amount = int(reward.split('‚≠ê')[0])
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                from app.database.models import create_order, get_user_profile
                profile = get_user_profile(user_id)
                if profile:
                    db_user_id = profile['id']
                    create_order(db_user_id, "activity_stars", stars_amount, "pending",
                               extra_data=f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stars_amount} –∑–≤–µ–∑–¥ (—Å–µ—Ä–∏—è {streak} –¥–Ω–µ–π)")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞—è–≤–∫–µ
                    try:
                        from app.utils.misc import notify_admins
                        await notify_admins(
                            call.bot,
                            f"‚≠ê –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ó–í–ï–ó–î–´ –ó–ê –ê–ö–¢–ò–í–ù–û–°–¢–¨ ‚≠ê\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.full_name}\n"
                            f"üÜî ID: {user_id}\n"
                            f"üèÜ –ù–∞–≥—Ä–∞–¥–∞: {stars_amount}‚≠ê\n"
                            f"üî• –°–µ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {streak} –¥–Ω–µ–π\n"
                            f"üìÖ –î–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}"
                        )
                    except Exception as e:
                        import logging
                        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –∑–≤–µ–∑–¥–∞—Ö: {e}")
            elif streak in [28, 30]:  # –ù–∞–≥—Ä–∞–¥—ã –≤ TON - —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
                ton_amount = float(reward.split(' TON')[0])
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                from app.database.models import create_order, get_user_profile
                profile = get_user_profile(user_id)
                if profile:
                    db_user_id = profile['id']
                    create_order(db_user_id, "activity_ton", ton_amount, "pending",
                               extra_data=f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ton_amount} TON (—Å–µ—Ä–∏—è {streak} –¥–Ω–µ–π)")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞—è–≤–∫–µ
                    try:
                        from app.utils.misc import notify_admins
                        await notify_admins(
                            call.bot,
                            f"üíé –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê TON –ó–ê –ê–ö–¢–ò–í–ù–û–°–¢–¨ üíé\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.full_name}\n"
                            f"üÜî ID: {user_id}\n"
                            f"üèÜ –ù–∞–≥—Ä–∞–¥–∞: {ton_amount} TON\n"
                            f"üî• –°–µ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {streak} –¥–Ω–µ–π\n"
                            f"üìÖ –î–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}"
                        )
                    except Exception as e:
                        import logging
                        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ TON: {e}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if streak in [3, 7]:  # –î–µ–Ω—å–≥–∏ - –Ω–∞—á–∏—Å–ª–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                reward_text = f"\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–∞–≥—Ä–∞–¥–∞ {reward} –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"
            elif streak in [15, 21, 28, 30]:  # –ó–≤–µ–∑–¥—ã –∏ TON - —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞
                reward_text = f"\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞—è–≤–∫–∞ –Ω–∞ {reward} —Å–æ–∑–¥–∞–Ω–∞! –ê–¥–º–∏–Ω—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            else:
                reward_text = f"\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É: {reward}"

        await call.answer(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞! –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π{reward_text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_date = datetime.datetime.now().strftime('%d.%m.%Y')
        await call.message.edit_text(
            f"<b>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
            f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–∞ –∏ –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n"
            f"–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ä—è–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 14 –∏–ª–∏ 20 –¥–Ω–µ–π), –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –±–æ–Ω—É—Å.\n"
            f"–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å, –µ–≥–æ \"—Ü–µ–ø–æ—á–∫–∞\" –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è ‚Äî —Å—á–µ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω—É–ª—é.\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª 20 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –∞ –Ω–∞ 21-–π –¥–µ–Ω—å –Ω–µ –∑–∞—à–µ–ª ‚Äî –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ –Ω—É–ª—è.\n\n"
            f"<b>üî• –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {streak} –¥–Ω–µ–π\n"
            f"üìå <b>–°–µ–≥–æ–¥–Ω—è:</b> {current_date}{reward_text}",
            reply_markup=activity_calendar_kb(),
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è message (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞)
async def send_main_menu(message):
    from app.database.models import get_admin_setting
    main_photo = get_admin_setting('main_photo', 'https://imgur.com/a/TkOPe7c.jpeg')
    main_title = get_admin_setting('main_title', 'Legal Stars!')
    main_description = get_admin_setting('main_description', '–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∞–ª—å–Ω–æ –∫—É–ø–∏—Ç—å –∏ –ø–æ–¥–∞—Ä–∏—Ç—å:\n‚Ä¢ <b>–∑–≤—ë–∑–¥—ã Telegram</b> –¥—Ä—É–∑—å—è–º üéÅ\n‚Ä¢ <b>–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–∑—å—è–º Telegram Premium üöÄ\n‚Ä¢ <b>–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</b>, —Ç–∞–∫—É—é –∫–∞–∫ TON, NOT –∏ –¥—Ä—É–≥–∏–µ üí∞\n‚Ä¢ <b>–∞ —Ç–∞–∫–∂–µ –ø–æ–∏–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∫—É</b> –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑—ã\n‚Ä¢ <b>–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥\n\n<em>–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ ‚Äî –¥–µ–ª–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –ª–µ–≥–∫–æ –∏ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é!</em> üòä')
    user = getattr(message, 'from_user', None)
    username = f"@{user.username}" if user and getattr(user, 'username', None) else (user.full_name if user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    caption = f"<b>{username}, –î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Legal Stars! ‚ú®</b>\n\n{main_description}"
    if message is not None and hasattr(message, "answer_photo"):
        try:
            await message.answer_photo(
                photo=main_photo,
                caption=caption,
                reply_markup=main_menu_inline_kb(),
                parse_mode="HTML"
            )
        except Exception as photo_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: {photo_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º.")
            await message.answer(
                text=caption,
                reply_markup=main_menu_inline_kb(),
                parse_mode="HTML"
            )


@router.callback_query(F.data == "tg_premium")
async def tg_premium_menu(call: types.CallbackQuery):
    await delete_previous_message(call)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    from app.config_flags import proverka
    if proverka and not await check_subscription(call.from_user.id, call.bot):
        await show_subscription_message(call, call.bot)
        return
        
    premium_photo = get_admin_setting('premium_photo', 'https://imgur.com/a/VJU8JNk.jpeg')
    premium_description = get_admin_setting('premium_description', 'üíé Telegram Premium ‚Äî —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç Telegram, –¥–∞—é—â–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:')
    kb = premium_menu_inline_kb()
    await call.message.answer_photo(
        photo=premium_photo,
        caption=premium_description,
        reply_markup=kb
    )
    


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫" (–≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞)
@router.callback_query(F.data.in_(["premium_3m", "premium_6m", "premium_12m"]), StateFilter(PremiumStates.waiting_receipt_pdf))
async def back_from_upload_receipt_to_tariff(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"Back from upload receipt to tariff: callback_data={callback.data}")
    await state.clear()
    await callback.message.delete()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ Premium
    await tg_premium_menu(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å Premium)
@router.callback_query(lambda c: c.data.startswith('pay_sbp_'), StateFilter(PremiumStates.waiting_receipt_pdf))
async def back_from_premium_receipt_pdf(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"Back from premium receipt PDF: callback_data={callback.data}")

    await state.clear()
    await callback.message.delete()

    parts = callback.data.split('_')
    tariff = '_'.join(parts[2:-1])
    price = parts[-1]

    logging.info(f"Back from premium receipt PDF: tariff={tariff}, price={price}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    period = {
        '3m': '3 –º–µ—Å—è—Ü–∞',
        '6m': '6 –º–µ—Å—è—Ü–µ–≤',
        '12m': '12 –º–µ—Å—è—Ü–µ–≤',
        'premium_3m': '3 –º–µ—Å—è—Ü–∞',
        'premium_6m': '6 –º–µ—Å—è—Ü–µ–≤',
        'premium_12m': '12 –º–µ—Å—è—Ü–µ–≤'
    }.get(tariff, '?')

    text = (
        f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –∑–∞ Telegram Premium ({period})</b>\n"
        f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code>\n"
        f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data=f"upload_receipt_{tariff}_{price}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"premium_{tariff.replace('premium_', '')}")]
    ])

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
    await state.update_data(tariff=tariff, price=float(price))
    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

# --- –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü ---
@router.callback_query(F.data.startswith("pay_sbp_"))
async def pay_sbp_menu(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except:
        pass
    
    # More robust parsing of callback data
    parts = call.data.split('_')
    if len(parts) < 4:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    tariff = '_'.join(parts[2:-1])  # Handle cases where tariff might contain underscores
    price = parts[-1]
    
    try:
        price = float(price)
    except ValueError:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
        return
    
    period = {
        '3m': '3 –º–µ—Å—è—Ü–∞',
        '6m': '6 –º–µ—Å—è—Ü–µ–≤',
        '12m': '12 –º–µ—Å—è—Ü–µ–≤',
        'premium_3m': '3 –º–µ—Å—è—Ü–∞',
        'premium_6m': '6 –º–µ—Å—è—Ü–µ–≤', 
        'premium_12m': '12 –º–µ—Å—è—Ü–µ–≤'
    }.get(tariff, '?')
    
    text = (
        f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –∑–∞ Telegram Premium ({period})</b>\n"
        f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code>\n"
        f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data=f"upload_receipt_{tariff}_{price}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"premium_{tariff.replace('premium_', '')}")]
    ])
    
    await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.update_data(tariff=tariff, price=price)

@router.callback_query(F.data.startswith("upload_receipt_"))
async def upload_receipt_start(call: types.CallbackQuery, state: FSMContext):
    try:
        if getattr(call, 'message', None) and hasattr(call.message, "delete"):
            await call.message.delete()
    except Exception:
        pass

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º callback_data: upload_receipt_tariff_price
    key = call.data.replace('upload_receipt_', '') if call.data else ''
    parts = key.split('_')
    if len(parts) >= 2:
        tariff = '_'.join(parts[:-1])  # –í—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        price = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Ü–µ–Ω–∞
    else:
        tariff = key
        price = ''

    await state.update_data(tariff=tariff, price=price)

    text = (
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º (PDF —Ñ–æ—Ä–º–∞—Ç - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:\n\n"
        "‚ùó –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —á–µ–∫—É:\n"
        "- –§–æ—Ä–º–∞—Ç: PDF\n"
        "- –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 5MB\n"
        "- –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º"
    )

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pay_sbp_{tariff}_{price}")],
        ]
    )

    if getattr(call, 'message', None) and hasattr(call.message, "answer"):
        await call.message.answer(text, reply_markup=kb)

    await state.set_state(PremiumStates.waiting_receipt_pdf)

@router.message(PremiumStates.waiting_receipt_pdf, F.document)
async def premium_handle_pdf_receipt(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    tariff = data.get('tariff', '')
    price = data.get('price', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - PDF
    file_name = message.document.file_name or ""
    if not file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–æ —É–∂–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º PDF.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if message.document.file_size > 5 * 1024 * 1024:
        error_text = (
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —á–µ–∫.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:"
        )
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/Black_Prince01")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pay_sbp_{tariff}_{price}")],
            ]
        )
        await message.answer(error_text, reply_markup=kb)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —á–µ–∫–∞
    await state.update_data(
        receipt_file_id=message.document.file_id,
        receipt_file_name=file_name or "receipt.pdf"
    )

    text = (
        "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è Premium:\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–º–Ω–µ', –µ—Å–ª–∏ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –¥–ª—è —Å–µ–±—è"
    )

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"upload_receipt_{tariff}_{price}")],
        ]
    )
    
    await message.answer(text, reply_markup=kb)
    await state.set_state(PremiumStates.waiting_recipient)

@router.message(PremiumStates.waiting_receipt_pdf, ~F.document)
async def premium_handle_wrong_receipt_format(message: Message, state: FSMContext):
    if message.text and message.text.strip() == '/cancel':
        return  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º

    data = await state.get_data()
    key = data.get('tariff', '')
    price = data.get('price', '')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ—Ä–µ–∑ –∫–∞–∫–æ–π –ø—É—Ç—å –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # –ï—Å–ª–∏ –µ—Å—Ç—å premium_price –∏ period, –∑–Ω–∞—á–∏—Ç –ø—Ä–∏—à–µ–ª —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –ø—É—Ç—å
    # –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å tariff –∏ price, –∑–Ω–∞—á–∏—Ç —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
    premium_price = data.get('premium_price')
    period = data.get('period')
    is_new_path = premium_price is not None and period is not None

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Premium wrong format: data={data}, is_new_path={is_new_path}")

    error_text = (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–æ —É–∂–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º PDF.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É—Ç–∏
    if is_new_path:
        back_callback = "premium_pay_sbp"
    else:
        # –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø—É—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º pay_sbp_ —Ñ–æ—Ä–º–∞—Ç
        back_callback = f"pay_sbp_{key}_{price}"

    logging.info(f"Premium wrong format: back_callback={back_callback}")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/Black_Prince01")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
    ])

    await message.answer(error_text, reply_markup=kb)
    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ

# –î—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∏–∂–µ

@router.message(CryptoPayStates.waiting_receipt_pdf, ~F.document)
async def crypto_handle_wrong_receipt_format(message: Message, state: FSMContext):
    if message.text and message.text.strip() == '/cancel':
        return  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º

    error_text = (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–æ —É–∂–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º PDF.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/Black_Prince01")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")],
    ])

    await message.answer(error_text, reply_markup=kb)
    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è PDF –¥–ª—è Crypto
@router.callback_query(CryptoPayStates.waiting_receipt_pdf, F.data == "crypto_confirm")
async def crypto_back_from_pdf(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    data = await state.get_data()
    coin = data.get('coin', '?')
    amount = data.get('amount', '?')
    total = data.get('total', 0.0)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    try:
        await callback.message.delete()
    except Exception:
        pass

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    if not data or coin == '?' or amount == '?' or total == 0.0:
        await crypto_menu(callback)
        return

    text = (
        f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {total:.2f}‚ÇΩ –∑–∞ {amount} {coin}</b>\n"
        f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code> (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"
    )

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="crypto_upload_receipt")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")],
        ]
    )

    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(coin=coin, amount=amount, total=total)

 # –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ Premium
@router.callback_query(F.data.in_(["premium_3m", "premium_6m", "premium_12m"]))
async def premium_choose_pay_method(call: types.CallbackQuery, state: FSMContext):
    is_subscribed = await check_subscription(call.from_user.id, call.bot)
    if not is_subscribed:
        await show_subscription_message(call, call.bot)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if call.data == "premium_3m":
        period = "3 –º–µ—Å—è—Ü–∞"
        price = PREMIUM_FIXED_PRICES['3m']
        tariff_key = "3m"
    elif call.data == "premium_6m":
        period = "6 –º–µ—Å—è—Ü–µ–≤"
        price = PREMIUM_FIXED_PRICES['6m']
        tariff_key = "6m"
    elif call.data == "premium_12m":
        period = "12 –º–µ—Å—è—Ü–µ–≤"
        price = PREMIUM_FIXED_PRICES['12m']
        tariff_key = "12m"
    else:
        return
        
    await state.update_data(
        premium_price=price,
        period=period,
        tariff=tariff_key
    )
    
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{period}</b> Telegram Premium.\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{price}‚ÇΩ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    keyboard = [
        [InlineKeyboardButton(text="üì± –°–ë–ü", callback_data=f"premium_pay_sbp_{tariff_key}"),
         InlineKeyboardButton(text="üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"premium_pay_crypto_{tariff_key}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tg_premium")]
    ]
    
    try:
        await call.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception:
        await call.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –°–ë–ü (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –±–µ–∑ –¥—É–±–ª–µ–π)
@router.callback_query(F.data.startswith("premium_pay_sbp_"))
async def premium_pay_sbp_menu(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    tariff_key = data.get('tariff')
    price = data.get('premium_price')
    period = data.get('period')
    
    if not tariff_key or not price:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    text = (
        f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –∑–∞ Telegram Premium ({period})</b>\n"
        f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code>\n"
        f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data=f"premium_upload_receipt")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"premium_{tariff_key}")]
    ])
    
    await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.update_data(tariff=tariff_key, price=price)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
@router.callback_query(F.data == "premium_upload_receipt")
async def premium_upload_receipt_start(call: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–µ –∏ —Ü–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    data = await state.get_data()
    if "tariff" not in data or "price" not in data:
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await tg_premium_menu(call)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é Premium
        return
    try:
        await call.message.delete()
    except:
        pass
    
    text = (
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º (PDF —Ñ–æ—Ä–º–∞—Ç - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:\n\n"
        "‚ùó –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —á–µ–∫—É:\n"
        "- –§–æ—Ä–º–∞—Ç: PDF\n"
        "- –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 5MB\n"
        "- –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="premium_pay_sbp")]
    ])
    
    await call.message.answer(text, reply_markup=kb)
    await state.set_state(PremiumStates.waiting_receipt_pdf)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –Ω–æ–≤–æ–≥–æ Premium –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
@router.callback_query(F.data == "premium_pay_sbp", StateFilter(PremiumStates.waiting_receipt_pdf))
async def back_from_premium_upload_receipt(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    data = await state.get_data()
    tariff_key = data.get('tariff')
    price = data.get('premium_price')
    period = data.get('period')

    await state.clear()
    await callback.message.delete()

    # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω –æ–ø–ª–∞—Ç—ã –°–ë–ü
    if tariff_key and price and period:
        text = (
            f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –∑–∞ Telegram Premium ({period})</b>\n"
            f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code>\n"
            f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data=f"premium_upload_receipt")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"premium_{tariff_key}")]
        ])

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
        await state.update_data(tariff=tariff_key, price=price, premium_price=price, period=period)
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Premium
        await tg_premium_menu(callback)

@router.message(PremiumStates.waiting_recipient)
async def process_recipient(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    recipient_raw = (message.text or '').strip().lower()

    if recipient_raw == "–º–Ω–µ":
        recipient = f"@{message.from_user.username or message.from_user.id}"
    else:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        username = recipient_raw.lstrip('@')
        recipient = f"@{username}"

    # –ü–æ–ª—É—á–∞–µ–º database ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = get_user_profile(message.from_user.id)
    if not user_profile:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order_id = create_order(
        user_id=user_profile['id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º database ID
        order_type="premium",
        amount=data.get('premium_price', 0),
        status="pending",
        file_id=data.get('receipt_file_id'),
        extra_data={
            'period': data.get('period', ''),
            'recipient': recipient
        }
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    order_info = (
        f"üåü <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó TELEGRAM PREMIUM</b> üåü\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{message.from_user.username or message.from_user.id}\n"
        f"üÜî <b>ID:</b> <code>{message.from_user.id}</code>\n"
        f"üì¶ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient}\n"
        f"‚è≥ <b>–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {data.get('period', '?')}\n"
        f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <b>{data.get('premium_price', 0)}‚ÇΩ</b>\n"
        f"üïí <b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"üìå <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>\n\n"
        f"#–∑–∞–∫–∞–∑ #{order_id}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"order_pay_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject_{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_delete_{order_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞–º
    try:
        for admin_id in ADMINS:
            try:
                if data.get('receipt_file_id'):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —á–µ–∫–æ–º
                    admin_msg = await message.bot.send_document(
                        chat_id=admin_id,
                        document=data.get('receipt_file_id'),
                        caption=order_info,
                        reply_markup=admin_kb,
                        parse_mode="HTML"
                    )
                else:
                    # –ï—Å–ª–∏ —á–µ–∫–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    admin_msg = await message.bot.send_message(
                        chat_id=admin_id,
                        text=order_info,
                        reply_markup=admin_kb,
                        parse_mode="HTML"
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_order_status(order_id, admin_msg_id=admin_msg.message_id)
                
            except Exception as admin_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É {admin_id}: {admin_error}")
                continue

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_inline_kb()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ Telegram Premium —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —á–µ–∫ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üõçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
            [types.InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "leave_review")
async def leave_review_entry(call: types.CallbackQuery, state: FSMContext):
    msg = getattr(call, 'message', None)
    if msg:
        try:
            await msg.delete()
        except Exception:
            pass
    await call.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –û—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
        "üìù –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–≤ <b>—Å–∂–∞—Ç–æ–º –≤–∏–¥–µ</b>)\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
            ]
        ),
        parse_mode="HTML"
    )
    await state.set_state(PremiumStates.waiting_review)

def format_author(user):
    if user.username:
        return f"@{user.username}"
    return f"{user.id}"

@router.message(PremiumStates.waiting_review)
async def process_review(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ
    if not message.text and not message.photo:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            )
        )
        return

    user = message.from_user
    # –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
    review_text = message.text or (message.caption if message.caption else '')
    review_id = create_review(
        user_id=user.id,
        content=review_text,
        file_id=message.photo[-1].file_id if message.photo else None,
        status="pending"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"review_publish_{review_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"review_reject_{review_id}"),
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"review_delete_{review_id}")
        ]
    ])
    author = format_author(user)
    text = (
        f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}\n"
        f"ID: {user.id}\n\n"
        f"{review_text}"
    )
    admin_msgs = []
    if message.photo and len(message.photo) > 0:
        # –î–ª—è —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        if review_text.strip():
            text_plain = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}\nID: {user.id}\n\n{review_text}"
        else:
            text_plain = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ) –æ—Ç {author}\nID: {user.id}"

        photo_file_id = message.photo[-1].file_id
        for admin_id in ADMINS:
            try:
                admin_msg = await message.bot.send_photo(admin_id, photo_file_id, caption=text_plain, reply_markup=markup)
                admin_msgs.append((admin_id, admin_msg.message_id))
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                try:
                    admin_msg = await message.bot.send_message(admin_id, text_plain, reply_markup=markup, parse_mode="HTML")
                    admin_msgs.append((admin_id, admin_msg.message_id))
                except Exception as e2:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω—É {admin_id}: {e2}")
    else:
        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
        admin_msgs = await send_to_admins(message.bot, text, reply_markup=markup, parse_mode="HTML")
    if admin_msgs:
        update_review_status(review_id, admin_msg_id=admin_msgs[0][1])
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–∫–æ—Ä–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω‚ù§Ô∏è",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )
    )
    await state.clear()
    
@router.callback_query(F.data.startswith("review_reject_"))
async def review_reject(callback: types.CallbackQuery):
    import datetime
    try:
        review_id = int(callback.data.split("_")[2])
        from app.database.models import get_review_by_id, update_review_status
        review = get_review_by_id(review_id)
        update_review_status(review_id, status="rejected")
        reject_time = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(
            f"‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n<b>–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> {reject_time}",
            parse_mode="HTML"
        )
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    except Exception as e:
        try:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except Exception:
            pass

@router.callback_query(F.data.startswith("review_delete_"))
async def review_delete(callback: types.CallbackQuery):
    try:
        review_id = int(callback.data.split("_")[2])
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤ –∏–∑ –±–∞–∑—ã
        from app.database.models import delete_review
        delete_review(review_id)
        
        await callback.answer("üóë –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω")
        await callback.message.delete()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ TG Premium –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ

@router.callback_query(F.data == "about")
async def about_menu(call: types.CallbackQuery, bot: Bot):
    await delete_previous_message(call)
    """–ú–µ–Ω—é '–û –Ω–∞—Å' —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(call.from_user.id, bot):
        await show_subscription_message(call, bot)
        return

    try:
        # –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û –Ω–∞—Å"
        about_photo = "https://imgur.com/a/nG1DXzq.jpeg"
        about_text = (
    "üåü Legal Stars: –í–∞—à –ü—É—Ç—å –∫ –ó–≤—ë–∑–¥–∞–º! üåü\n\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Legal Stars! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:\n"
    "‚Ä¢ üéÅ –ó–≤—ë–∑–¥—ã Telegram –¥—Ä—É–∑—å—è–º\n"
    "‚Ä¢ üöÄ –ü–æ–¥–ø–∏—Å–∫—É Telegram Premium —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–∑—å—è–º\n"
    "‚Ä¢ üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É ‚Äî TONCOIN, NOTCOIN –∏ –¥—Ä—É–≥–∏–µ\n\n"
    "–ü–æ —Å–∞–º—ã–º –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º!\n"
    "–î–æ–±–∞–≤–∏–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –≤ –≤–∞—à—É –∂–∏–∑–Ω—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–±–æ—Ç, –Ω–µ –±–µ—Å–ø–æ–∫–æ—è—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö.\n\n"
    "‚ú® –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n\n"
    "üí∏ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã: —Å–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–∏—è–Ω–∏—è.\n"
    "üõ° –õ–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å: –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã ‚Äî –≤–∞—à–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ.\n"
    "‚öôÔ∏è –ü—Ä–æ—Å—Ç–æ—Ç–∞: –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ ‚Äî –∏ –∑–≤—ë–∑–¥—ã –≤–∞—à–∏!\n\n"
    "üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å Legal Stars!"
)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        try:
            await call.message.answer_photo(
                photo=about_photo,
                caption=about_text,
                reply_markup=about_menu_inline_kb(),
                parse_mode="HTML"
            )
        except Exception as photo_error:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")
            await call.message.answer(
                about_text,
                reply_markup=about_menu_inline_kb(),
                parse_mode="HTML"
            )
        
        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ about_menu: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "check_about_sub")
async def check_about_subscription(call: CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏"""
    if await check_subscription(call.from_user.id, bot):
        await about_menu(call, bot)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª "–û –Ω–∞—Å"
    else:
        await call.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)

@router.callback_query(F.data == "reviews")
async def reviews_menu(call: types.CallbackQuery, bot: Bot):
    await delete_previous_message(call)
    """–ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    if not await check_subscription(call.from_user.id, bot):
        await show_subscription_message(call, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        return

    try:
        reviews_photo = "https://imgur.com/a/5cDMyX0.jpeg"
        reviews_text = (
    "üåü –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üåü\n\n"
    "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º! "
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ LegalStars. "
    "–í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å!\n\n"
    "üí¨ –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤!\n\n"
    "–í–∞—à –æ–ø—ã—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. "
    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥, –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è "
    "–∏ –æ–±—â–µ–º –æ–ø—ã—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º."
)
        
        try:
            await call.message.answer_photo(
                photo=reviews_photo,
                caption=reviews_text,
                reply_markup=reviews_menu_inline_kb(),
                parse_mode="HTML"
            )
        except Exception as e:
            await call.message.answer(
                reviews_text,
                reply_markup=reviews_menu_inline_kb(),
                parse_mode="HTML"
            )
        
        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reviews_menu: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

@router.callback_query(F.data == "check_reviews_sub")
async def check_reviews_subscription(call: CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    if await check_subscription(call.from_user.id, bot):
        await reviews_menu(call, bot)
    else:
        await call.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", show_alert=True)

@router.message(Command("admin"))
async def adminmenu(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users_count = len(get_all_users())
    from app.config_flags import proverka, ref_active
    from app.keyboards.main import admin_panel_kb
    text = (
        f"<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
        f"üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {'‚úÖ' if proverka else '‚õîÔ∏è'}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {'‚úÖ' if ref_active else '‚õîÔ∏è'}"
    )
    kb = admin_panel_kb()
    await message.answer(text, parse_mode="HTML", reply_markup=kb)

def get_admin_panel_text_and_kb_actual():
    from app.config_flags import proverka, ref_active
    from app.database.models import get_all_users
    from app.keyboards.main import admin_panel_kb
    users_count = len(get_all_users())
    text = (
        f"<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
        f"üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {'‚úÖ' if proverka else '‚õîÔ∏è'}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {'‚úÖ' if ref_active else '‚õîÔ∏è'}"
    )
    kb = admin_panel_kb()
    return text, kb

@router.callback_query(F.data == "toggle_check")
async def toggle_check(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
    from app.config_flags import proverka
    global proverka
    proverka = not proverka
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–æ–¥—É–ª–µ config_flags
    import app.config_flags
    app.config_flags.proverka = proverka
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
    try:
        await callback.message.delete()
    except Exception:
        pass
    
    text, kb = get_admin_panel_text_and_kb_actual()
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    
    await callback.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {'–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' if proverka else '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚õîÔ∏è'}")

@router.callback_query(F.data == "toggle_ref")
async def toggle_ref(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    global ref_active
    from app.config_flags import ref_active
    ref_active = not ref_active
    import app.config_flags
    app.config_flags.ref_active = ref_active
    try:
        await callback.message.delete()
    except Exception:
        pass
    text, kb = get_admin_panel_text_and_kb_actual()
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data == "state_proverka_on")
async def cb_proverka_on(callback: types.CallbackQuery):
    from app.database.models import get_all_users
    from app.config_flags import proverka, ref_active
    user_count = len(get_all_users())
    check_emoji = "‚úÖ" if proverka else "‚õîÔ∏è"
    ref_emoji = "‚úÖ" if ref_active else "‚õîÔ∏è"
    text = (
        f"–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
        f"üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {check_emoji}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {ref_emoji}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ü–†–û–í–ï–†–ö–ê: {check_emoji} {'–í–´–ö–õ' if not proverka else '–í–ö–õ'}", callback_data="state_proverka_on" if not proverka else "state_proverka_off")],
        [InlineKeyboardButton(text=f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {ref_emoji} {'–í–ö–õ' if ref_active else '–í–´–ö–õ'}", callback_data="state_ref_on" if not ref_active else "state_ref_off")],
        [InlineKeyboardButton(text="üí¨–†–ê–°–°–´–õ–ö–ê", callback_data="rassilka")],
        [InlineKeyboardButton(text="üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
        [InlineKeyboardButton(text="üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="blacklist_menu")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="add_review")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_orders")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_clear_orders")],
        [InlineKeyboardButton(text="üóë –°–∫—Ä—ã—Ç—å", callback_data="hide_admin_panel")],
    ])
    await callback.message.edit_text(text, reply_markup=kb)

@router.callback_query(F.data == 'rassilka')
async def textrassilka(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
        ])
    )
    await state.set_state(Form.waiting_for_message_text)
    
@router.message(Form.waiting_for_message_text)
async def namebutton(message: types.Message, state: FSMContext):
    await state.update_data(waiting_for_message_text=message.text)
    await message.answer(
        '‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
        ])
    )
    await state.set_state(Form.waiting_for_button_text)

@router.message(Form.waiting_for_button_text)
async def buttonname(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ.\n\n‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∫–æ–º–∞–Ω–¥—É</b> "
        "–¥–ª—è –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏.\n\n"
        "–ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ –µ—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ —Ä–∞–∑–¥–µ–ª –≤ –±–æ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "<code>buystars</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥\n"
        "<code>generalmenu</code> ‚Äî –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "<code>reviewsmenu</code> ‚Äî –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É —Å –æ—Ç–∑—ã–≤–∞–º–∏\n"
        "<code>buyprem</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ Premium\n"
        "<code>cryptoshop</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "<code>slot_machine</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã\n"
        "<code>activity</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "<code>profile</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "<code>support</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "<code>reviews</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤\n"
        "<code>legal_channel</code> ‚Äî –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª Legal Stars",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
        ])
    )
    await state.set_state(Form.waiting_for_button_url)

@router.message(Form.waiting_for_button_url)
async def waiturl(message: types.Message, state: FSMContext):
    await state.update_data(message_buttonlink=message.text)
    await message.answer(
        '‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ ("–ü–∞–±–ª–∏–∫" –∏–ª–∏ –¥—Ä—É–≥–æ–µ)',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
        ])
    )
    await state.set_state(Form.waiting_for_button2_text)

@router.message(Form.waiting_for_button2_text)
async def button2name(message: types.Message, state: FSMContext):
    await state.update_data(button2_text=message.text)
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ.\n\n‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∫–æ–º–∞–Ω–¥—É</b> "
        "–¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏.\n\n"
        "–ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ –µ—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ —Ä–∞–∑–¥–µ–ª –≤ –±–æ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "<code>buystars</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥\n"
        "<code>generalmenu</code> ‚Äî –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "<code>reviewsmenu</code> ‚Äî –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É —Å –æ—Ç–∑—ã–≤–∞–º–∏\n"
        "<code>buyprem</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ Premium\n"
        "<code>cryptoshop</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "<code>slot_machine</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã\n"
        "<code>activity</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "<code>profile</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "<code>support</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "<code>reviews</code> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤\n"
        "<code>legal_channel</code> ‚Äî –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª Legal Stars",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
        ])
    )
    await state.set_state(Form.waiting_for_button2_url)

@router.message(Form.waiting_for_button2_url)
async def waiturl2(message: types.Message, state: FSMContext):
    await state.update_data(message_button2link=message.text)
    await message.answer(
        '‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞\n‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ '
        '(–µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –±—É–¥–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "–±–µ–∑—Ñ–æ—Ç–æ")',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
        ])
    )
    await state.set_state(Form.photo_id)

async def send_message_to_user(bot, tg_id, message_text, markup):
    try:
        await bot.send_message(tg_id, message_text, reply_markup=markup)
    except Exception as e:
        print(f"[ERR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {tg_id}: {e}")

async def send_photo_to_user(bot, tg_id, photo_id, caption, markup):
    try:
        await bot.send_photo(tg_id, photo=photo_id, caption=caption, reply_markup=markup)
    except Exception as e:
        print(f"[ERR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {tg_id}: {e}")

async def broadcast_message(bot, message_text, markup):
    from app.database.models import get_all_users
    users = get_all_users()
    user_ids = [row[1] for row in users]  # tg_id
    batch_size = 30
    for i in range(0, len(user_ids), batch_size):
        batch = user_ids[i:i + batch_size]
        await asyncio.gather(*(send_message_to_user(bot, tg_id, message_text, markup) for tg_id in batch))
        await asyncio.sleep(1)

async def broadcast_photo(bot, photo_id, caption, markup):
    from app.database.models import get_all_users
    users = get_all_users()
    user_ids = [row[1] for row in users]  # tg_id
    batch_size = 30
    for i in range(0, len(user_ids), batch_size):
        batch = user_ids[i:i + batch_size]
        await asyncio.gather(*(send_photo_to_user(bot, tg_id, photo_id, caption, markup) for tg_id in batch))
        await asyncio.sleep(1)

def estimate_broadcast_time(user_count: int, batch_size: int = 30, delay: float = 1.0) -> str:
    total_batches = (user_count + batch_size - 1) // batch_size
    estimated_seconds = total_batches * delay + total_batches * 1.5  # 1.5 —Å–µ–∫ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    minutes = int(estimated_seconds // 60)
    seconds = int(estimated_seconds % 60)
    return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"

@router.message(Form.photo_id)
async def buttonlink(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_text = data['waiting_for_message_text']
    button_name = data['button_text']
    button_url = data['message_buttonlink']
    button2_name = data.get('button2_text', '')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
    button2_url = data.get('message_button2link', '')  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏
    if button_name and button_url and button_name.strip() and button_url.strip():
        if button_url.lower() in ['buystars', 'generalmenu', 'reviewsmenu', 'buyprem', 'cryptoshop', 'slot_machine', 'activity', 'profile', 'support', 'reviews']:
            buttons.append(InlineKeyboardButton(text=button_name, callback_data=button_url.lower()))
        elif button_url.lower() == 'legal_channel':
            buttons.append(InlineKeyboardButton(text=button_name, url='https://t.me/legal_stars'))
        elif button_url.startswith(('http://', 'https://')):
            buttons.append(InlineKeyboardButton(text=button_name, url=button_url))
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            if '.' in button_url and not button_url.isdigit():
                fixed_url = f'https://{button_url}' if not button_url.startswith(('http://', 'https://')) else button_url
                buttons.append(InlineKeyboardButton(text=button_name, url=fixed_url))
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ callback_data
                callback_data = button_url.lower()[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data
                buttons.append(InlineKeyboardButton(text=button_name, callback_data=callback_data))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if button2_name and button2_url and button2_name.strip() and button2_url.strip():
        if button2_url.lower() in ['buystars', 'generalmenu', 'reviewsmenu', 'buyprem', 'cryptoshop', 'slot_machine', 'activity', 'profile', 'support', 'reviews']:
            buttons.append(InlineKeyboardButton(text=button2_name, callback_data=button2_url.lower()))
        elif button2_url.lower() == 'legal_channel':
            buttons.append(InlineKeyboardButton(text=button2_name, url='https://t.me/legal_stars'))
        elif button2_url.startswith(('http://', 'https://')):
            buttons.append(InlineKeyboardButton(text=button2_name, url=button2_url))
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            if '.' in button2_url and not button2_url.isdigit():
                fixed_url = f'https://{button2_url}' if not button2_url.startswith(('http://', 'https://')) else button2_url
                buttons.append(InlineKeyboardButton(text=button2_name, url=fixed_url))
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ callback_data
                callback_data = button2_url.lower()[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data
                buttons.append(InlineKeyboardButton(text=button2_name, callback_data=callback_data))
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
    markup = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

    from app.database.models import get_all_users
    user_count = len(get_all_users())

    # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    def estimate_broadcast_time_local(user_count: int, batch_size: int = 30, delay: float = 1.0) -> str:
        total_batches = (user_count + batch_size - 1) // batch_size
        estimated_seconds = total_batches * delay + total_batches * 1.5  # 1.5 —Å–µ–∫ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        minutes = int(estimated_seconds // 60)
        seconds = int(estimated_seconds % 60)
        return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"

    estimated_time = estimate_broadcast_time_local(user_count)
    
    if message.text and message.text.lower() == '–±–µ–∑—Ñ–æ—Ç–æ':
        await message.answer(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ...\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time}")
        asyncio.create_task(broadcast_message(message.bot, message_text, markup))
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
        await state.clear()
        return
        
    if message.content_type == 'photo':
        photo_id = message.photo[-1].file_id
        await message.answer_photo(
            photo=photo_id, 
            caption=message_text, 
            reply_markup=markup
        )
        await message.answer(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ñ–æ—Ç–æ...\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time}")
        asyncio.create_task(broadcast_photo(message.bot, photo_id, message_text, markup))
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞.")
        await state.clear()
        return
        
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ –∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ '–±–µ–∑—Ñ–æ—Ç–æ', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    await message.answer(
        f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ...\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time}")
    asyncio.create_task(broadcast_message(message.bot, message_text, markup))
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–∞—Å—Å—ã–ª–∫–µ)
@router.callback_query(F.data == 'buystars')
async def handle_buystars(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ buystars - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    await stars_menu_no_delete(callback)

@router.callback_query(F.data == 'generalmenu')
async def handle_generalmenu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ generalmenu –≤ —Ä–∞—Å—Å—ã–ª–∫–µ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.answer()
    # –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu_handler_no_delete(callback)

@router.callback_query(F.data == 'reviewsmenu')
async def handle_reviewsmenu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ reviewsmenu - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    await reviews_menu_no_delete(callback, callback.bot)

@router.callback_query(F.data == 'buyprem')
async def handle_buyprem(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ buyprem - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    await tg_premium_menu_no_delete(callback)

@router.callback_query(F.data == 'cryptoshop')
async def handle_cryptoshop(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ cryptoshop - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    await crypto_menu_no_delete(callback)

@router.callback_query(F.data == 'slot_machine')
async def handle_slot_machine(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ slot_machine - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    from app.handlers.slot_machine import slot_machine_menu_no_delete
    await slot_machine_menu_no_delete(callback)

@router.callback_query(F.data == 'activity')
async def handle_activity(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ activity - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    await activity_menu_from_main_no_delete(callback, callback.bot)

@router.callback_query(F.data == 'profile')
async def handle_profile(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ profile - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π FSMContext –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.memory import MemoryStorage
    storage = MemoryStorage()
    state = FSMContext(storage=storage, key=f"user:{callback.from_user.id}")
    await profile_menu_no_delete(callback, callback.bot, state)

@router.callback_query(F.data == 'support')
async def handle_support(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ support - –ù–ï —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    from app.handlers.support import support_menu_no_delete
    await support_menu_no_delete(callback, callback.bot)



@router.callback_query(F.data == "admin_db")
async def admin_db_start(callback: types.CallbackQuery, state: FSMContext):
    await render_db_page(callback.message, 0)

async def render_db_page(message, page: int):
    from app.database.models import get_all_users
    users = get_all_users()
    per_page = 5
    total_users = len(users)
    total_pages = (total_users + per_page - 1) // per_page
    if page < 0 or page >= total_pages:
        await message.answer(f"‚ùó –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}.")
        return
    start = page * per_page
    end = start + per_page
    users_page = users[start:end]
    text = f"<b>üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages})</b>\n\n"
    for user in users_page:
        tg_id = user[1]
        username = user[3] or '‚Äî'
        balance = user[5] if len(user) > 5 else 0
        regdate = user[4] or '‚Äî'
        ref_id = user[7] if len(user) > 7 else None
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
        from app.database.models import get_referrals_count
        ref_count = get_referrals_count(tg_id)
        text += (f"üë§ ID: <code>{tg_id}</code>\n"
                 f"üìõ Username: @{username}\n"
                 f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f}‚ÇΩ\n"
                 f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {regdate}\n"
                 f"üîó –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <code>{ref_id or '‚Äî'}</code>\n"
                 f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\n\n")
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_db_page:{page - 1}"))
    if (page + 1) < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_db_page:{page + 1}"))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        nav_buttons,
        [InlineKeyboardButton(text="üî¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data="admin_db_goto")],
        [InlineKeyboardButton(text="–í—ã—Ö–æ–¥", callback_data="admin_panel")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="admin_db_search")]
    ])
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_db_page:"))
async def handle_db_page(callback: types.CallbackQuery):
    page = int(callback.data.split(":")[1])
    await callback.message.delete()
    await render_db_page(callback.message, page)

@router.callback_query(F.data == "admin_db_goto")
async def ask_page_number(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))
    await state.set_state(AdminDBFSM.waiting_for_page_number)

@router.message(AdminDBFSM.waiting_for_page_number)
async def go_to_specific_page(message: types.Message, state: FSMContext):
    try:
        page_number = int(message.text.strip())
        if page_number < 1:
            raise ValueError
        await state.clear()
        await render_db_page(message, page_number - 1)
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 1)")

@router.callback_query(F.data == "admin_db_search")
async def admin_db_search(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminDB.waiting_for_search_query)
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username (–º–æ–∂–Ω–æ —Å @ –∏ –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))

@router.message(AdminDB.waiting_for_search_query)
async def admin_db_search_query(message: types.Message, state: FSMContext):
    query = message.text.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if query.startswith('@'):
        query = query[1:]  # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å

    from app.database.models import get_all_users, get_user_profile, get_referrals_count
    users = get_all_users()
    found_user = None
    for user in users:
        tg_id = str(user[1])
        username = user[3] or ''
        if query.isdigit() and tg_id == query:
            found_user = user
            break
        elif query.lower() in username.lower():
            found_user = user
            break
    if not found_user:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    tg_id = found_user[1]
    username = found_user[3] or '‚Äî'
    balance = found_user[5] if len(found_user) > 5 else 0
    regdate = found_user[4] or 'None'
    ref_id = found_user[7] if len(found_user) > 7 else None
    # –ü–æ–ª—É—á–∞–µ–º username –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    inviter = '‚Äî'
    if ref_id:
        inviter_profile = None
        for u in users:
            if u[0] == ref_id:
                inviter_profile = u
                break
        if inviter_profile:
            if isinstance(inviter_profile, dict):
                inviter = f"@{inviter_profile['username']}" if inviter_profile['username'] else f"ID: {inviter_profile['tg_id']}"
            else:
                inviter = f"@{inviter_profile[3]}" if inviter_profile[3] else f"ID: {inviter_profile[1]}"
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    from app.database.models import get_all_users
    referrals = []
    for u in users:
        if u[7] == found_user[0]:
            ref_username = u[3] or f"ID: {u[1]}"
            ref_balance = u[5] if len(u) > 5 else 0
            referrals.append((ref_username, ref_balance))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"<b>üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n"
        f"<b>ID:</b> {tg_id}\n"
        f"<b>Username:</b> @{username}\n"
        f"<b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.2f}‚ÇΩ\n"
        f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {regdate}\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—Å–∏–ª:</b> {inviter}\n"
        f"<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
    )
    if referrals:
        for ref_username, ref_balance in referrals:
            text += f"  ‚îî @{ref_username}: {ref_balance:.2f}‚ÇΩ\n"
    else:
        text += "  ‚Äî"
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance"), InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="remove_balance")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="admin_db")]
    ])
    await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.clear()

async def get_blacklist():
    rows = []
    async with aiosqlite.connect('data/blacklist.db') as db:
        await db.execute('CREATE TABLE IF NOT EXISTS blacklist (tg_id INTEGER PRIMARY KEY, reason TEXT, date_added TEXT)')
        await db.commit()
        async with db.execute('SELECT tg_id, reason, date_added FROM blacklist') as cursor:
            rows = await cursor.fetchall()
    return rows

async def add_to_blacklist(tg_id, reason):
    async with aiosqlite.connect('data/blacklist.db') as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS blacklist (tg_id INTEGER PRIMARY KEY, reason TEXT, date_added TEXT)''')
        await db.execute('INSERT OR REPLACE INTO blacklist (tg_id, reason, date_added) VALUES (?, ?, ?)', (tg_id, reason, datetime.datetime.now().strftime('%Y-%m-%d')))
        await db.commit()

async def remove_from_blacklist(tg_id):
    async with aiosqlite.connect('data/blacklist.db') as db:
        await db.execute('DELETE FROM blacklist WHERE tg_id = ?', (tg_id,))
        await db.commit()

async def is_blacklisted(tg_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
    async with aiosqlite.connect('data/blacklist.db') as db:
        await db.execute('CREATE TABLE IF NOT EXISTS blacklist (tg_id INTEGER PRIMARY KEY, reason TEXT, date_added TEXT)')
        await db.commit()
        async with db.execute('SELECT reason FROM blacklist WHERE tg_id = ?', (tg_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else None

async def check_blacklist_and_respond(user_id, message_or_callback):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è"""
    blacklist_reason = await is_blacklisted(user_id)
    if blacklist_reason:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/legal_stars")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        blacklist_message = (
            f"üö´ <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {blacklist_reason}\n\n"
            f"–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

        if hasattr(message_or_callback, 'message'):  # CallbackQuery
            try:
                await message_or_callback.message.delete()
            except Exception:
                pass
            await message_or_callback.message.answer(blacklist_message, reply_markup=kb, parse_mode="HTML")
        else:  # Message
            await message_or_callback.answer(blacklist_message, reply_markup=kb, parse_mode="HTML")

        return True
    return False

@router.callback_query(F.data == "blacklist_menu")
async def show_blacklist(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    rows = await get_blacklist()
    text = "<b>üìõ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
    if not rows:
        text += "\n–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ ‚úÖ"
    else:
        async with aiosqlite.connect("data/users.db") as users_db:
            for tg_id, reason, date in rows:
                cursor = await users_db.execute("SELECT username FROM users WHERE tg_id = ?", (tg_id,))
                user = await cursor.fetchone()
                username = f"@{user[0]}" if user and user[0] else "(–±–µ–∑ –∏–º–µ–Ω–∏)"
                text += f"\n‚Ä¢ {username} (<code>{tg_id}</code>) ‚Äî {reason} ({date})"
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ß–°
    buttons = []
    if rows:
        for tg_id, reason, date in rows:
            async with aiosqlite.connect("data/users.db") as users_db:
                cursor = await users_db.execute("SELECT username FROM users WHERE tg_id = ?", (tg_id,))
                user = await cursor.fetchone()
                username = f"@{user[0]}" if user and user[0] else f"ID:{tg_id}"
                buttons.append([InlineKeyboardButton(text=f"üö´ –°–Ω—è—Ç—å –ß–°: {username}", callback_data=f"blacklist_unban_{tg_id}")])

    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°", callback_data="blacklist_add")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=markup)

@router.callback_query(F.data == "blacklist_add")
async def ask_user_to_blacklist(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception:
        pass

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="blacklist_menu")]
    ])

    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°:",
        reply_markup=kb
    )
    await state.set_state(BlacklistFSM.waiting_for_user_to_add)

@router.message(BlacklistFSM.waiting_for_user_to_add)
async def ask_blacklist_reason(message: types.Message, state: FSMContext):
    text = message.text.strip()
    tg_id = None
    username_display = text

    if text.startswith("@"):  # username
        username = text[1:]
        async with aiosqlite.connect("data/users.db") as db:
            cursor = await db.execute("SELECT tg_id FROM users WHERE username = ?", (username,))
            row = await cursor.fetchone()
            if row:
                tg_id = row[0]
    elif text.isdigit():
        tg_id = int(text)
        username_display = f"ID: {tg_id}"

    if not tg_id:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="blacklist_menu")]
        ])
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.", reply_markup=kb)
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –≤ –ß–°
    blacklist_reason = await is_blacklisted(tg_id)
    if blacklist_reason:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="blacklist_menu")]
        ])
        await message.answer(f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_display} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ß–°.\n–ü—Ä–∏—á–∏–Ω–∞: {blacklist_reason}", reply_markup=kb)
        await state.clear()
        return

    await state.update_data(tg_id=tg_id, username_display=username_display)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="blacklist_menu")]
    ])

    await message.answer(
        f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_display} –Ω–∞–π–¥–µ–Ω.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ –ß–°:",
        reply_markup=kb
    )
    await state.set_state(BlacklistFSM.waiting_for_reason)

@router.message(BlacklistFSM.waiting_for_reason)
async def save_to_blacklist(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("tg_id")
    username_display = data.get("username_display", f"ID: {tg_id}")
    reason = message.text.strip()

    await add_to_blacklist(tg_id, reason)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –°–Ω—è—Ç—å –ß–°", callback_data=f"blacklist_unban_{tg_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="blacklist_menu")]
    ])

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_display} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}",
        reply_markup=kb
    )
    await state.clear()

@router.callback_query(F.data.startswith("blacklist_unban_"))
async def unban_user_from_blacklist(callback: types.CallbackQuery):
    """–°–Ω–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ß–° –ø–æ –∫–Ω–æ–ø–∫–µ"""
    try:
        tg_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        async with aiosqlite.connect("data/users.db") as db:
            cursor = await db.execute("SELECT username FROM users WHERE tg_id = ?", (tg_id,))
            user = await cursor.fetchone()
            username_display = f"@{user[0]}" if user and user[0] else f"ID: {tg_id}"

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ß–°
        await remove_from_blacklist(tg_id)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="blacklist_menu")]
        ])

        try:
            await callback.message.delete()
        except Exception:
            pass

        await callback.message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_display} —Å–Ω—è—Ç —Å –ß–°.",
            reply_markup=kb
        )

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å –ß–°")
        logging.error(f"Error removing from blacklist: {e}")

# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ "—Å–Ω—è—Ç—å –ß–°"

@router.callback_query(F.data == "delete_user")
async def ask_user_to_delete(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception:
        pass

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

    await callback.message.answer(
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç:\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –í–µ—Å—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ –í—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–∫–∞–∑—ã\n"
        "‚Ä¢ –û—Ç–∑—ã–≤—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ —Å–≤—è–∑–∏",
        parse_mode="HTML",
        reply_markup=kb
    )
    await state.set_state(AdminFSM.waiting_for_user_to_delete)

@router.message(AdminFSM.waiting_for_user_to_delete)
async def process_user_deletion(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return

    user_input = message.text.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - —É–±–∏—Ä–∞–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if user_input.startswith('@'):
        username = user_input[1:].lower()  # –£–±–∏—Ä–∞–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        search_type = "username"
    elif user_input.isdigit():
        tg_id = int(user_input)
        search_type = "tg_id"
    else:
        username = user_input.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        search_type = "username"

    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('data/users.db') as db:
            if search_type == "username":
                cursor = await db.execute('SELECT tg_id, username, full_name, balance FROM users WHERE LOWER(username) = ?', (username,))
            else:
                cursor = await db.execute('SELECT tg_id, username, full_name, balance FROM users WHERE tg_id = ?', (tg_id,))

            user = await cursor.fetchone()

        if not user:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="delete_user")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])

            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_input}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
                reply_markup=kb
            )
            await state.clear()
            return

        user_tg_id, user_username, user_full_name, user_balance = user
        username_display = f"@{user_username}" if user_username else f"ID: {user_tg_id}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{user_tg_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ])

        await message.answer(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username_display}\n"
            f"<b>–ò–º—è:</b> {user_full_name}\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance:.2f}‚ÇΩ\n\n"
            f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å</b> —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b>!",
            parse_mode="HTML",
            reply_markup=kb
        )
        await state.clear()

    except Exception as e:
        logging.error(f"Error in process_user_deletion: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()

@router.callback_query(F.data.startswith("confirm_delete_user_"))
async def confirm_user_deletion(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        tg_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        async with aiosqlite.connect('data/users.db') as db:
            cursor = await db.execute('SELECT username, full_name FROM users WHERE tg_id = ?', (tg_id,))
            user = await cursor.fetchone()

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        username, full_name = user
        username_display = f"@{username}" if username else f"ID: {tg_id}"

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
        from app.database.models import delete_user_everywhere_full
        delete_user_everywhere_full(tg_id)

        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        await remove_from_blacklist(tg_id)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])

        try:
            await callback.message.delete()
        except Exception:
            pass

        await callback.message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"<b>–£–¥–∞–ª–µ–Ω:</b> {username_display}\n"
            f"<b>–ò–º—è:</b> {full_name}\n\n"
            f"üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
            f"–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'.",
            parse_mode="HTML",
            reply_markup=kb
        )

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")

    except Exception as e:
        logging.error(f"Error in confirm_user_deletion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.callback_query(F.data == "add_review")
async def admin_add_review(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID, –æ—Ç –∫–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–∑—ã–≤:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_panel')]]))
    await state.set_state(AddReviewFSM.waiting_for_author)

@router.message(AddReviewFSM.waiting_for_author)
async def receive_review_author(message: types.Message, state: FSMContext):
    author = message.text.strip()
    await state.update_data(review_author=author)
    await message.answer(
        "üì® –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∞–º –æ—Ç–∑—ã–≤:\n\n"
        "üìù –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–≤ —Å–∂–∞—Ç–æ–º –≤–∏–¥–µ)\n"
        "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_panel')]])
    )
    await state.set_state(AddReviewFSM.waiting_for_content)

@router.message(AddReviewFSM.waiting_for_content)
async def receive_review_content(message: types.Message, state: FSMContext):
    data = await state.get_data()
    author = data.get('review_author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ
    if not message.text and not message.photo:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_panel')]])
        )
        return

    # –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
    review_text = message.text or (message.caption if message.caption else '')

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    photo_file_id = None
    if message.photo and len(message.photo) > 0:
        photo_file_id = message.photo[-1].file_id

    review_id = create_review(
        user_id=0,  # –î–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
        content=review_text,
        file_id=photo_file_id,
        status="pending"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ —Å—Ä–∞–∑—É –≤ –∫–∞–Ω–∞–ª
    try:
        links = "\n____________________\nüîó <a href=\"https://t.me/legalstars_bot\">–ù–∞—à –±–æ—Ç</a> | <a href=\"https://t.me/legal_stars\">–ù–∞—à –∫–∞–Ω–∞–ª</a>"

        if message.photo and len(message.photo) > 0:
            # –î–ª—è —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            if review_text.strip():
                caption = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}\n\n{review_text}{links}"
            else:
                caption = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}{links}"

            await message.bot.send_photo(
                chat_id=REVIEW_CHANNEL_ID,
                photo=photo_file_id,
                caption=caption,
                parse_mode="HTML"
            )
        else:
            # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
            caption = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}\n\n{review_text}{links}"
            await message.bot.send_message(
                chat_id=REVIEW_CHANNEL_ID,
                text=caption,
                parse_mode="HTML",
                disable_web_page_preview=True
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
        update_review_status(review_id, status="published")

        await message.answer("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data='admin_panel')]]))

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data='admin_panel')]]))

    await state.clear()

@router.callback_query(F.data.startswith("review_publish_"))
async def review_publish(callback: types.CallbackQuery):
    import datetime
    try:
        review_id = int(callback.data.split("_")[2])
        
        from app.database.models import get_review_by_id, update_review_status, get_user_profile_by_id
        review = get_review_by_id(review_id)
        if not review:
            await callback.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_profile = get_user_profile_by_id(review['user_id'])
        username = user_profile['username'] if user_profile and user_profile['username'] else None
        
        if not username:
            try:
                tg_user = await callback.bot.get_chat(review['user_id'])
                username = tg_user.username
            except Exception:
                username = None

        author = f"@{username}" if username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {review['user_id']})"
        review_text = review['content']

        links = "\n____________________\nüîó <a href=\"https://t.me/legalstars_bot\">–ù–∞—à –±–æ—Ç</a> | <a href=\"https://t.me/legal_stars\">–ù–∞—à –∫–∞–Ω–∞–ª</a>"

        # –§–æ—Ä–º–∏—Ä—É–µ–º caption –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
        if review_text and review_text.strip():
            caption = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}\n\n{review_text}{links}"
        else:
            caption = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}{links}"

        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID
            if review['file_id']:
                await callback.bot.send_photo(
                    chat_id=REVIEW_CHANNEL_ID,
                    photo=review['file_id'],
                    caption=caption,
                    parse_mode="HTML"
                )
            else:
                await callback.bot.send_message(
                    chat_id=REVIEW_CHANNEL_ID,
                    text=caption,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ ID, –ø—Ä–æ–±—É–µ–º –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
            try:
                if review['file_id']:
                    await callback.bot.send_photo(
                        chat_id=REVIEWS_CHANNEL,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —é–∑–µ—Ä–Ω–µ–π–º
                        photo=review['file_id'],
                        caption=caption,
                        parse_mode="HTML"
                    )
                else:
                    await callback.bot.send_message(
                        chat_id=REVIEWS_CHANNEL,
                        text=caption,
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
                await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞")
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
        update_review_status(review_id, status="published")
        publish_time = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        try:
            await callback.message.delete()
        except Exception:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.answer(
            f"‚úÖ –û—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {publish_time}",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –û—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞")


def get_admin_panel_kb(user_id):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if user_id not in ADMINS:
        return None
    
    users_count = len(get_all_users())
    check_flag = get_flag('subscription_check', 'false')
    ref_flag = get_flag('ref_active', 'true')
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ü–†–û–í–ï–†–ö–ê: {'‚úÖ –í–ö–õ' if check_flag else '‚õîÔ∏è –í–´–ö–õ'}", callback_data="toggle_check")],
        [InlineKeyboardButton(text=f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {'‚úÖ –í–ö–õ' if ref_flag else '‚õîÔ∏è –í–´–ö–õ'}", callback_data="toggle_ref")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞", callback_data="admin_slot_wins")],
        [InlineKeyboardButton(text="üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="admin_activity_stats")],
        [InlineKeyboardButton(text="üí¨–†–ê–°–°–´–õ–ö–ê", callback_data="rassilka")],
        [InlineKeyboardButton(text="üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_db")],
        [InlineKeyboardButton(text="üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="blacklist_menu")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="add_review")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_orders")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_clear_orders")],
        [InlineKeyboardButton(text="üí≥ –í—ã–≤–æ–¥—ã", callback_data="admin_withdrawals")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–≤–æ–¥—ã", callback_data="admin_clear_withdrawals")],
    ])
    return kb

@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: types.CallbackQuery):
    await delete_previous_message(callback)
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    text, kb = get_admin_panel_text_and_kb_actual()
    try:
        if getattr(callback, 'message', None) and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        else:
            await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    except Exception:
        if getattr(callback, 'message', None) and hasattr(callback.message, "answer"):
            await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data == "add_balance")
async def add_balance_start(callback: types.CallbackQuery, state: FSMContext):
    if getattr(callback, 'message', None) and hasattr(callback.message, "delete"):
        try:
            await callback.message.delete()
        except Exception:
            pass
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
    last_message = callback.message.reply_to_message or callback.message
    # –ü–∞—Ä—Å–∏–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    import re
    match = re.search(r"ID:\s*(\d+)", last_message.text)
    if not match:
        if getattr(callback, 'message', None) and hasattr(callback.message, "answer"):
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    user_id = int(match.group(1))
    await state.update_data(user_id=user_id)
    if getattr(callback, 'message', None) and hasattr(callback.message, "answer"):
        await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))
    await state.set_state(AddBalanceFSM.waiting_for_amount)

@router.message(AddBalanceFSM.waiting_for_amount)
async def receive_amount_for_balance(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        data = await state.get_data()
        user_id = data.get('user_id')
        update_balance(user_id, amount)
        profile = get_user_profile(user_id)
        new_balance = profile['balance'] if profile else 0
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f}‚ÇΩ\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}‚ÇΩ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))
        await state.clear()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))

@router.callback_query(F.data == "remove_balance")
async def remove_balance_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
    last_message = callback.message.reply_to_message or callback.message
    import re
    match = re.search(r"ID:\s*(\d+)", last_message.text)
    if not match:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    user_id = int(match.group(1))
    await state.update_data(user_id=user_id)
    await callback.message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))
    await state.set_state(RemoveBalanceFSM.waiting_for_amount)

@router.message(RemoveBalanceFSM.waiting_for_amount)
async def receive_amount_for_remove(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        data = await state.get_data()
        user_id = data.get('user_id')
        from app.database.models import remove_balance, get_user_profile
        profile = get_user_profile(user_id)
        if not profile:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))
            await state.clear()
            return
        balance = profile['balance']
        if amount > balance:
            await message.answer(f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance:.2f}‚ÇΩ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))
            await state.clear()
            return
        remove_balance(user_id, amount)
        profile = get_user_profile(user_id)
        new_balance = profile['balance'] if profile else 0
        await message.answer(f"‚úÖ –° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–ø–∏—Å–∞–Ω–æ {amount:.2f}‚ÇΩ\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}‚ÇΩ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))
        await state.clear()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_db')]]))

@router.callback_query(F.data == "remove_balance_confirm")
async def remove_balance_confirm(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    amount = data.get('amount')
    from app.database.models import remove_balance, get_user_profile
    remove_balance(user_id, amount)
    profile = get_user_profile(user_id)
    new_balance = profile['balance'] if profile else 0
    await callback.message.answer(f"‚úÖ –° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–ø–∏—Å–∞–Ω–æ {amount:.2f}‚ÇΩ.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}‚ÇΩ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_panel')]]))
    await state.clear()
    try:
        await callback.message.delete()
    except Exception:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è PDF
@router.callback_query(CryptoPayStates.waiting_receipt_pdf, F.data == "crypto")
async def crypto_menu_from_pdf_state(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await crypto_menu(call)

@router.callback_query(F.data == "crypto")
async def crypto_menu(call: types.CallbackQuery):
    await delete_previous_message(call)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    from app.config_flags import proverka
    if proverka and not await check_subscription(call.from_user.id, call.bot):
        await show_subscription_message(call, call.bot)
        return
        
    crypto_photo = get_admin_setting('crypto_photo', 'https://imgur.com/a/3ZZOHNJ.jpeg')
    crypto_description = get_admin_setting('crypto_description', '–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑–∞ —Ä—É–±–ª–∏!\n\n–õ–µ–≥–∫–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–¥–µ–ª–∞–µ–º –º—ã –∑–∞ –≤–∞—Å.\n\nüîê –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.');
    kb = crypto_menu_inline_kb()
    await call.message.answer_photo(
        photo=crypto_photo,
        caption=crypto_description,
        reply_markup=kb
    )

@router.callback_query(F.data == "crypto_ton")
async def crypto_ton(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ):\nüîª –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: 0.2 TON",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]
        )
    )
    await state.set_state(CryptoStates.waiting_ton)

@router.callback_query(F.data == "crypto_not")
async def crypto_not(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NOT, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):\nüîª –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: 500 NOT",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]
        )
    )
    await state.set_state(CryptoStates.waiting_not)

@router.callback_query(F.data == "crypto_dogs")
async def crypto_dogs(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOGS, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):\nüîª –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: 5000 DOGS",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]
        )
    )
    await state.set_state(CryptoStates.waiting_dogs)

@router.message(CryptoStates.waiting_ton)
async def process_ton_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        return
    if amount < 0.2:
        await message.answer("–ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: 0.2 TON", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        return
    price_rub = await get_crypto_rub_price('TON')
    total = amount * price_rub * 1.20  # +20%
    await state.update_data(coin='TON', amount=amount, total=total)
    text = f"üí± –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {amount} TON\nüí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {total:.6f} RUB\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="crypto_confirm"), types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="crypto")],
        ]
    )
    await message.answer(text, reply_markup=kb)
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

@router.message(CryptoStates.waiting_not)
async def process_not_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        return
    if amount < 500:
        await message.answer("–ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: 500 NOT", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        return
    price_rub = await get_crypto_rub_price('NOT')
    total = amount * price_rub * 1.18  # +18%
    await state.update_data(coin='NOT', amount=amount, total=total)
    text = f"üí± –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {amount} NOT\nüí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {total:.6f} RUB\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="crypto_confirm"), types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="crypto")],
        ]
    )
    await message.answer(text, reply_markup=kb)
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

@router.message(CryptoStates.waiting_dogs)
async def process_dogs_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        return
    if amount < 5000:
        await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 500‚ÇΩ):", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]))
        return
    price_rub = await get_crypto_rub_price('DOGS')
    total = amount * price_rub * 1.15  # +15%
    await state.update_data(coin='DOGS', amount=amount, total=total)
    text = f"üí± –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {amount} DOGS\nüí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {total:.6f} RUB\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="crypto_confirm"), types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="crypto")],
        ]
    )
    await message.answer(text, reply_markup=kb)
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

@router.callback_query(F.data == "crypto_confirm")
async def crypto_confirm(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass

    data = await state.get_data()
    coin = data.get('coin', '?')
    amount = data.get('amount', '?')
    total = data.get('total', 0.0)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    if not data or coin == '?' or amount == '?' or total == 0.0:
        await crypto_menu(call)
        return

    text = (
        f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {total:.2f}‚ÇΩ –∑–∞ {amount} {coin}</b>\n"
        f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code> (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"
    )

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data="crypto_upload_receipt")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")],
        ]
    )

    await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(CryptoPayStates.waiting_receipt_pdf)

@router.callback_query(F.data == "crypto_upload_receipt")
async def crypto_upload_receipt_start(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    
    text = (
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º (PDF —Ñ–æ—Ä–º–∞—Ç - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:\n\n"
        "‚ùó –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —á–µ–∫—É:\n"
        "- –§–æ—Ä–º–∞—Ç: PDF\n"
        "- –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 5MB\n"
        "- –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º"
    )
    
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto_confirm")],
        ]
    )
    
    await call.message.answer(text, reply_markup=kb)
    await state.set_state(CryptoPayStates.waiting_receipt_pdf)

@router.message(CryptoPayStates.waiting_receipt_pdf, F.document)
async def crypto_handle_pdf_receipt(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - PDF
    file_name = message.document.file_name or ""
    if not file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–æ —É–∂–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º PDF.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if message.document.file_size > 5 * 1024 * 1024:
        error_text = (
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —á–µ–∫.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:"
        )
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/Black_Prince01")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto_confirm")],
            ]
        )
        await message.answer(error_text, reply_markup=kb)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —á–µ–∫–∞
    await state.update_data(
        receipt_file_id=message.document.file_id,
        receipt_file_name=file_name or "receipt.pdf"
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—à–µ–ª—ë–∫
    await message.answer(
        "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto_upload_receipt")]
        ])
    )
    await state.set_state(CryptoPayStates.waiting_wallet)

@router.message(CryptoPayStates.waiting_wallet)
async def crypto_process_wallet(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    wallet = (message.text or '').strip()
    
    if not wallet:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º database ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = get_user_profile(message.from_user.id)
    if not user_profile:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order_id = create_order(
        user_id=user_profile['id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º database ID
        order_type="crypto",
        amount=data.get('total', 0),
        status="pending",
        file_id=data.get('receipt_file_id'),
        extra_data={
            'coin': data.get('coin', ''),
            'amount': data.get('amount', 0),
            'wallet': wallet
        }
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    order_info = (
        f"üåü <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó TELEGRAM PREMIUM</b> üåü\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{message.from_user.username or message.from_user.id}\n"
        f"üÜî <b>ID:</b> <code>{message.from_user.id}</code>\n"
        f"üì¶ <b>–ú–æ–Ω–µ—Ç–∞:</b> {data.get('coin', '?')}\n"
        f"‚è≥ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {data.get('amount', '?')}\n"
        f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {data.get('total', '?')}‚ÇΩ\n"
        f"üîë <b>–ö–æ—à–µ–ª–µ–∫:</b> {wallet}\n"
        f"üïí <b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"üìå <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>\n\n"
        f"#–∑–∞–∫–∞–∑ #{order_id}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"order_pay_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject_{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_delete_{order_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞–º
    try:
        for admin_id in ADMINS:
            try:
                if data.get('receipt_file_id'):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —á–µ–∫–æ–º
                    admin_msg = await message.bot.send_document(
                        chat_id=admin_id,
                        document=data.get('receipt_file_id'),
                        caption=order_info,
                        reply_markup=admin_kb,
                        parse_mode="HTML"
                    )
                else:
                    # –ï—Å–ª–∏ —á–µ–∫–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    admin_msg = await message.bot.send_message(
                        chat_id=admin_id,
                        text=order_info,
                        reply_markup=admin_kb,
                        parse_mode="HTML"
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if admin_id == ADMINS[0]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    update_order_status(order_id, admin_msg_id=admin_msg.message_id)
                
            except Exception as admin_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É {admin_id}: {admin_error}")
                continue

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_inline_kb()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —á–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üõçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
            [types.InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "crypto_other")
async def crypto_other(call: types.CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    
    text = (
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø–æ–∫—É–ø–∫–µ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n\n"
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å TON, NOT, DOGS –∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏."
    )
    
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/Black_Prince01")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")],
        ]
    )
    
    await call.message.answer(text, reply_markup=kb)

async def get_crypto_rub_price(symbol):
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api.binance.com/api/v3/ticker/price?symbol={symbol}USDT') as resp:
            data = await resp.json()
            price_usdt = float(data['price'])
        async with session.get('https://www.cbr-xml-daily.ru/daily_json.js') as resp:
            text = await resp.text()
            data = json.loads(text)
            usd_rub = float(data['Valute']['USD']['Value'])
        price_rub = price_usdt * usd_rub
        return price_rub

@router.callback_query(F.data == "stars")
async def stars_menu(call: types.CallbackQuery):
    await delete_previous_message(call)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription_required(call.from_user.id, call.bot):
        await show_subscription_message(call, call.bot)
        return
        
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...
        
    stars_photo = get_admin_setting('stars_photo', 'https://imgur.com/a/0Tx7psa.jpeg')
    stars_description = get_admin_setting('stars_description', '''
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–≥—Ä–∞–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Å–µ–±—è.

‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üîí –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ª–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.
''')
    if not stars_description:
        stars_description = '''
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–≥—Ä–∞–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Å–µ–±—è.

‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üîí –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ª–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.
'''
    kb = stars_menu_inline_kb()
    await call.message.answer_photo(
        photo=stars_photo,
        caption=stars_description,
        reply_markup=kb,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "withdraw")
async def withdraw_start(call: types.CallbackQuery, state: FSMContext):
    profile = get_user_profile(call.from_user.id)
    if not profile:
        await call.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_inline_kb())
        return
    balance = profile['balance']
    await state.update_data(back_to="profile")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if balance < 500:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–¥–∞–ª—è–µ–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 500‚ÇΩ)")
        return
    
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 500 —Ä—É–±–ª–µ–π - —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 500‚ÇΩ):", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]))
    await state.set_state(WithdrawStates.waiting_amount)

@router.message(WithdrawStates.waiting_amount)
async def withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.", reply_markup=back_to_profile_kb())
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã
    async with aiosqlite.connect("data/users.db") as db:
        cursor = await db.execute("SELECT balance FROM users WHERE tg_id = ?", (message.from_user.id,))
        result = await cursor.fetchone()
        if not result:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_profile_kb())
            return
        balance = result[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞
    if amount < 500:
        await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî 500‚ÇΩ", reply_markup=back_to_profile_kb())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    if amount > balance:
        await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=back_to_profile_kb())
        return

    await state.update_data(amount=amount)
    await message.answer(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {amount:.2f}‚ÇΩ? –≠—Ç–∞ —Å—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=withdraw_confirm_kb())
    await state.set_state(WithdrawStates.confirm)

@router.callback_query(F.data == "withdraw_confirm")
async def withdraw_confirm(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount")
    if not amount:
        await call.message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_inline_kb())
        await state.clear()
        return
    
    text = ("üí≥ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚Äî –∫—É–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–µ–Ω—å–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–∞ –±–∞–Ω–∫–∏ –†–§.\n"
            "üåç –ï—Å–ª–∏ —É –≤–∞—Å –±–∞–Ω–∫ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! üòä")
    
    await call.message.answer(text, reply_markup=withdraw_requisites_kb())
    await state.set_state(WithdrawStates.waiting_requisites)

@router.message(WithdrawStates.waiting_requisites)
async def withdraw_requisites(message: types.Message, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount")
    requisites = (message.text or '').strip()
    
    if not amount:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_inline_kb())
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_profile = get_user_profile(message.from_user.id)
    if not user_profile:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_inline_kb())
        await state.clear()
        return
    
    user_id = user_profile['id']  # ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    commission = round(amount * 0.03, 2)
    final_amount = round(amount - commission, 2)
    
    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    freeze_balance(message.from_user.id, amount)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    order_id = create_order(
        user_id=user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        order_type="withdraw",
        amount=amount,
        status="pending",
        file_id=None,
        extra_data={
            "requisites": requisites,
            "commission": commission,
            "final_amount": final_amount
        }
    )
    
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=main_menu_inline_kb())
    
    author_link = f"@{message.from_user.username or message.from_user.id}" if (message.from_user.username or message.from_user.id) else f"ID: {message.from_user.id}"
    text = (
        f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {author_link}\n"
        f"üìä –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞: <b>{amount:.2f}‚ÇΩ</b>\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è (3%): <b>{commission:.2f}‚ÇΩ</b>\n"
        f"üí∞ –ö –≤—ã–ø–ª–∞—Ç–µ: <b>{final_amount:.2f}‚ÇΩ</b>\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}\n"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"order_pay_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject_{order_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"order_delete_{order_id}")]
    ])
    try:
        admin_msgs = await send_to_admins(
            message.bot,
            text,
            reply_markup=markup,
            parse_mode="HTML"
        )
        if admin_msgs:
            update_order_status(order_id, admin_msg_id=admin_msgs[0][1])
    except Exception as e:
        print(f"[ERROR][WITHDRAW] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∞–¥–º–∏–Ω—É: {e}")
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("withdraw_reject_"))
async def withdraw_reject(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        withdrawal_id = int(parts[2])
        user_id = int(parts[3])
        amount = float(parts[4])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    from app.database.models import update_withdrawal_status
    update_withdrawal_status(withdrawal_id, 'rejected')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    unfreeze_balance(user_id, amount)
    
    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f}‚ÇΩ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
    except Exception:
        pass
    
    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@router.callback_query(lambda c: c.data.startswith("withdraw_delete_"))
async def withdraw_delete(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        withdrawal_id = int(parts[2])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.message.edit_text("üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    from app.database.models import get_withdrawal_by_id
    withdrawal = get_withdrawal_by_id(withdrawal_id)
    
    if withdrawal:
        user_id = withdrawal[6]  # tg_id
        amount = withdrawal[2]
        status = withdrawal[3]
        
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ pending, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        if status == 'pending':
            unfreeze_balance(user_id, amount)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã
        import sqlite3
        conn = sqlite3.connect('data/users.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM withdrawals WHERE id = ?', (withdrawal_id,))
        conn.commit()
        conn.close()
    
    await callback.answer("üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.message.edit_text("üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ –∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
from aiogram.filters import Command
@router.message(Command("clear_withdrawals"))
async def clear_withdrawals_command(message: types.Message):
    admin_ids = [829887947, 6782740295]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
    if message.from_user.id not in admin_ids:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    clear_all_withdrawals_and_frozen()
    await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã.")

@router.message(Command("clear_calendar"))
async def clear_calendar_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    from app.database.models import clear_all_calendar_data, clear_all_activity_prizes
    success1 = clear_all_calendar_data()
    success2 = clear_all_activity_prizes()
    if success1 and success2:
        await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã:\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –í—Å–µ –ø—Ä–∏–∑—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\nüí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_prizes")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")

@router.message(Command("clear_slot"))
async def clear_slot_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    from app.database.models import clear_all_slot_data, clear_all_slot_prizes
    success1 = clear_all_slot_data()
    success2 = clear_all_slot_prizes()
    if success1 and success2:
        await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –æ—á–∏—â–µ–Ω—ã:\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π\n‚Ä¢ –°—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤\n‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –∏—Å—Ç–æ—Ä–∏–π\n‚Ä¢ –î–∞—Ç—ã —Å–±—Ä–æ—Å–∞ —Å–ø–∏–Ω–æ–≤\n‚Ä¢ –í—Å–µ –ø—Ä–∏–∑—ã —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã\n\nüí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_prizes")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã.")

@router.message(Command("reset_prizes"))
async def reset_prizes_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    from app.database.models import reset_all_prizes
    success = reset_all_prizes()
    if success:
        await message.answer("‚úÖ –í—Å–µ –ø—Ä–∏–∑—ã –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:\n‚Ä¢ –ü—Ä–∏–∑—ã —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n‚Ä¢ –ü—Ä–∏–∑—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\nüé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!\nüìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–∑–æ–≤.")

def get_last_withdraw_orders(tg_id, limit=5):
    import sqlite3
    conn = sqlite3.connect('data/users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE tg_id=?', (tg_id,))
    user = cursor.fetchone()
    if not user:
        conn.close()
        return []
    user_id = user[0]
    cursor.execute('''SELECT amount, status, created_at FROM orders WHERE user_id=? AND type="withdraw" ORDER BY created_at DESC LIMIT ?''', (user_id, limit))
    rows = cursor.fetchall()
    conn.close()
    return rows

@router.callback_query(F.data == "profile")
async def profile_menu(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    await delete_previous_message(call)
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    if not await check_subscription(call.from_user.id, bot):
        await show_subscription_message(call, bot)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_profile(call.from_user.id)
        if not user:
            await call.message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
                reply_markup=main_menu_inline_kb()
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        balance = float(user['balance'] or 0)
        frozen = float(user['frozen'] or 0)
        reg_date = user['reg_date'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        profile_description = get_admin_setting('profile_description', 'üöÄ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –±–∞–ª–∞–Ω—Å–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.')
        profile_photo = get_admin_setting('profile_photo', 'https://imgur.com/a/TkOPe7c.jpeg')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            f"{profile_description}\n\n"
            f"üÜî <b>ID:</b> <a href='tg://user?id={user['tg_id']}'>{user['tg_id']}</a>\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.2f}‚ÇΩ\n"
            f"‚ùÑÔ∏è <b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {frozen:.2f}‚ÇΩ\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if ref_active:
            from app.database.models import get_unclaimed_referrals_count

            referrals = get_referrals_count(user['tg_id'])
            bot_username = (await bot.me()).username
            ref_link = f"https://t.me/{bot_username}?start=ref_{user['tg_id']}"

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            try:
                unclaimed_count = await get_unclaimed_referrals_count(user['id'])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
                unclaimed_count = 0

            text += (
                f"\nüë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> {referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"üéÅ <b>–ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:</b> {unclaimed_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                f"üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n"
            )

            if unclaimed_count > 0:
                text += f"\nüí° –£ –≤–∞—Å –µ—Å—Ç—å {unclaimed_count} –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤! –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∏—Ö –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", 
                        callback_data="withdraw"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="main_menu"
                    )
                ]
            ]
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        try:
            await call.message.delete()
        except:
            pass

        await call.message.answer_photo(
            photo=profile_photo,
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}: {e}")
        await call.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_inline_kb()
        )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ ---
@router.callback_query(lambda c: c.data.startswith("stars_") and c.data[6:].isdigit() and not c.data.startswith("stars_pay_"))
async def stars_fixed_amount(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    prices = {
        50: 85, 75: 127, 100: 165, 150: 248, 200: 340, 250: 413, 350: 578, 500: 825, 700: 1155, 1000: 1640
    }
    amount = int(call.data.replace("stars_", ""))
    price = prices.get(amount)
    if not price:
        await call.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")]]))
        return
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{amount}‚≠ê</b> –Ω–∞ —Å—É–º–º—É <b>{price} RUB</b>. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üì± –°–ë–ü", callback_data=f"stars_pay_sbp_{amount}_{price}"), types.InlineKeyboardButton(text="üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"stars_pay_crypto_{amount}_{price}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")],
        ]
    )
    await call.message.answer(text, reply_markup=kb, parse_mode="HTML")

# --- –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (Premium) ---
@router.callback_query(F.data.startswith("pay_crypto_"))
async def pay_crypto_premium_menu(call: types.CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer(
        "üí∞ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π?\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –ú—ã –æ–±—Å—É–¥–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å.\n\nüåü –ñ–¥—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/Black_Prince01")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tg_premium")],
            ]
        )
    )

# --- –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (–∑–≤—ë–∑–¥—ã) ---
@router.callback_query(F.data.startswith("stars_pay_crypto_"))
async def stars_pay_crypto_menu(call: types.CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer(
        "üí∞ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π?\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –ú—ã –æ–±—Å—É–¥–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å.\n\nüåü –ñ–¥—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/Black_Prince01")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")],
            ]
        )
    )

# --- –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ---
@router.callback_query(lambda c: c.data.startswith("crypto_ton") or c.data.startswith("crypto_not") or c.data.startswith("crypto_dogs"))
async def crypto_choose_amount(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    if call.data == "crypto_ton":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON (–º–∏–Ω–∏–º—É–º 0.2):", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        await state.set_state(CryptoStates.waiting_ton)
    elif call.data == "crypto_not":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NOT (–º–∏–Ω–∏–º—É–º 500):", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        await state.set_state(CryptoStates.waiting_not)
    elif call.data == "crypto_dogs":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOGS (–º–∏–Ω–∏–º—É–º 5000):", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]]))
        await state.set_state(CryptoStates.waiting_dogs)

# --- –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ ---
@router.callback_query(F.data == "stars_custom")
async def stars_custom_amount(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ,–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –º–µ–Ω—å—à–µ 50 –µ–¥–∏–Ω–∏—Ü –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ö–†–ê–¢–ù–û–ï 13 –∑–≤–µ–∑–¥–∞–º (–ø–æ–¥–∞—Ä–æ–∫ –∑–∞ 15 –∑–≤–µ–∑–¥ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ 13) –∏ –ö–†–ê–¢–ù–û–ï 21 –∑–≤–µ–∑–¥–∞–º\n‚ú® –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 50 –∑–≤—ë–∑–¥ —è  –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")],
            ]
        )
    )
    await state.set_state(PremiumStates.waiting_custom_stars)

@router.message(PremiumStates.waiting_custom_stars)
async def process_custom_stars(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")]]))
        return
    fixed = {13: 15, 21: 25, 26: 30, 34: 40, 39: 45, 42: 50}
    if amount < 50:
        if amount not in fixed:
            await message.answer(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(map(str, fixed.keys()))} –∏–ª–∏ –æ—Ç 50.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")]]))
            return
        price = round(fixed[amount] * 1.65)
    elif 50 <= amount < 1500:
        price = round(amount * 1.65)
    elif amount >= 1500:
        price = round(amount * 1.6)
    else:
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")]]))
        return
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{amount}‚≠ê</b> –Ω–∞ —Å—É–º–º—É <b>{price} RUB</b>. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üí∏ –°–ë–ü", callback_data=f"stars_pay_sbp_{amount}_{price}"), types.InlineKeyboardButton(text="üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"stars_pay_crypto_{amount}_{price}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")],
        ]
    )
    await message.answer(text, reply_markup=kb)
    await state.clear()

# --- –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –°–ë–ü ---
@router.callback_query(F.data.startswith("stars_pay_sbp_"))
async def stars_pay_sbp_menu(call: types.CallbackQuery, state: FSMContext):
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        parts = call.data.replace("stars_pay_sbp_", "").split("_")
        amount, price = int(parts[0]), int(parts[1])
        
        await state.update_data(stars_amount=amount, stars_price=price)
        
        text = (
            f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –∑–∞ {amount}‚≠ê</b>\n"
            f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code> (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
            f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"
        )
        
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data=f"stars_upload_receipt_{amount}_{price}")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")],
            ]
        )
        
        try:
            await call.message.delete()
        except:
            pass
            
        await call.message.answer(text, reply_markup=kb)
        
    except Exception as e:
        logging.error(f"Error in stars_pay_sbp_menu: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data.startswith("stars_upload_receipt_"))
async def stars_upload_receipt_start(call: types.CallbackQuery, state: FSMContext):
    try:
        if getattr(call, 'message', None) and hasattr(call.message, "delete"):
            await call.message.delete()
    except Exception:
        pass
    
    parts = call.data.replace("stars_upload_receipt_", "").split("_")
    amount, price = int(parts[0]), int(parts[1])
    await state.update_data(stars_amount=amount, stars_price=price)
    
    text = (
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º (PDF —Ñ–æ—Ä–º–∞—Ç - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:\n\n"
        "‚ùó –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —á–µ–∫—É:\n"
        "- –§–æ—Ä–º–∞—Ç: PDF\n"
        "- –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 5MB\n"
        "- –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º"
    )
    
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"stars_pay_sbp_{amount}_{price}")],
        ]
    )
    
    if getattr(call, 'message', None) and hasattr(call.message, "answer"):
        await call.message.answer(text, reply_markup=kb)
    
    await state.set_state(StarsStates.waiting_receipt_pdf)

@router.message(StarsStates.waiting_receipt_pdf, F.document)
async def stars_handle_pdf_receipt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data or 'stars_amount' not in data or 'stars_price' not in data:
        await state.clear()
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        return
    
    amount = data['stars_amount']
    price = data['stars_price']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    file_name = message.document.file_name or ""
    if not file_name.lower().endswith('.pdf'):
        error_text = (
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–æ —É–∂–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º PDF.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."
        )
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/Black_Prince01")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"stars_pay_sbp_{amount}_{price}")],
            ]
        )
        await message.answer(error_text, reply_markup=kb)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if message.document.file_size > 5 * 1024 * 1024:
        error_text = (
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —á–µ–∫.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:"
        )
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/support_username")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"stars_pay_sbp_{amount}_{price}")],
            ]
        )
        await message.answer(error_text, reply_markup=kb)
        return
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await state.update_data(
        receipt_file_id=message.document.file_id,
        receipt_file_name=file_name or "receipt.pdf"
    )
    
    text = (
        f"‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∑–∞ {amount}‚≠êÔ∏è!\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n"
        "- –ù–∞–ø–∏—à–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–º–Ω–µ', –µ—Å–ª–∏ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –¥–ª—è —Å–µ–±—è"
    )
    
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"stars_upload_receipt_{amount}_{price}")],
        ]
    )
    
    await message.answer(text, reply_markup=kb)
    await state.set_state(StarsStates.waiting_recipient)

@router.message(StarsStates.waiting_receipt_pdf, ~F.document)
async def stars_handle_wrong_receipt_format(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != StarsStates.waiting_receipt_pdf:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    data = await state.get_data()
    if not data or 'stars_amount' not in data or 'stars_price' not in data:
        await state.clear()
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        return

    amount = data['stars_amount']
    price = data['stars_price']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel
    if message.text and message.text.strip() == '/cancel':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_inline_kb())
        return

    error_text = (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–æ —É–∂–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º PDF.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/Black_Prince01")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"stars_pay_sbp_{amount}_{price}")],
        ]
    )

    await message.answer(error_text, reply_markup=kb)
    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è PDF –¥–ª—è Stars - —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∏–∂–µ

@router.message(StarsStates.waiting_recipient)
async def stars_process_recipient(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    recipient_raw = (message.text or '').strip().lower()

    if recipient_raw == "–º–Ω–µ":
        recipient = f"@{message.from_user.username or message.from_user.id}"
    else:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        username = recipient_raw.lstrip('@')
        recipient = f"@{username}"
    
    # –ü–æ–ª—É—á–∞–µ–º database ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = get_user_profile(message.from_user.id)
    if not user_profile:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order_id = create_order(
        user_id=user_profile['id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º database ID
        order_type="stars",
        amount=data.get('stars_price', 0),
        status="pending",
        file_id=data.get('receipt_file_id'),
        extra_data={
            "amount": data.get('stars_amount', 0),
            "recipient": recipient
        }
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    order_info = (
        f"‚ú® <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ù–ê –ó–í–Å–ó–î–´</b> ‚ú®\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{message.from_user.username or message.from_user.id}\n"
        f"üÜî <b>ID:</b> <code>{message.from_user.id}</code>\n"
        f"üì© <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient}\n"
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:</b> <b>{data.get('stars_amount', '?')} ‚≠ê</b>\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> <b>{data.get('stars_price', '?')}‚ÇΩ</b>\n"
        f"‚è±Ô∏è <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"üìå <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>\n\n"
        f"#–∑–≤—ë–∑–¥—ã #{str(order_id).replace('-', '') if order_id else ''}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"order_pay_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject_{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_delete_{order_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞–º
    try:
        for admin_id in ADMINS:
            try:
                if data.get('receipt_file_id'):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —á–µ–∫–æ–º
                    admin_msg = await message.bot.send_document(
                        chat_id=admin_id,
                        document=data.get('receipt_file_id'),
                        caption=order_info,
                        reply_markup=admin_kb,
                        parse_mode="HTML"
                    )
                else:
                    # –ï—Å–ª–∏ —á–µ–∫–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    admin_msg = await message.bot.send_message(
                        chat_id=admin_id,
                        text=order_info,
                        reply_markup=admin_kb,
                        parse_mode="HTML"
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞)
                if admin_id == ADMINS[0]:
                    update_order_status(order_id, admin_msg_id=admin_msg.message_id)
                
            except Exception as admin_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É {admin_id}: {admin_error}")
                continue

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_inline_kb()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –∑–≤—ë–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —á–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–≤—ë–∑–¥—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üõçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
            [types.InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# --- –ö–Ω–æ–ø–∫–∞ "–¥—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–∞" —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ ---

def setup_routers(dp):
    dp.include_router(support.router)
    dp.include_router(admin_settings.router)
    dp.include_router(slot_machine.router)
    dp.include_router(activity_router)
    dp.include_router(debug.router)
    # ... –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã ...

@router.callback_query(lambda c: c.data.startswith("withdraw_pay_"))
async def withdraw_pay(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        withdrawal_id = int(parts[2])
        user_id = int(parts[3])
        amount = float(parts[4])
        final_amount = float(parts[5])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    from app.database.models import update_withdrawal_status, get_user_profile_by_id, unfreeze_balance
    update_withdrawal_status(withdrawal_id, 'done')
    # –ü–æ–ª—É—á–∞–µ–º tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = get_user_profile_by_id(user_id)
    tg_id = user_profile['tg_id'] if user_profile else user_id
    # –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ (–æ–Ω–∏ —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏)
    unfreeze_balance(tg_id, amount)
    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(tg_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f}‚ÇΩ –≤—ã–ø–ª–∞—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞!")
    except Exception:
        pass
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@router.callback_query(F.data == "admin_withdrawals")
async def admin_withdrawals_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∫–æ–º–∏—Å—Å–∏–µ–π"""
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    withdrawals = get_all_pending_withdrawals()
    
    if not withdrawals:
        text = "üìã **–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤** üìã\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥."
    else:
        text = "üìã **–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤** üìã\n\n"
        
        for withdrawal in withdrawals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            withdrawal_id, user_id, amount, status, created_at, requisites, type, extra = withdrawal
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_profile = get_user_profile_by_id(user_id)
            if not user_profile:
                continue
            
            tg_id, full_name, username = user_profile['tg_id'], user_profile['full_name'], user_profile['username']
            
            # –ü–∞—Ä—Å–∏–º extra –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
            commission = 0
            final_amount = amount
            commission_percent = 3.0
            
            if extra:
                try:
                    extra_data = json.loads(extra)
                    commission = extra_data.get('commission', 0)
                    final_amount = extra_data.get('final_amount', amount)
                    commission_percent = extra_data.get('commission_percent', 3.0)
                except:
                    pass
            
            text += (
                f"üÜî **ID:** {withdrawal_id}\n"
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {full_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üí≥ **–°—É–º–º–∞:** {amount}‚ÇΩ\n"
                f"üí∏ **–ö–æ–º–∏—Å—Å–∏—è:** {commission:.2f}‚ÇΩ ({commission_percent}%)\n"
                f"‚úÖ **–ö –≤—ã–ø–ª–∞—Ç–µ:** {final_amount:.2f}‚ÇΩ\n"
                f"üìã **–†–µ–∫–≤–∏–∑–∏—Ç—ã:** {requisites[:50]}{'...' if len(requisites) > 50 else ''}\n"
                f"üìÖ **–î–∞—Ç–∞:** {created_at}\n"
                f"üîó **–î–µ–π—Å—Ç–≤–∏—è:** [–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å](withdraw_pay_{withdrawal_id}_{tg_id}_{amount}_{final_amount:.2f}) | [–û—Ç–∫–ª–æ–Ω–∏—Ç—å](withdraw_reject_{withdrawal_id}_{tg_id}_{amount})\n\n"
            )
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_withdrawals")],
                [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="admin_clear_withdrawals")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
        )
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        print(f"Error in admin_withdrawals_callback: {e}")

@router.callback_query(F.data == "admin_clear_withdrawals")
async def admin_clear_withdrawals_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_clear_withdrawals_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await callback.message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∏ –æ–±–Ω—É–ª–∏—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?", reply_markup=kb)

@router.callback_query(F.data == "admin_clear_withdrawals_confirm")
async def admin_clear_withdrawals_confirm_callback(callback: types.CallbackQuery):
    from app.database.models import clear_all_withdrawals_and_frozen
    clear_all_withdrawals_and_frozen()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await callback.message.edit_text("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—á–∏—â–µ–Ω—ã.", reply_markup=kb)

@router.callback_query(F.data.startswith("order_pay_"))
async def order_pay(callback: types.CallbackQuery):
    import datetime
    try:
        order_id = int(callback.data.split("_")[2])
        from app.database.models import get_order_by_id, update_order_status
        order = get_order_by_id(order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        confirm_time = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        update_order_status(
            order_id=order_id,
            status="completed",
            extra_data=json.dumps({
                **json.loads(order['extra_data'] if order['extra_data'] else {}),
                "confirmed_at": confirm_time,
                "confirmed_by": f"@{callback.from_user.username or callback.from_user.id}"
            })
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞
        order_type = order['order_type']

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –Ω–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤)
        if order_type != "withdraw":
            try:
                from app.utils.misc import process_referral_bonus
                await process_referral_bonus(callback.bot, order['user_id'], order['amount'], order_type, order_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.database.models import get_user_profile_by_id
            user_profile = get_user_profile_by_id(order['user_id'])
            if user_profile:
                tg_id = user_profile['tg_id']
                message_text = ""

                if order_type == "premium":
                    message_text = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ Premium –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}"
                elif order_type == "stars":
                    message_text = f"‚úÖ –í–∞—à–∏ –∑–≤—ë–∑–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}"
                elif order_type == "crypto":
                    message_text = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}"
                elif order_type == "withdraw":
                    message_text = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}"
                elif order_type == "activity_stars":
                    message_text = f"‚úÖ –í–∞—à–∏ –∑–≤—ë–∑–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω—ã!\n–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}"
                elif order_type == "activity_ton":
                    message_text = f"‚úÖ –í–∞—à–∏ TON –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω—ã!\n–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}"

                if message_text:
                    await callback.bot.send_message(tg_id, message_text)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            new_text = (
                f"\n\n‚úÖ –ó–ê–ö–ê–ó #{order_id} –í–´–ü–û–õ–ù–ï–ù\n"
                f"–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{callback.from_user.username or callback.from_user.id}"
            )
            
            if callback.message.caption:
                await callback.message.edit_caption(
                    caption=callback.message.caption + new_text,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                )
            elif callback.message.text:
                await callback.message.edit_text(
                    text=callback.message.text + new_text,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                )
            else:
                await callback.message.answer(new_text)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ order_pay: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("order_reject_"))
async def order_reject(callback: types.CallbackQuery):
    import datetime
    try:
        order_id = int(callback.data.split("_")[2])
        from app.database.models import get_order_by_id, update_order_status
        order = get_order_by_id(order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        update_order_status(
            order_id=order_id,
            status="rejected",
            extra_data=json.dumps({
                **json.loads(order['extra_data'] if order['extra_data'] else {}),
                "rejected_at": datetime.datetime.now().strftime('%H:%M %d.%m.%Y'),
                "rejected_by": f"@{callback.from_user.username or callback.from_user.id}"
            })
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.database.models import get_user_profile_by_id
            user_profile = get_user_profile_by_id(order['user_id'])
            if user_profile:
                tg_id = user_profile['tg_id']
                order_type = order['order_type']
                reject_time = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')

                # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                if order_type == "withdraw":
                    from app.database.models import unfreeze_balance
                    unfreeze_balance(tg_id, order['amount'])
                    message_text = f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {order['amount']:.2f}‚ÇΩ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_time}\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
                else:
                    message_text = f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_time}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

                await callback.bot.send_message(tg_id, message_text, parse_mode="HTML")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            reject_time = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')
            new_text = (
                f"\n\n‚ùå –ó–ê–ö–ê–ó #{order_id} –û–¢–ö–õ–û–ù–Å–ù\n"
                f"–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_time}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{callback.from_user.username or callback.from_user.id}"
            )

            if hasattr(callback.message, 'text'):
                await callback.message.edit_text(
                    f"{callback.message.text}{new_text}",
                    reply_markup=None,  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer(new_text, parse_mode="HTML")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ order_reject: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("order_delete_"))
async def order_delete(callback: types.CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã
        from app.database.models import delete_order
        delete_order(order_id)
        
        await callback.answer("üóë –ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω")
        await callback.message.delete()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ù–æ–≤—ã–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—è–≤–æ–∫
@router.callback_query(lambda c: c.data.startswith("admin_orders"))
async def admin_orders_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    from app.database.models import get_all_orders, get_all_reviews
    import json
    
    orders = get_all_orders()
    reviews = get_all_reviews()
    
    if not orders and not reviews:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
        ])
        await callback.message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=kb)
        return
    
    text = "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–∑—ã–≤—ã:</b>\n\n"
    
    # –ó–∞–∫–∞–∑—ã
    if orders:
        text += "üõçÔ∏è <b>–ó–ê–ö–ê–ó–´:</b>\n"
        type_icons = {"premium": "‚≠êÔ∏è", "stars": "üåü", "crypto": "ü¶ô", "withdraw": "üí∏"}
        for order in orders:
            order_id, user_id, order_type, amount, status, created_at, file_id, extra_data, admin_msg_id = order
            icon = type_icons.get(order_type, "‚ùî")
            status_emoji = {"pending": "‚è≥", "completed": "‚úÖ", "rejected": "‚ùå"}
            status_icon = status_emoji.get(status, "‚ùî")
            
            text += f"{icon} <b>–ó–∞–∫–∞–∑ #{order_id}</b> {status_icon}\n"
            text += f"üë§ ID: <code>{user_id}</code>\n"
            try:
                amount_f = float(amount)
                text += f"üí∞ –°—É–º–º–∞: <b>{amount_f:.2f}‚ÇΩ</b>\n"
            except Exception:
                text += f"üí∞ –°—É–º–º–∞: <b>{amount}‚ÇΩ</b>\n"
            text += f"üì¶ –¢–∏–ø: {order_type}\n"
            if extra_data:
                try:
                    extra = json.loads(extra_data)
                    if order_type == 'premium':
                        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {extra.get('period','?')}\n"
                        text += f"üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {extra.get('recipient','?')}\n"
                    elif order_type == 'stars':
                        text += f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {extra.get('amount','?')}\n"
                        text += f"üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {extra.get('recipient','?')}\n"
                    elif order_type == 'crypto':
                        text += f"ü¶ô –ú–æ–Ω–µ—Ç–∞: {extra.get('coin','?')}\n"
                        text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {extra.get('amount','?')}\n"
                        text += f"üè¶ –ö–æ—à–µ–ª—ë–∫: {extra.get('wallet','?')}\n"
                    elif order_type == 'withdraw':
                        text += f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {extra.get('requisites','?')}\n"
                except Exception:
                    pass
            text += f"‚è∞ –í—Ä–µ–º—è: {created_at}\n\n"
    
    # –û—Ç–∑—ã–≤—ã
    if reviews:
        text += "üìù <b>–û–¢–ó–´–í–´:</b>\n"
        for review in reviews:
            review_id, user_id, content, status, created_at, file_id, admin_msg_id, channel_msg_id = review
            status_emoji = {"pending": "‚è≥", "published": "‚úÖ", "rejected": "‚ùå"}
            status_icon = status_emoji.get(status, "‚ùî")
            
            text += f"üìù <b>–û—Ç–∑—ã–≤ #{review_id}</b> {status_icon}\n"
            text += f"üë§ ID: <code>{user_id}</code>\n"
            text += f"üìÑ –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {created_at}\n\n"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data == "admin_clear_orders")
async def admin_clear_orders_callback(callback: types.CallbackQuery):
    await callback.message.delete()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_clear_orders_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await callback.message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–∑—ã–≤—ã?", reply_markup=kb)

@router.callback_query(F.data == "admin_clear_orders_confirm")
async def admin_clear_orders_confirm_callback(callback: types.CallbackQuery):
    from app.database.models import clear_all_orders, clear_all_reviews
    clear_all_orders()
    clear_all_reviews()
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await callback.message.edit_text("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–∑—ã–≤—ã –æ—á–∏—â–µ–Ω—ã.", reply_markup=kb)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def send_to_admins(bot, text, reply_markup=None, parse_mode=None, document=None, document_caption=None):
    admin_ids = ADMINS
    results = []
    for admin_id in admin_ids:
        try:
            if document:
                msg = await bot.send_document(admin_id, document, caption=document_caption, reply_markup=reply_markup)
            else:
                msg = await bot.send_message(admin_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
            results.append((admin_id, msg.message_id))
        except Exception as e:
            import logging
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    return results

# –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∏–∂–µ

@router.callback_query(lambda c: c.data.startswith('stars_pay_sbp_'), StarsStates.waiting_receipt_pdf)
async def back_from_stars_receipt_pdf(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º amount –∏ price –∏–∑ callback_data
    parts = callback.data.replace("stars_pay_sbp_", "").split("_")
    amount, price = int(parts[0]), int(parts[1])

    await state.clear()
    await callback.message.delete()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    text = (
        f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –∑–∞ {amount} –∑–≤–µ–∑–¥</b>\n"
        f"–ü–æ –Ω–æ–º–µ—Ä—É: <code>+79912148689</code>\n"
        f"–ë–∞–Ω–∫: <i>–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</i>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫"
    )

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫", callback_data=f"stars_upload_receipt_{amount}_{price}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stars")],
        ]
    )

    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

# –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—à–µ (—Å—Ç—Ä–æ–∫–∞ 783)

# –î—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ crypto_confirm —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

@router.message(Command("cancel"), 
        StateFilter(
        PremiumStates.waiting_receipt_pdf,
        StarsStates.waiting_receipt_pdf, 
        CryptoPayStates.waiting_receipt_pdf
    )
)
async def cancel_receipt_upload(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_inline_kb()
    )
    


async def check_subscription_required(user_id: int, bot) -> bool:
    from app.config_flags import proverka
    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if not proverka:
        return True
        
    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status not in ['left', 'kicked']
    except Exception:
        return False

# –í –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ (crypto_menu, stars_menu, tg_premium_menu) –¥–æ–±–∞–≤—å:
# if not await check_subscription_required(call.from_user.id, call.bot):
#     await show_subscription_message(call, call.bot)
#     return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –∑–∞—è–≤–∫–∏"
@router.callback_query(F.data == "admin_orders_0")
async def admin_orders_first(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—Å—Ç–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞—è–≤–æ–∫
@router.callback_query(F.data.startswith("admin_orders_page:"))
async def admin_orders_page_callback(callback: types.CallbackQuery):
    page = int(callback.data.split(":")[1])
    await callback.message.delete()
    await render_orders_page(callback, page)

async def render_orders_page(callback, page: int):
    from app.database.models import get_all_orders
    orders = get_all_orders()
    per_page = 5
    total_orders = len(orders)
    total_pages = (total_orders + per_page - 1) // per_page
    
    if page < 0 or page >= total_pages:
        await callback.bot.send_message(callback.from_user.id, f"‚ùóÔ∏è –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}.")
        return
        
    start = page * per_page
    end = start + per_page
    orders_page = orders[start:end]
    
    text = f"<b>–ó–ê–Ø–í–ö–ò (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages}):</b>\n\n"
    status_emoji = {"pending": "‚è≥", "completed": "‚úÖ", "rejected": "‚ùå"}
    type_icons = {"premium": "‚≠êÔ∏è", "stars": "üåü", "crypto": "ü¶ô", "withdraw": "üí∏", "slot_win": "üé∞", "activity_reward": "üéÅ"}
    
    for order in orders_page:
        order_id, user_id, order_type, amount, status, created_at, file_id, extra_data, admin_msg_id = order
        icon = type_icons.get(order_type, "‚ùî")
        stat = status_emoji.get(status, "‚ùî")
        
        text += f"{icon} –ó–ê–ö–ê–ó #{order_id} {stat}\nID: {user_id}\n"
        
        try:
            amount_f = float(amount)
            text += f"üí∞ –°—É–º–º–∞: {amount_f:.2f}‚ÇΩ\n"
        except Exception:
            text += f"üí∞ –°—É–º–º–∞: {amount}\n"
            
        text += f"üìä –¢–∏–ø: {order_type}\n"
        
        try:
            extra = json.loads(order['extra_data']) if order['extra_data'] else {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            if order['status'] == 'completed' and 'confirmed_at' in extra:
                text += f"üïí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {extra['confirmed_at']}\n"
                
        except json.JSONDecodeError:
            pass
                
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞...
            if order_type == 'premium':
                if 'period' in extra:
                    text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {extra.get('period','-')}\n"
                if 'recipient' in extra:
                    text += f"üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {extra.get('recipient','-')}\n"
            elif order_type == 'stars':
                if 'amount' in extra:
                    text += f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {extra.get('amount','-')}\n"
                if 'recipient' in extra:
                    text += f"üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {extra.get('recipient','-')}\n"
            elif order_type == 'crypto':
                if 'coin' in extra:
                    text += f"ü¶ô –ú–æ–Ω–µ—Ç–∞: {extra.get('coin','-')}\n"
                if 'amount' in extra:
                    text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {extra.get('amount','-')}\n"
                if 'wallet' in extra:
                    text += f"üè¶ –ö–æ—à–µ–ª—ë–∫: {extra.get('wallet','-')}\n"
            elif order_type == 'withdraw':
                if 'requisites' in extra:
                    text += f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {extra.get('requisites','-')}\n"
                    
        except Exception as e:
            logging.warning(f"[render_orders_page] extra_data parse error: {e}")
            
        text += f"‚è∞ –°–æ–∑–¥–∞–Ω: {created_at}\n\n"
        
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_orders_page:{page-1}"))
    if (page + 1) < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_orders_page:{page+1}"))
    nav_buttons.append(InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="admin_panel"))
    
    kb = InlineKeyboardMarkup(inline_keyboard=[nav_buttons])
    await callback.bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=kb)

@router.message(Command("clear_calendar"))
async def clear_calendar_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    from app.database.models import clear_all_calendar_data
    clear_all_calendar_data()
    await message.answer("‚úÖ –í—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—á–∏—â–µ–Ω–∞ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–∞–∫ –Ω–æ–≤—ã–µ!")

@router.callback_query(F.data == "check_subscription_2")
async def check_subscription_handler_2(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await main_menu_handler(callback)

# ===== –§–£–ù–ö–¶–ò–ò –ë–ï–ó –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô (–î–õ–Ø –†–ê–°–°–´–õ–ö–ò) =====

async def stars_menu_no_delete(call: types.CallbackQuery):
    """–ú–µ–Ω—é –∑–≤–µ–∑–¥ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription_required(call.from_user.id, call.bot):
        await show_subscription_message(call, call.bot)
        return

    stars_photo = get_admin_setting('stars_photo', 'https://imgur.com/a/0Tx7psa.jpeg')
    stars_description = get_admin_setting('stars_description', '''
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–≥—Ä–∞–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Å–µ–±—è.

‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üîí –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ª–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.
''')
    if not stars_description:
        stars_description = '''
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–≥—Ä–∞–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Å–µ–±—è.

‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üîí –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ª–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.
'''
    kb = stars_menu_inline_kb()
    await call.message.answer_photo(
        photo=stars_photo,
        caption=stars_description,
        reply_markup=kb,
        parse_mode="HTML"
    )

async def reviews_menu_no_delete(call: types.CallbackQuery, bot: Bot):
    """–ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    if not await check_subscription(call.from_user.id, bot):
        await show_subscription_message(call, bot)
        return

    try:
        reviews_photo = "https://imgur.com/a/5cDMyX0.jpeg"
        reviews_text = (
    "üåü –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üåü\n\n"
    "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º! "
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ LegalStars. "
    "–í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å!\n\n"
    "üí¨ –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤!\n\n"
    "–í–∞—à –æ–ø—ã—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. "
    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥, –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è "
    "–∏ –æ–±—â–µ–º –æ–ø—ã—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º."
)

        try:
            await call.message.answer_photo(
                photo=reviews_photo,
                caption=reviews_text,
                reply_markup=reviews_menu_inline_kb(),
                parse_mode="HTML"
            )
        except Exception as e:
            await call.message.answer(
                reviews_text,
                reply_markup=reviews_menu_inline_kb(),
                parse_mode="HTML"
            )

        await call.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reviews_menu_no_delete: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def tg_premium_menu_no_delete(call: types.CallbackQuery):
    """–ú–µ–Ω—é Telegram Premium –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    from app.config_flags import proverka
    if proverka and not await check_subscription(call.from_user.id, call.bot):
        await show_subscription_message(call, call.bot)
        return

    premium_photo = get_admin_setting('premium_photo', 'https://imgur.com/a/VJU8JNk.jpeg')
    premium_description = get_admin_setting('premium_description', 'üíé Telegram Premium ‚Äî —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç Telegram, –¥–∞—é—â–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:')
    kb = premium_menu_inline_kb()
    await call.message.answer_photo(
        photo=premium_photo,
        caption=premium_description,
        reply_markup=kb
    )

async def crypto_menu_no_delete(call: types.CallbackQuery):
    """–ú–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    from app.config_flags import proverka
    if proverka and not await check_subscription(call.from_user.id, call.bot):
        await show_subscription_message(call, call.bot)
        return

    crypto_photo = get_admin_setting('crypto_photo', 'https://imgur.com/a/3ZZOHNJ.jpeg')
    crypto_description = get_admin_setting('crypto_description', '–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑–∞ —Ä—É–±–ª–∏!\n\n–õ–µ–≥–∫–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–¥–µ–ª–∞–µ–º –º—ã –∑–∞ –≤–∞—Å.\n\nüîê –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.');
    kb = crypto_menu_inline_kb()
    await call.message.answer_photo(
        photo=crypto_photo,
        caption=crypto_description,
        reply_markup=kb
    )

async def activity_menu_from_main_no_delete(call: types.CallbackQuery, bot: Bot):
    """–ú–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not await check_subscription(call.from_user.id, bot):
        await show_subscription_message(call, bot)
        return

    try:
        user_id = call.from_user.id
        current_date = datetime.datetime.now().date()

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é –∏–∑ –ë–î
        from app.database.models import get_user_activity_streak
        streak = get_user_activity_streak(user_id)

        text = (
            "<b>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
            "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–∞ –∏ –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n"
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ä—è–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 14 –∏–ª–∏ 20 –¥–Ω–µ–π), –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –±–æ–Ω—É—Å.\n"
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å, –µ–≥–æ \"—Ü–µ–ø–æ—á–∫–∞\" –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è ‚Äî —Å—á–µ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω—É–ª—é.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª 20 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –∞ –Ω–∞ 21-–π –¥–µ–Ω—å –Ω–µ –∑–∞—à–µ–ª ‚Äî –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ –Ω—É–ª—è.\n\n"
            f"<b>üî• –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {streak} –¥–Ω–µ–π\n"
            f"üìå <b>–°–µ–≥–æ–¥–Ω—è:</b> {current_date.strftime('%d.%m.%Y')}"
        )

        await call.message.answer(
            text,
            reply_markup=activity_calendar_kb(),
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ activity_menu_no_delete: {str(e)}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def profile_menu_no_delete(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if await check_blacklist_and_respond(call.from_user.id, call):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    if not await check_subscription(call.from_user.id, bot):
        await show_subscription_message(call, bot)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_profile(call.from_user.id)
        if not user:
            await call.message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=main_menu_inline_kb()
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        balance = float(user['balance'] or 0)
        frozen = float(user['frozen'] or 0)
        reg_date = user['reg_date'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        profile_description = get_admin_setting('profile_description', 'üöÄ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –±–∞–ª–∞–Ω—Å–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.')
        profile_photo = get_admin_setting('profile_photo', 'https://imgur.com/a/TkOPe7c.jpeg')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            f"{profile_description}\n\n"
            f"üÜî <b>ID:</b> <a href='tg://user?id={user['tg_id']}'>{user['tg_id']}</a>\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.2f}‚ÇΩ\n"
            f"‚ùÑÔ∏è <b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {frozen:.2f}‚ÇΩ\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if ref_active:
            from app.database.models import get_unclaimed_referrals_count

            referrals = get_referrals_count(user['tg_id'])
            bot_username = (await bot.me()).username
            ref_link = f"https://t.me/{bot_username}?start=ref_{user['tg_id']}"

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            try:
                unclaimed_count = await get_unclaimed_referrals_count(user['id'])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
                unclaimed_count = 0

            text += (
                f"\nüë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> {referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"üéÅ <b>–ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:</b> {unclaimed_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                f"üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n"
            )

            if unclaimed_count > 0:
                text += f"\nüí° –£ –≤–∞—Å –µ—Å—Ç—å {unclaimed_count} –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤! –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∏—Ö –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞",
                        callback_data="withdraw"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="main_menu"
                    )
                ]
            ]
        )

        # –ù–ï —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await call.message.answer_photo(
            photo=profile_photo,
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ profile_menu_no_delete {call.from_user.id}: {e}")
        await call.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_inline_kb()
        )

def get_main_greeting(user):
    user_name = user.full_name or user.username or f"ID: {user.id}" if user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    return f"<b>{user_name}</b>, –î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Legal Stars!‚ú®"