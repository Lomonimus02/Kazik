#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
"""
import asyncio
import aiosqlite
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.handlers.user import is_blacklisted, add_to_blacklist, remove_from_blacklist

async def test_blacklist():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    test_user_id = 123456789
    test_reason = "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ß–°
    result = await is_blacklisted(test_user_id)
    print(f"1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –≤ –ß–°: {result}")
    assert result is None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ß–° –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –ß–°
    await add_to_blacklist(test_user_id, test_reason)
    print(f"2. –î–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id} –≤ –ß–° —Å –ø—Ä–∏—á–∏–Ω–æ–π: {test_reason}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –≤ –ß–°
    result = await is_blacklisted(test_user_id)
    print(f"3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –≤ –ß–°: {result}")
    assert result == test_reason, f"–û–∂–∏–¥–∞–ª–∏ '{test_reason}', –ø–æ–ª—É—á–∏–ª–∏ '{result}'"
    
    # 4. –£–¥–∞–ª—è–µ–º –∏–∑ –ß–°
    await remove_from_blacklist(test_user_id)
    print(f"4. –£–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id} –∏–∑ –ß–°")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –≤ –ß–°
    result = await is_blacklisted(test_user_id)
    print(f"5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –≤ –ß–°: {result}")
    assert result is None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

async def test_blacklist_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞...")
    
    async with aiosqlite.connect('data/blacklist.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor = await db.execute("PRAGMA table_info(blacklist)")
        columns = await cursor.fetchall()
        
        expected_columns = ['tg_id', 'reason', 'date_added']
        actual_columns = [col[1] for col in columns]
        
        print(f"–°—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ blacklist: {actual_columns}")
        
        for col in expected_columns:
            assert col in actual_columns, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü: {col}"
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await test_blacklist()
        await test_blacklist_database()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        return 1
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
