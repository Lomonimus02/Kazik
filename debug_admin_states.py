#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""
import asyncio
import logging
from unittest.mock import AsyncMock, MagicMock
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def test_admin_states():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    try:
        from app.handlers.admin_settings import (
            admin_referral_percents_menu, 
            admin_slot_tickets_menu,
            process_referral_username,
            process_ticket_username,
            AdminSettingStates
        )
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    storage = MemoryStorage()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    print("\nüìã –¢–µ—Å—Ç 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
    try:
        callback = AsyncMock()
        callback.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
        callback.message = AsyncMock()
        callback.message.answer = AsyncMock()
        
        state = AsyncMock()
        state.set_state = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º is_admin
        import app.handlers.admin_settings
        original_is_admin = app.handlers.admin_settings.is_admin
        app.handlers.admin_settings.is_admin = lambda x: True
        
        await admin_referral_percents_menu(callback, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        state.set_state.assert_called_once_with(AdminSettingStates.waiting_for_referral_username)
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        app.handlers.admin_settings.is_admin = original_is_admin
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–∏–ª–µ—Ç–∏–∫–æ–≤
    print("\nüé´ –¢–µ—Å—Ç 2: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏–ª–µ—Ç–∏–∫–æ–≤")
    try:
        callback = AsyncMock()
        callback.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
        callback.message = AsyncMock()
        callback.message.edit_text = AsyncMock()
        callback.answer = AsyncMock()
        
        state = AsyncMock()
        state.set_state = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º is_admin
        import app.handlers.admin_settings
        original_is_admin = app.handlers.admin_settings.is_admin
        app.handlers.admin_settings.is_admin = lambda x: True
        
        await admin_slot_tickets_menu(callback, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        state.set_state.assert_called_once_with(AdminSettingStates.waiting_for_ticket_username)
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∏–ª–µ—Ç–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        app.handlers.admin_settings.is_admin = original_is_admin
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∏–ª–µ—Ç–∏–∫–æ–≤: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\nüí¨ –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    try:
        message = AsyncMock()
        message.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
        message.text = "testuser"
        message.answer = AsyncMock()
        
        state = AsyncMock()
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import app.handlers.admin_settings
        original_is_admin = app.handlers.admin_settings.is_admin
        original_get_user = app.handlers.admin_settings.get_user_by_username
        
        app.handlers.admin_settings.is_admin = lambda x: True
        app.handlers.admin_settings.get_user_by_username = lambda x: {
            'id': 123,
            'tg_id': 123456789,
            'username': 'testuser',
            'full_name': 'Test User',
            'referral_percent': 5.0
        }
        
        await process_referral_username(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        state.update_data.assert_called_once()
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        app.handlers.admin_settings.is_admin = original_is_admin
        app.handlers.admin_settings.get_user_by_username = original_get_user
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(test_admin_states())
