#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
"""
import asyncio
import os
import sys
import json
import datetime
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath('.'))

from app.database.models import (
    get_or_create_user, get_user_profile, get_user_profile_by_id,
    create_order, get_order_by_id, update_order_status,
    get_slot_configs, get_user_slot_spins, use_slot_spin, reset_slot_spins,
    get_admin_setting, update_admin_setting
)

def test_user_lifecycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_tg_id = 999100
        user_data = get_or_create_user(test_tg_id, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¢–µ—Å—Ç", "integration_test", "2024-01-01", None)
        print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user_data}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = get_user_profile(test_tg_id)
        if profile:
            print(f"  ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: ID {profile['id']}, –∏–º—è {profile['full_name']}")
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            order_id = create_order(
                user_id=profile['id'],
                order_type="stars",
                amount=50.0,
                status="pending",
                extra_data={"recipient": "test_user", "message": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥"}
            )
            
            if order_id:
                print(f"  ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID {order_id}")
                
                # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
                order = get_order_by_id(order_id)
                if order:
                    print(f"  ‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: {order['order_type']} –Ω–∞ {order['amount']}‚ÇΩ")
                    
                    # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                    success = update_order_status(order_id, status="completed")
                    if success:
                        print(f"  ‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            
            # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
            spins_before = get_user_slot_spins(test_tg_id)
            if spins_before:
                print(f"  ‚úÖ –°–ø–∏–Ω—ã –¥–æ –∏–≥—Ä—ã: {spins_before[0]}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏–Ω
                use_slot_spin(test_tg_id)
                spins_after = get_user_slot_spins(test_tg_id)
                if spins_after and spins_after[0] > spins_before[0]:
                    print(f"  ‚úÖ –°–ø–∏–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {spins_after[0]}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏–Ω—ã
                reset_slot_spins(test_tg_id)
                print(f"  ‚úÖ –°–ø–∏–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        return False

def test_admin_workflow():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        settings_to_test = [
            'subscription_required_slot',
            'subscription_required_calendar', 
            'subscription_required_profile'
        ]
        
        original_values = {}
        for setting in settings_to_test:
            original_values[setting] = get_admin_setting(setting)
            print(f"  üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting}: {original_values[setting]}")
        
        # 2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        for setting in settings_to_test:
            new_value = not original_values[setting] if original_values[setting] is not None else True
            update_admin_setting(setting, new_value)
            updated_value = get_admin_setting(setting)
            if updated_value == new_value:
                print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –∏–∑–º–µ–Ω–µ–Ω–∞: {original_values[setting]} ‚Üí {new_value}")
        
        # 3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        for setting in settings_to_test:
            update_admin_setting(setting, original_values[setting])
            restored_value = get_admin_setting(setting)
            if restored_value == original_values[setting]:
                print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {restored_value}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        return False

def test_slot_machine_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    print("\nüé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã...")
    
    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        configs = get_slot_configs()
        if configs:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            for config in configs[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3
                config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = config
                print(f"  üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {name} ({combination}) - {reward_type} {reward_amount}, —à–∞–Ω—Å {chance_percent}%")
        
        # 3. –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ø–∏–Ω–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [999101, 999102, 999103]
        for user_id in test_users:
            spins_data = get_user_slot_spins(user_id)
            if spins_data:
                print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {spins_data[0]} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã: {e}")
        return False

def test_database_consistency():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_tg_id = 999200
        user_data = get_or_create_user(test_tg_id, "–¢–µ—Å—Ç –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", "consistency_test", "2024-01-01", None)
        profile = get_user_profile(test_tg_id)
        
        if profile:
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤
            order_types = ["premium", "crypto", "stars", "withdraw"]
            created_orders = []
            
            for order_type in order_types:
                order_id = create_order(
                    user_id=profile['id'],
                    order_type=order_type,
                    amount=random.uniform(10.0, 100.0),
                    status="pending"
                )
                if order_id:
                    created_orders.append(order_id)
            
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_orders)} –∑–∞–∫–∞–∑–æ–≤")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            for order_id in created_orders:
                order = get_order_by_id(order_id)
                if order and order['user_id'] == profile['id']:
                    print(f"  ‚úÖ –ó–∞–∫–∞–∑ {order_id} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {profile['id']}")
                else:
                    print(f"  ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–≤—è–∑–Ω–æ—Å—Ç—å—é –∑–∞–∫–∞–∑–∞ {order_id}")
                    return False
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ ID)
            user_by_id = get_user_profile_by_id(profile['id'])
            if user_by_id and user_by_id['tg_id'] == test_tg_id:
                print(f"  ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"  ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîó –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    tests = [
        ("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", test_user_lifecycle),
        ("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å", test_admin_workflow),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã", test_slot_machine_integration),
        ("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_consistency),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                failed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/(passed+failed)*100):.1f}%" if (passed+failed) > 0 else "0%")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í {failed} –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–ê–•!")
        return False

if __name__ == "__main__":
    success = run_integration_tests()
    if not success:
        sys.exit(1)
