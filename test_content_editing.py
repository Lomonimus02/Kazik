#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
"""

import asyncio
import sys
import os
import sqlite3
import tempfile
import shutil
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

from app.database.models import (
    get_admin_setting, update_admin_setting, get_all_admin_settings,
    init_database, get_db_connection
)

class TestContentEditing:
    def __init__(self):
        self.test_db_path = None
        self.original_db_path = None
        
    def setup_test_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        fd, self.test_db_path = tempfile.mkstemp(suffix='.db')
        os.close(fd)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
        import app.database.models as models
        self.original_db_path = models.DATABASE_PATH
        models.DATABASE_PATH = self.test_db_path
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        init_database()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.test_db_path}")
        
    def cleanup_test_database(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.test_db_path and os.path.exists(self.test_db_path):
            os.unlink(self.test_db_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.test_db_path}")
            
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
        if self.original_db_path:
            import app.database.models as models
            models.DATABASE_PATH = self.original_db_path

    def test_default_settings_exist(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã"""
        print("\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        expected_settings = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            'main_description', 'main_photo', 'main_title',
            'premium_description', 'premium_photo',
            'stars_description', 'stars_photo',
            'crypto_description', 'crypto_photo',
            'support_description', 'support_photo',
            'reviews_description', 'reviews_photo',
            'about_description', 'about_photo',
            # –ù–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            'profile_description', 'profile_photo',
            'slot_description', 'slot_photo',
            'calendar_description', 'calendar_photo',
            # –ö–Ω–æ–ø–∫–∏
            'btn_premium', 'btn_stars', 'btn_crypto', 'btn_support',
            'btn_profile', 'btn_reviews', 'btn_about', 'btn_activity', 'btn_slot'
        ]
        
        all_settings = get_all_admin_settings()
        existing_keys = [setting[1] for setting in all_settings]  # setting[1] = key
        
        missing_settings = []
        for setting in expected_settings:
            if setting not in existing_keys:
                missing_settings.append(setting)
        
        if missing_settings:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {missing_settings}")
            return False
        else:
            print(f"‚úÖ –í—Å–µ {len(expected_settings)} –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return True

    def test_content_editing_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("\nüß™ –¢–µ—Å—Ç: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        test_cases = [
            # (key, test_value, description)
            ('profile_description', 'üöÄ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'),
            ('profile_photo', 'https://test.com/profile.jpg', '–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è'),
            ('slot_description', 'üé∞ <b>–¢–µ—Å—Ç–æ–≤–∞—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ—Ç–∞.', '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã'),
            ('slot_photo', 'https://test.com/slot.jpg', '–§–æ—Ç–æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã'),
            ('calendar_description', 'üìÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n\n–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è'),
            ('calendar_photo', 'https://test.com/calendar.jpg', '–§–æ—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è'),
        ]
        
        success_count = 0
        
        for key, test_value, description in test_cases:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                original_value = get_admin_setting(key, 'default')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                update_admin_setting(key, test_value)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
                updated_value = get_admin_setting(key, 'default')
                
                if updated_value == test_value:
                    print(f"‚úÖ {description}: —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    success_count += 1
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    update_admin_setting(key, original_value)
                else:
                    print(f"‚ùå {description}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å (–æ–∂–∏–¥–∞–ª–æ—Å—å: {test_value}, –ø–æ–ª—É—á–µ–Ω–æ: {updated_value})")
                    
            except Exception as e:
                print(f"‚ùå {description}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return success_count == len(test_cases)

    def test_admin_ui_coverage(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –∞–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        print("\nüß™ –¢–µ—Å—Ç: –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –∞–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ–Ω—é
        sections_to_check = [
            ('profile', '–ü—Ä–æ—Ñ–∏–ª—å'),
            ('slot', '–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞'),
            ('calendar', '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
        ]
        
        success_count = 0
        
        for section, name in sections_to_check:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ–æ—Ç–æ
            description_key = f"{section}_description"
            photo_key = f"{section}_photo"
            
            description_exists = get_admin_setting(description_key, None) is not None
            photo_exists = get_admin_setting(photo_key, None) is not None
            
            if description_exists and photo_exists:
                print(f"‚úÖ {name}: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω—ã")
                success_count += 1
            else:
                missing = []
                if not description_exists:
                    missing.append("–æ–ø–∏—Å–∞–Ω–∏–µ")
                if not photo_exists:
                    missing.append("—Ñ–æ—Ç–æ")
                print(f"‚ùå {name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {', '.join(missing)}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(sections_to_check)} —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç—ã")
        return success_count == len(sections_to_check)

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        try:
            self.setup_test_database()
            
            tests = [
                self.test_default_settings_exist,
                self.test_content_editing_functionality,
                self.test_admin_ui_coverage
            ]
            
            passed_tests = 0
            total_tests = len(tests)
            
            for test in tests:
                try:
                    if test():
                        passed_tests += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            
            print(f"\nüèÅ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            
            if passed_tests == total_tests:
                print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                return True
            else:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
                return False
                
        finally:
            self.cleanup_test_database()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = TestContentEditing()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
        sys.exit(1)

if __name__ == "__main__":
    main()
