#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""
import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import types
from aiogram.fsm.context import FSMContext

@pytest.mark.asyncio
async def test_complete_admin_workflow():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from app.handlers.admin_settings import (
        admin_ui_photo_settings_menu,
        admin_setting_handler,
        process_setting_value,
        admin_referral_percents_menu,
        process_referral_username,
        process_referral_percent,
        admin_slot_tickets_menu,
        process_ticket_username,
        process_ticket_amount,
        AdminSettingStates
    )
    
    # === –¢–ï–°–¢ 1: –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û ===
    print("\nüì∏ –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π workflow –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
    
    # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ñ–æ—Ç–æ
    callback = AsyncMock()
    callback.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    callback.message = AsyncMock()
    callback.message.answer = AsyncMock()
    callback.answer = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True):
        await admin_ui_photo_settings_menu(callback)
        callback.message.answer.assert_called_once()
        print("  ‚úÖ –®–∞–≥ 1: –ú–µ–Ω—é —Ñ–æ—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ")
    
    # –®–∞–≥ 2: –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ
    callback.data = "admin_setting_main_photo"
    callback.message.edit_text = AsyncMock()
    state = AsyncMock()
    state.set_state = AsyncMock()
    state.update_data = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.get_admin_setting', return_value="current_photo"):
        
        await admin_setting_handler(callback, state)
        state.set_state.assert_called_with(AdminSettingStates.waiting_for_value)
        print("  ‚úÖ –®–∞–≥ 2: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    message = AsyncMock()
    message.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    message.photo = [
        types.PhotoSize(file_id="new_photo_id", file_unique_id="new", width=800, height=600, file_size=50000)
    ]
    message.text = None
    message.answer = AsyncMock()
    
    state.get_data.return_value = {
        'setting_key': 'main_photo',
        'prev_menu': 'admin_ui_photo_settings'
    }
    state.clear = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.update_admin_setting') as mock_update:
        
        await process_setting_value(message, state)
        mock_update.assert_called_once_with('main_photo', 'new_photo_id')
        state.clear.assert_called_once()
        print("  ‚úÖ –®–∞–≥ 3: –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    # === –¢–ï–°–¢ 2: –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–ê–ú–ò ===
    print("\nüë• –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π workflow —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏")
    
    # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    callback = AsyncMock()
    callback.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    callback.message = AsyncMock()
    callback.message.answer = AsyncMock()
    callback.answer = AsyncMock()
    
    state = AsyncMock()
    state.set_state = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True):
        await admin_referral_percents_menu(callback, state)
        state.set_state.assert_called_with(AdminSettingStates.waiting_for_referral_username)
        print("  ‚úÖ –®–∞–≥ 1: –ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –®–∞–≥ 2: –í–≤–æ–¥ username
    message = AsyncMock()
    message.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    message.text = "testuser"
    message.answer = AsyncMock()
    
    state.update_data = AsyncMock()
    state.set_state = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.get_user_by_username', return_value={
             'id': 123,
             'tg_id': 987654321,
             'username': 'testuser',
             'full_name': 'Test User',
             'referral_percent': 5.0
         }):
        
        await process_referral_username(message, state)
        state.update_data.assert_called_once()
        state.set_state.assert_called_with(AdminSettingStates.waiting_for_referral_percent)
        print("  ‚úÖ –®–∞–≥ 2: Username –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø—Ä–æ—Ü–µ–Ω—Ç–∞")
    
    # –®–∞–≥ 3: –í–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    message.text = "10.5"
    state.get_data.return_value = {
        'user_username': 'testuser'
    }
    state.update_data = AsyncMock()

    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.update_user_referral_percent_by_username', return_value=True) as mock_update_ref:

        await process_referral_percent(message, state)
        mock_update_ref.assert_called_once_with('testuser', 10.5)
        state.update_data.assert_called_once_with(current_percent=10.5)
        print("  ‚úÖ –®–∞–≥ 3: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # === –¢–ï–°–¢ 3: –í–´–î–ê–ß–ê –ë–ò–õ–ï–¢–ò–ö–û–í ===
    print("\nüé´ –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π workflow –≤—ã–¥–∞—á–∏ –±–∏–ª–µ—Ç–∏–∫–æ–≤")
    
    # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –±–∏–ª–µ—Ç–∏–∫–æ–≤
    callback = AsyncMock()
    callback.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    callback.message = AsyncMock()
    callback.message.edit_text = AsyncMock()
    callback.answer = AsyncMock()
    
    state = AsyncMock()
    state.set_state = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True):
        await admin_slot_tickets_menu(callback, state)
        state.set_state.assert_called_with(AdminSettingStates.waiting_for_ticket_username)
        print("  ‚úÖ –®–∞–≥ 1: –ú–µ–Ω—é –±–∏–ª–µ—Ç–∏–∫–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –®–∞–≥ 2: –í–≤–æ–¥ username –¥–ª—è –±–∏–ª–µ—Ç–∏–∫–æ–≤
    message = AsyncMock()
    message.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    message.text = "ticketuser"
    message.answer = AsyncMock()
    
    state.update_data = AsyncMock()
    state.set_state = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.get_user_by_username', return_value={
             'id': 456,
             'tg_id': 111222333,
             'username': 'ticketuser',
             'full_name': 'Ticket User'
         }):
        
        await process_ticket_username(message, state)
        state.update_data.assert_called_once()
        state.set_state.assert_called_with(AdminSettingStates.waiting_for_ticket_amount)
        print("  ‚úÖ –®–∞–≥ 2: Username –¥–ª—è –±–∏–ª–µ—Ç–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
    
    # –®–∞–≥ 3: –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–∏–∫–æ–≤
    message.text = "5"
    message.bot = AsyncMock()
    message.bot.send_message = AsyncMock()

    state.get_data.return_value = {
        'ticket_user_id': 111222333,
        'ticket_username': 'ticketuser',
        'ticket_full_name': 'Ticket User'
    }
    state.clear = AsyncMock()

    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.add_slot_attempts') as mock_add_attempts:

        mock_add_attempts.return_value = None  # async function
        await process_ticket_amount(message, state)
        mock_add_attempts.assert_called_once_with(111222333, 5)
        message.answer.assert_called()
        print("  ‚úÖ –®–∞–≥ 3: –ë–∏–ª–µ—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã")
    
    print("\nüéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç") 
    print("‚úÖ –í—ã–¥–∞—á–∞ –±–∏–ª–µ—Ç–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    asyncio.run(test_complete_admin_workflow())
