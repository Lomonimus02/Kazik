#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π
"""

import sqlite3
import os
import json
import sys

class CorrectedTestSuite:
    def __init__(self):
        self.db_path = "data/users.db"
        self.blacklist_db_path = "data/blacklist.db"
        self.passed_tests = 0
        self.total_tests = 0
        
    def log_test(self, test_name, passed, details=""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            print(f"‚úÖ {test_name}")
        else:
            print(f"‚ùå {test_name}")
        if details:
            print(f"   {details}")
    
    def test_slot_machine_fixes(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
        print("\nüé∞ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–¢-–ú–ê–®–ò–ù–´ ===")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É slot_config
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='slot_config'")
            table_exists = cursor.fetchone() is not None
            self.log_test("–¢–∞–±–ª–∏—Ü–∞ slot_config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", table_exists)
            
            if table_exists:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("PRAGMA table_info(slot_config)")
                columns = [col[1] for col in cursor.fetchall()]
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã slot_config", True, f"–ö–æ–ª–æ–Ω–∫–∏: {columns}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                cursor.execute("SELECT * FROM slot_config")
                configs = cursor.fetchall()
                self.log_test(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", len(configs) > 0, f"–ù–∞–π–¥–µ–Ω–æ {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ admin_settings.py
            admin_file = "app/handlers/admin_settings.py"
            if os.path.exists(admin_file):
                with open(admin_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                slot_handlers = [
                    'admin_slot_settings',
                    'slot_add_config',
                    'slot_list_configs'
                ]
                
                for handler in slot_handlers:
                    handler_exists = handler in content
                    self.log_test(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler}", handler_exists)
            
            conn.close()
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã", False, str(e))
    
    def test_blacklist_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        print("\nüö´ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            blacklist_exists = os.path.exists(self.blacklist_db_path)
            self.log_test("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", blacklist_exists)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ user.py
            user_file = "app/handlers/user.py"
            if os.path.exists(user_file):
                with open(user_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                blacklist_functions = [
                    'get_blacklist',
                    'add_to_blacklist',
                    'remove_from_blacklist',
                    'is_blacklisted'
                ]
                
                for func in blacklist_functions:
                    func_exists = func in content
                    self.log_test(f"–§—É–Ω–∫—Ü–∏—è {func}", func_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", False, str(e))
    
    def test_user_deletion(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüóëÔ∏è === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ user.py
            user_file = "app/handlers/user.py"
            if os.path.exists(user_file):
                with open(user_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                deletion_handlers = [
                    'delete_user',
                    'ask_user_to_delete',
                    'confirm_delete_user'
                ]
                
                for handler in deletion_handlers:
                    handler_exists = handler in content
                    self.log_test(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler}", handler_exists)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ models.py
            models_file = "app/database/models.py"
            if os.path.exists(models_file):
                with open(models_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                delete_function_exists = 'delete_user_everywhere_full' in content
                self.log_test("–§—É–Ω–∫—Ü–∏—è delete_user_everywhere_full", delete_function_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", False, str(e))
    
    def test_ticket_management(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –∏ —Ç–∏–∫–µ—Ç–∞–º–∏"""
        print("\nüé´ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–ú–ò ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º admin.py
            admin_file = "app/handlers/admin.py"
            if os.path.exists(admin_file):
                with open(admin_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                ticket_functions = [
                    'clear_all_orders',
                    'clear_all_reviews',
                    'delete_order',
                    'delete_review'
                ]
                
                for func in ticket_functions:
                    func_exists = func in content
                    self.log_test(f"–§—É–Ω–∫—Ü–∏—è {func}", func_exists)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º keyboards/main.py
            keyboard_file = "app/keyboards/main.py"
            if os.path.exists(keyboard_file):
                with open(keyboard_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                clear_button_exists = '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏' in content
                self.log_test("–ö–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏'", clear_button_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏", False, str(e))
    
    def test_referral_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        print("\nüë• === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("PRAGMA table_info(users)")
            columns = [col[1] for col in cursor.fetchall()]
            
            has_referral_percent = 'referral_percent' in columns
            self.log_test("–ö–æ–ª–æ–Ω–∫–∞ referral_percent", has_referral_percent)
            
            conn.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ admin_settings.py
            admin_file = "app/handlers/admin_settings.py"
            if os.path.exists(admin_file):
                with open(admin_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                referral_handlers = [
                    'admin_referral_percents',
                    'ref_increase_percent',
                    'ref_decrease_percent',
                    'ref_set_exact_percent'
                ]
                
                for handler in referral_handlers:
                    handler_exists = handler in content
                    self.log_test(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler}", handler_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", False, str(e))
    
    def test_content_editing(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("\nüìù === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            new_settings = [
                'profile_description', 'profile_photo',
                'slot_description', 'slot_photo',
                'calendar_description', 'calendar_photo'
            ]
            
            for setting in new_settings:
                cursor.execute("SELECT value FROM admin_settings WHERE key = ?", (setting,))
                setting_exists = cursor.fetchone() is not None
                self.log_test(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting}", setting_exists)
            
            conn.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            handler_files = [
                ('app/handlers/user.py', 'get_admin_setting'),
                ('app/handlers/slot_machine.py', 'get_admin_setting'),
                ('app/handlers/activity_calendar.py', 'get_admin_setting')
            ]
            
            for file_path, required_string in handler_files:
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    string_exists = required_string in content
                    self.log_test(f"{file_path}: {required_string}", string_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", False, str(e))
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(self.db_path):
            print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_slot_machine_fixes()
        self.test_blacklist_system()
        self.test_user_deletion()
        self.test_ticket_management()
        self.test_referral_system()
        self.test_content_editing()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print(f"üèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {self.passed_tests}/{self.total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        success_rate = (self.passed_tests / self.total_tests) * 100 if self.total_tests > 0 else 0
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
        elif success_rate >= 75:
            print("‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
        
        return success_rate >= 75

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CorrectedTestSuite()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
