#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""
import asyncio
import sys
import sqlite3
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

from app.utils.slot_machine import generate_slot_result
from app.database.models import get_slot_configs

async def test_slot_probabilities(num_tests=1000):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    print(f"üé∞ –¢–ï–°–¢ –í–ï–†–û–Ø–¢–ù–û–°–¢–ï–ô –°–õ–û–¢-–ú–ê–®–ò–ù–´ ({num_tests} –ø–æ–ø—ã—Ç–æ–∫)")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
    configs = get_slot_configs()
    print("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò–ó –ë–î:")
    total_expected_wins = 0
    for config in configs:
        config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = config
        total_expected_wins += chance_percent
        print(f"  {name:20} | {emoji} | {chance_percent:6.2f}%")
    
    print(f"\n–û–ñ–ò–î–ê–ï–ú–´–ô –ü–†–û–¶–ï–ù–¢ –í–´–ò–ì–†–´–®–ï–ô: {total_expected_wins:.2f}%")
    print("=" * 60)
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    win_counts = defaultdict(int)
    total_wins = 0
    
    # –ü—Ä–æ–≤–æ–¥–∏–º —Ç–µ—Å—Ç—ã
    for i in range(num_tests):
        slot1, slot2, slot3 = await generate_slot_result()
        combination = slot1 + slot2 + slot3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π
        is_win = False
        win_name = None
        
        for config in configs:
            config_id, combo, reward_type, reward_amount, chance_percent, emoji, name = config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ —Ç—Ä–æ–π–∫—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏
            if combo == combination or (slot1 == slot2 == slot3 == emoji):
                is_win = True
                win_name = name
                win_counts[name] += 1
                total_wins += 1
                break
        
        if i % 100 == 0:
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{num_tests}")
    
    print("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    actual_win_rate = (total_wins / num_tests) * 100
    print(f"–§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–¶–ï–ù–¢ –í–´–ò–ì–†–´–®–ï–ô: {actual_win_rate:.2f}%")
    print(f"–û–ñ–ò–î–ê–ï–ú–´–ô –ü–†–û–¶–ï–ù–¢ –í–´–ò–ì–†–´–®–ï–ô: {total_expected_wins:.2f}%")
    print(f"–†–ê–ó–ù–ò–¶–ê: {actual_win_rate - total_expected_wins:.2f}%")
    
    print("\n–î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ü–†–ò–ó–ê–ú:")
    for config in configs:
        config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = config
        actual_count = win_counts[name]
        actual_percent = (actual_count / num_tests) * 100
        expected_count = int(num_tests * chance_percent / 100)
        
        print(f"  {name:20} | –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_count:3d} ({chance_percent:5.2f}%) | "
              f"–ü–æ–ª—É—á–µ–Ω–æ: {actual_count:3d} ({actual_percent:5.2f}%) | "
              f"–†–∞–∑–Ω–∏—Ü–∞: {actual_count - expected_count:+3d}")
    
    print("=" * 60)
    
    if abs(actual_win_rate - total_expected_wins) > 2:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ!")
        return False
    else:
        print("‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

def analyze_current_logic():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –õ–û–ì–ò–ö–ò:")
    print("=" * 60)
    
    configs = get_slot_configs()
    total_chance = sum(config[4] for config in configs)  # chance_percent
    
    print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ –ë–î: {total_chance:.2f}%")
    print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∏–∑ 100 –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~{:.0f} –≤—ã–∏–≥—Ä—ã—à–µ–π".format(total_chance))
    
    if total_chance > 25:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ 2-3 —Ä–∞–∑–∞")
    
    print("\n–ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –ü–†–û–¶–ï–ù–¢–´ (–æ–±—â–∏–π ~10%):")
    suggested_configs = [
        ('–í–∏—à–Ω–∏', 'üçí', 5.0),
        ('–ê–ø–µ–ª—å—Å–∏–Ω', 'üçä', 2.5),
        ('–õ–∏–º–æ–Ω', 'üçã', 1.5),
        ('–í–∏–Ω–æ–≥—Ä–∞–¥', 'üçá', 0.5),
        ('–ê–ª–º–∞–∑', 'üíé', 0.3),
        ('–ó–≤–µ–∑–¥—ã', '‚≠êÔ∏è', 0.15),
        ('–ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫', 'üîî', 0.08),
        ('–ú–µ—à–æ–∫ –¥–µ–Ω–µ–≥', 'üí∞', 0.05),
        ('–î–∂–µ–∫–ø–æ—Ç', 'üé∞', 0.02),
        ('–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º–µ—Ä–∫–∞', '7Ô∏è‚É£', 0.01),
    ]
    
    total_suggested = sum(config[2] for config in suggested_configs)
    for name, emoji, percent in suggested_configs:
        print(f"  {name:20} | {emoji} | {percent:6.2f}%")
    print(f"  {'–ò–¢–û–ì–û':20} |   | {total_suggested:6.2f}%")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üé∞ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–õ–û–¢-–ú–ê–®–ò–ù–´")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏
    analyze_current_logic()
    
    # –¢–µ—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    success = await test_slot_probabilities(1000)
    
    if not success:
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print("1. –°–Ω–∏–∑–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("2. –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 8-12%")
        print("3. –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–∏–∑—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 3-5%")

if __name__ == "__main__":
    asyncio.run(main())
