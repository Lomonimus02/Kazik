#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- 3 –≤–∏—à–Ω–∏ - 13%
- 3 –∞–ø–µ–ª—å—Å–∏–Ω–∞ - 10%
- 3 –ª–∏–º–æ–Ω–∞ - 4%
- 3 –≤–∏–Ω–æ–≥—Ä–∞–¥–∞ - 1%
–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""
import sys
import os
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))

from app.database.models import init_db, get_db_connection

def update_slot_percentages():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    print("üé∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    
    # –ù–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    new_percentages = {
        'üçíüçíüçí': 13.0,  # 3 –≤–∏—à–Ω–∏ - 13%
        'üçäüçäüçä': 10.0,  # 3 –∞–ø–µ–ª—å—Å–∏–Ω–∞ - 10%
        'üçãüçãüçã': 4.0,   # 3 –ª–∏–º–æ–Ω–∞ - 4%
        'üçáüçáüçá': 1.0,   # 3 –≤–∏–Ω–æ–≥—Ä–∞–¥–∞ - 1%
    }
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        print("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã:")
        print("-" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cursor.execute('SELECT combination, reward_type, reward_amount, chance_percent, name FROM slot_config ORDER BY chance_percent DESC')
        current_configs = cursor.fetchall()
        
        for config in current_configs:
            combination, reward_type, reward_amount, chance_percent, name = config
            print(f"{combination} - {name}: {chance_percent}% ({reward_type} {reward_amount})")
        
        print("\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        updated_count = 0
        for combination, new_percent in new_percentages.items():
            cursor.execute('''UPDATE slot_config
                             SET chance_percent = ?
                             WHERE combination = ?''', (new_percent, combination))

            if cursor.rowcount > 0:
                updated_count += 1
                print(f"‚úÖ {combination}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_percent}%")
            else:
                print(f"‚ö†Ô∏è {combination}: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–ø–µ–ª—å—Å–∏–Ω—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã, –∞ –Ω–µ –¥–µ–Ω—å–≥–∏
        cursor.execute('''UPDATE slot_config
                         SET reward_type = 'stars', reward_amount = 21
                         WHERE combination = 'üçäüçäüçä' ''')
        if cursor.rowcount > 0:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∞–ø–µ–ª—å—Å–∏–Ω—ã —Ç–µ–ø–µ—Ä—å –¥–∞—é—Ç –∑–≤–µ–∑–¥—ã –≤–º–µ—Å—Ç–æ –¥–µ–Ω–µ–≥")
        
        conn.commit()
        
        print(f"\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {updated_count}")
        
        print("\nüìä –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã:")
        print("-" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cursor.execute('SELECT combination, reward_type, reward_amount, chance_percent, name FROM slot_config ORDER BY chance_percent DESC')
        updated_configs = cursor.fetchall()
        
        total_percent = 0
        for config in updated_configs:
            combination, reward_type, reward_amount, chance_percent, name = config
            total_percent += chance_percent
            
            # –í—ã–¥–µ–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            if combination in new_percentages:
                print(f"üî• {combination} - {name}: {chance_percent}% ({reward_type} {reward_amount}) [–û–ë–ù–û–í–õ–ï–ù–û]")
            else:
                print(f"   {combination} - {name}: {chance_percent}% ({reward_type} {reward_amount})")
        
        print(f"\nüìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_percent:.2f}%")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: {100 - total_percent:.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        if total_percent > 100:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%!")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã.")
        elif total_percent < 50:
            print("‚ÑπÔ∏è –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–æ–≤–æ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã.")
        
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        conn.rollback()
    finally:
        conn.close()

def verify_slot_algorithm():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã...")
    
    try:
        from app.utils.slot_machine import generate_slot_result, check_win_combination
        from app.database.models import get_slot_configs
        import asyncio
        from collections import Counter
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        configs = get_slot_configs()
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ –ë–î")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        async def test_generation():
            results = []
            wins = []

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            for _ in range(10000):
                slot1, slot2, slot3 = await generate_slot_result()
                combination = slot1 + slot2 + slot3
                results.append(combination)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
                win_config = await check_win_combination(slot1, slot2, slot3)
                if win_config:
                    wins.append(combination)

            return results, wins
        
        results, wins = asyncio.run(test_generation())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        win_counter = Counter(wins)
        total_wins = len(wins)
        total_tests = len(results)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({total_tests} –ø–æ–ø—ã—Ç–æ–∫):")
        print(f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_wins} ({total_wins/total_tests*100:.1f}%)")
        
        if win_counter:
            print("\nüèÜ –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:")

            # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            expected_percentages = {}
            for config in configs:
                config_id, combination, reward_type, reward_amount, chance_percent, emoji, name = config
                expected_percentages[combination] = chance_percent

            print("   –ö–æ–º–±–∏–Ω–∞—Ü–∏—è | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π % | –û–∂–∏–¥–∞–µ–º—ã–π % | –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
            print("   " + "-" * 55)

            for combination, count in win_counter.most_common():
                actual_percentage = count / total_tests * 100
                expected_percentage = expected_percentages.get(combination, 0)
                deviation = abs(actual_percentage - expected_percentage)

                status = "‚úÖ" if deviation < 1.0 else "‚ö†Ô∏è" if deviation < 2.0 else "‚ùå"

                print(f"   {combination} | {actual_percentage:8.2f}% | {expected_percentage:8.1f}% | {deviation:6.2f}% {status}")

        print("\n‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")

if __name__ == "__main__":
    update_slot_percentages()
    verify_slot_algorithm()
