#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–∏–∑–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""
import sys
import os
import asyncio
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database.models import get_slot_wins_async, get_slot_configs

async def test_fixed_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏
        all_wins = await get_slot_wins_async()
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {len(all_wins)}")
        
        if not all_wins:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É my_prizes_handler
        print("\nüìä –¢–ï–°–¢ MY_PRIZES_HANDLER:")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
        test_user_id = all_wins[0][2]  # tg_id
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_user_id}")
        
        user_wins = await get_slot_wins_async(user_id=test_user_id)
        print(f"–ó–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_wins)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        actual_wins = [win for win in user_wins if win[7] in (True, 1)]
        print(f"–†–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π: {len(actual_wins)}")
        
        if actual_wins:
            print("–ü—Ä–∏–º–µ—Ä—ã –≤—ã–∏–≥—Ä—ã—à–µ–π:")
            for win in actual_wins[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                combination = win[4]
                reward_type = win[5]
                reward_amount = win[6]
                is_win = win[7]
                status = win[9] if len(win) > 9 else "pending"
                
                if reward_type == "money":
                    reward_text = f"{int(reward_amount)}‚ÇΩ"
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ"
                elif reward_type == "stars":
                    reward_text = f"{int(reward_amount)}‚≠êÔ∏è"
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ" if status == "completed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                elif reward_type == "ton":
                    reward_text = f"{reward_amount} TON"
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ" if status == "completed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                else:
                    reward_text = str(reward_amount)
                    status_text = "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ" if status == "completed" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                
                print(f"  - {combination}: {reward_text} ({status_text})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É slot_stats_handler
        print("\nüìà –¢–ï–°–¢ SLOT_STATS_HANDLER:")
        
        total_spins = len(user_wins)
        winning_spins = len([win for win in user_wins if win[7] in (True, 1)])
        
        print(f"–í—Å–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏–π: {total_spins}")
        print(f"–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π: {winning_spins}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
        biggest_win = 0
        biggest_win_type = ""
        for win in user_wins:
            if win[7] in (True, 1):  # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã—à
                reward_amount = win[6]
                reward_type = win[5]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if reward_type == "money":
                    value = reward_amount
                elif reward_type == "stars":
                    value = reward_amount * 2
                elif reward_type == "ton":
                    value = reward_amount * 1000
                else:
                    value = 0
                
                if value > biggest_win:
                    biggest_win = value
                    if reward_type == "money":
                        biggest_win_type = f"{reward_amount}‚ÇΩ"
                    elif reward_type == "stars":
                        biggest_win_type = f"{reward_amount}‚≠êÔ∏è"
                    elif reward_type == "ton":
                        biggest_win_type = f"{reward_amount} TON"
        
        win_rate = (winning_spins / total_spins * 100) if total_spins > 0 else 0
        
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {win_rate:.1f}%")
        print(f"–°–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {biggest_win_type if biggest_win_type else '–ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π'}")
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_fixed_handlers())
