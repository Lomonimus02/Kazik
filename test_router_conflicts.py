#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–æ–≤
"""
import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import types
from aiogram.fsm.context import FSMContext

@pytest.mark.asyncio
async def test_admin_settings_router_priority():
    """–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞ admin_settings"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    from app.handlers.admin_settings import (
        process_referral_username,
        AdminSettingStates
    )
    from app.handlers.support import handle_admin_reply
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    message = AsyncMock()
    message.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    message.text = "testuser"
    message.answer = AsyncMock()
    message.chat = AsyncMock()
    message.chat.type = 'private'
    
    state = AsyncMock()
    state.get_state.return_value = AdminSettingStates.waiting_for_referral_username
    state.update_data = AsyncMock()
    state.set_state = AsyncMock()
    
    # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.get_user_by_username', return_value={
             'id': 123,
             'tg_id': 123456789,
             'username': 'testuser',
             'full_name': 'Test User',
             'referral_percent': 5.0
         }), \
         patch('app.handlers.support.is_admin', return_value=True):
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ support handler –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        print("üìã –¢–µ—Å—Ç 1: Support handler —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")
        
        # –í—ã–∑—ã–≤–∞–µ–º support handler - –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = await handle_admin_reply(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ support handler –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç
        message.answer.assert_not_called()
        print("‚úÖ Support handler –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ admin_settings handler —Ä–∞–±–æ—Ç–∞–µ—Ç
        print("üìã –¢–µ—Å—Ç 2: Admin settings handler")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏
        message.answer.reset_mock()
        
        # –í—ã–∑—ã–≤–∞–µ–º admin_settings handler
        await process_referral_username(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ admin_settings handler –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        state.update_data.assert_called_once()
        print("‚úÖ Admin settings handler –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º support handler –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        print("üìã –¢–µ—Å—Ç 3: Support handler –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–µ—Å—Å–∏–∏")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏
        message.answer.reset_mock()
        state.get_state.return_value = None
        
        # –û—á–∏—â–∞–µ–º admin_sessions
        import app.handlers.support
        app.handlers.support.admin_sessions.clear()
        
        # –í—ã–∑—ã–≤–∞–µ–º support handler - –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = await handle_admin_reply(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ support handler –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç
        message.answer.assert_not_called()
        print("‚úÖ Support handler –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")

@pytest.mark.asyncio
async def test_photo_upload_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    print("üì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ...")
    
    from app.handlers.admin_settings import (
        admin_ui_photo_settings_menu,
        admin_setting_handler,
        process_setting_value,
        AdminSettingStates
    )
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ñ–æ—Ç–æ
    print("üìã –¢–µ—Å—Ç 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ñ–æ—Ç–æ")
    
    callback = AsyncMock()
    callback.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    callback.message = AsyncMock()
    callback.message.edit_text = AsyncMock()
    callback.answer = AsyncMock()
    
    state = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True):
        await admin_ui_photo_settings_menu(callback)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
        callback.message.answer.assert_called_once()
        print("‚úÖ –ú–µ–Ω—é —Ñ–æ—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ
    print("üìã –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ")
    
    callback.data = "admin_setting_main_photo"
    callback.message.answer.reset_mock()
    state.set_state = AsyncMock()
    state.update_data = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.get_admin_setting', return_value="current_photo_id"):
        
        await admin_setting_handler(callback, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        state.set_state.assert_called_with(AdminSettingStates.waiting_for_value)
        assert state.update_data.call_count == 2  # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã –¥–ª—è setting_key –∏ prev_menu
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    print("üìã –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ")
    
    message = AsyncMock()
    message.from_user = types.User(id=123456789, is_bot=False, first_name="Admin")
    message.photo = [
        types.PhotoSize(file_id="large_photo", file_unique_id="large", width=800, height=600, file_size=50000)
    ]
    message.text = None
    message.answer = AsyncMock()
    
    state.get_data.return_value = {
        'setting_key': 'main_photo',
        'prev_menu': 'admin_ui_photo_settings'
    }
    state.clear = AsyncMock()
    
    with patch('app.handlers.admin_settings.is_admin', return_value=True), \
         patch('app.handlers.admin_settings.update_admin_setting') as mock_update, \
         patch('app.handlers.admin_settings.admin_ui_photo_settings_menu') as mock_menu:
        
        await process_setting_value(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        mock_update.assert_called_once_with('main_photo', 'large_photo')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ
        state.clear.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        message.answer.assert_called()
        
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_admin_settings_router_priority())
    asyncio.run(test_photo_upload_workflow())
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
