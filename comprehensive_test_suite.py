#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É, —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 
—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import sqlite3
import os
import json
import sys

class ComprehensiveTestSuite:
    def __init__(self):
        self.db_path = "data/users.db"
        self.blacklist_db_path = "data/blacklist.db"
        self.passed_tests = 0
        self.total_tests = 0
        
    def log_test(self, test_name, passed, details=""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            print(f"‚úÖ {test_name}")
        else:
            print(f"‚ùå {test_name}")
        if details:
            print(f"   {details}")
    
    def test_slot_machine_fixes(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
        print("\nüé∞ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–¢-–ú–ê–®–ò–ù–´ ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã slot_config
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='slot_config'")
            table_exists = cursor.fetchone() is not None
            self.log_test("–¢–∞–±–ª–∏—Ü–∞ slot_config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", table_exists)
            
            if table_exists:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–∞
                cursor.execute("SELECT combination, probability FROM slot_config")
                configs = cursor.fetchall()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤
                six_symbol_combos = [c for c in configs if len(c[0].split(',')) > 3]
                self.log_test("–ù–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–∑ 6+ —Å–∏–º–≤–æ–ª–æ–≤", len(six_symbol_combos) == 0, 
                            f"–ù–∞–π–¥–µ–Ω–æ {len(six_symbol_combos)} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                total_probability = sum(float(c[1]) for c in configs)
                self.log_test("–û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞ —Å–Ω–∏–∂–µ–Ω–∞", total_probability < 50.0,
                            f"–û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {total_probability:.2f}%")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                combinations = [c[0] for c in configs]
                unique_combinations = set(combinations)
                self.log_test("–ù–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π", len(combinations) == len(unique_combinations),
                            f"–ù–∞–π–¥–µ–Ω–æ {len(combinations) - len(unique_combinations)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            
            conn.close()
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã", False, str(e))
    
    def test_blacklist_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        print("\nüö´ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            blacklist_exists = os.path.exists(self.blacklist_db_path)
            self.log_test("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", blacklist_exists)
            
            if blacklist_exists:
                conn = sqlite3.connect(self.blacklist_db_path)
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("PRAGMA table_info(blacklist)")
                columns = [col[1] for col in cursor.fetchall()]
                required_columns = ['id', 'username', 'reason', 'date_added']
                
                has_all_columns = all(col in columns for col in required_columns)
                self.log_test("–¢–∞–±–ª–∏—Ü–∞ blacklist –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É", has_all_columns,
                            f"–ö–æ–ª–æ–Ω–∫–∏: {columns}")
                
                conn.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ admin_settings.py
            admin_file = "app/handlers/admin_settings.py"
            if os.path.exists(admin_file):
                with open(admin_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                blacklist_handlers = [
                    'admin_blacklist_add_user',
                    'admin_blacklist_remove_user',
                    'blacklist_username_input'
                ]
                
                for handler in blacklist_handlers:
                    handler_exists = handler in content
                    self.log_test(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", handler_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", False, str(e))
    
    def test_user_deletion(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüóëÔ∏è === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é delete_user_completely
            admin_file = "app/handlers/admin_settings.py"
            if os.path.exists(admin_file):
                with open(admin_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
                has_delete_function = 'delete_user_completely' in content
                self.log_test("–§—É–Ω–∫—Ü–∏—è delete_user_completely —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", has_delete_function)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
                tables_to_check = [
                    'users', 'activity_calendar', 'orders', 'withdrawals',
                    'reviews', 'roulette_attempts', 'roulette_history', 'support_tickets'
                ]
                
                for table in tables_to_check:
                    table_deletion = f"DELETE FROM {table}" in content
                    self.log_test(f"–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table}", table_deletion)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                deletion_handlers = [
                    'admin_delete_user',
                    'delete_username_input'
                ]
                
                for handler in deletion_handlers:
                    handler_exists = handler in content
                    self.log_test(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", handler_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", False, str(e))
    
    def test_ticket_management(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –∏ —Ç–∏–∫–µ—Ç–∞–º–∏"""
        print("\nüé´ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–ú–ò ===")
        
        try:
            admin_file = "app/handlers/admin_settings.py"
            if os.path.exists(admin_file):
                with open(admin_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
                ticket_features = [
                    ('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏', 'admin_delete_all_applications'),
                    ('–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç', 'admin_delete_ticket'),
                    ('delete_all_applications', '—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫'),
                    ('delete_ticket_by_id', '—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ ID')
                ]
                
                for feature_name, feature_code in ticket_features:
                    feature_exists = feature_code in content
                    self.log_test(f"{feature_name}", feature_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏", False, str(e))
    
    def test_referral_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        print("\nüë• === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("PRAGMA table_info(users)")
            columns = [col[1] for col in cursor.fetchall()]
            
            has_referral_percent = 'referral_percent' in columns
            self.log_test("–ö–æ–ª–æ–Ω–∫–∞ referral_percent —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", has_referral_percent)
            
            conn.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ admin_settings.py
            admin_file = "app/handlers/admin_settings.py"
            if os.path.exists(admin_file):
                with open(admin_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                referral_features = [
                    ('admin_referral_management', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏'),
                    ('referral_username_input', '–í–≤–æ–¥ —é–∑–µ—Ä–Ω–µ–π–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞'),
                    ('increase_referral_percent', '–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞'),
                    ('decrease_referral_percent', '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞')
                ]
                
                for feature_code, feature_name in referral_features:
                    feature_exists = feature_code in content
                    self.log_test(f"{feature_name}", feature_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", False, str(e))
    
    def test_content_editing(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("\nüìù === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            new_settings = [
                'profile_description', 'profile_photo',
                'slot_description', 'slot_photo',
                'calendar_description', 'calendar_photo'
            ]
            
            for setting in new_settings:
                cursor.execute("SELECT value FROM admin_settings WHERE key = ?", (setting,))
                setting_exists = cursor.fetchone() is not None
                self.log_test(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting}", setting_exists)
            
            conn.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            handler_files = [
                ('app/handlers/user.py', ['get_admin_setting', 'profile_description']),
                ('app/handlers/slot_machine.py', ['get_admin_setting', 'slot_description']),
                ('app/handlers/activity_calendar.py', ['get_admin_setting', 'calendar_description'])
            ]
            
            for file_path, required_strings in handler_files:
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    for required_string in required_strings:
                        string_exists = required_string in content
                        self.log_test(f"{file_path}: {required_string}", string_exists)
            
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", False, str(e))
    
    def analyze_code_logic(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        print("\nüîç === –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ö–û–î–ê ===")
        
        issues_found = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            files_to_check = [
                'app/handlers/admin_settings.py',
                'app/handlers/user.py',
                'app/handlers/slot_machine.py',
                'app/handlers/activity_calendar.py'
            ]
            
            for file_path in files_to_check:
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                    if 'get_admin_setting' in content and 'from app.database.models import' not in content:
                        issues_found.append(f"{file_path}: –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç get_admin_setting")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                    if 'sqlite3.connect' in content and 'except' not in content:
                        issues_found.append(f"{file_path}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ë–î")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
                    if 'sqlite3.connect' in content and 'conn.close()' not in content:
                        issues_found.append(f"{file_path}: –í–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î")
            
            if issues_found:
                for issue in issues_found:
                    self.log_test(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {issue}", False)
            else:
                self.log_test("–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∫–æ–¥–∞", True, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                
        except Exception as e:
            self.log_test("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞", False, str(e))
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(self.db_path):
            print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_slot_machine_fixes()
        self.test_blacklist_system()
        self.test_user_deletion()
        self.test_ticket_management()
        self.test_referral_system()
        self.test_content_editing()
        self.analyze_code_logic()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print("\n" + "=" * 50)
        print(f"üèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {self.passed_tests}/{self.total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        success_rate = (self.passed_tests / self.total_tests) * 100 if self.total_tests > 0 else 0
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
        elif success_rate >= 75:
            print("‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
        
        return success_rate >= 75

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveTestSuite()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
