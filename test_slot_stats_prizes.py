#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–∏–∑–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""
import sys
import os
import asyncio
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database.models import get_slot_wins_async, get_slot_configs

async def test_slot_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–∏–∑–æ–≤"""
    print("üß™ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ô –°–õ–û–¢-–ú–ê–®–ò–ù–´")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
        print("\n1. –¢–µ—Å—Ç get_slot_configs():")
        configs = get_slot_configs()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}")
        for config in configs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {config[1]} ({config[6]}): {config[3]}% —à–∞–Ω—Å, {config[4]} {config[2]}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ—Å—Ç–æ–≤—ã–π ID)
        print("\n2. –¢–µ—Å—Ç get_slot_wins_async(user_id=123456789):")
        test_user_id = 123456789  # –¢–µ—Å—Ç–æ–≤—ã–π ID
        wins = await get_slot_wins_async(user_id=test_user_id)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}: {len(wins)}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
        print("\n3. –¢–µ—Å—Ç get_slot_wins_async() (–≤—Å–µ –∑–∞–ø–∏—Å–∏):")
        all_wins = await get_slot_wins_async()
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {len(all_wins)}")
        
        if all_wins:
            print("   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏:")
            sample = all_wins[0]
            print(f"   - ID: {sample[0]}")
            print(f"   - User ID: {sample[1]}")
            print(f"   - TG ID: {sample[2]}")
            print(f"   - Full Name: {sample[3]}")
            print(f"   - Combination: {sample[4]}")
            print(f"   - Reward Type: {sample[5]}")
            print(f"   - Reward Amount: {sample[6]}")
            print(f"   - Is Win: {sample[7]}")
            print(f"   - Created At: {sample[8]}")
            print(f"   - Status: {sample[9]}")
        
        # –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π
        if all_wins:
            print("\n4. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π:")
            actual_wins = [win for win in all_wins if win[7] == True]  # is_win = True
            print(f"   –†–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π: {len(actual_wins)}")
            
            money_wins = [win for win in actual_wins if win[5] == "money"]
            stars_wins = [win for win in actual_wins if win[5] == "stars"]
            ton_wins = [win for win in actual_wins if win[5] == "ton"]
            
            print(f"   - –î–µ–Ω–µ–∂–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π: {len(money_wins)}")
            print(f"   - –ó–≤–µ–∑–¥–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π: {len(stars_wins)}")
            print(f"   - TON –≤—ã–∏–≥—Ä—ã—à–µ–π: {len(ton_wins)}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_slot_functions())
