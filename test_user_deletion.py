#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import asyncio
import sqlite3
import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)
os.chdir(current_dir)

from app.database.models import (
    init_db, get_or_create_user, get_user_profile,
    delete_user_everywhere_full, update_balance
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def setup_test_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists('data/users.db'):
        os.rename('data/users.db', 'data/users_backup_test.db')
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ë–î
    init_db()
    logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")

def restore_db():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists('data/users_backup_test.db'):
        if os.path.exists('data/users.db'):
            os.remove('data/users.db')
        os.rename('data/users_backup_test.db', 'data/users.db')
        logger.info("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏"""
    test_tg_id = 999999999
    test_username = "test_user_delete"
    test_full_name = "Test User Delete"
    reg_date = datetime.now().strftime("%Y-%m-%d")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_or_create_user(test_tg_id, test_full_name, test_username, reg_date)
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_username} (ID: {test_tg_id})")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    update_balance(test_tg_id, 100.0)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    conn = sqlite3.connect('data/users.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO orders (user_id, order_type, amount, status, created_at) 
                     VALUES (?, ?, ?, ?, ?)''', 
                  (user['id'], 'stars', 50, 'pending', datetime.now().isoformat()))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
    cursor.execute('''INSERT INTO reviews (user_id, text, status, created_at)
                     VALUES (?, ?, ?, ?)''',
                  (user['id'], '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤', 'pending', datetime.now().isoformat()))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    cursor.execute('''INSERT INTO activity_calendar (user_id, date, activity_type, reward_type, reward_amount) 
                     VALUES (?, ?, ?, ?, ?)''', 
                  (user['id'], datetime.now().strftime("%Y-%m-%d"), 'daily', 'money', 10.0))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É
    cursor.execute('''INSERT INTO slot_machine (user_id, combination, reward_type, reward_amount, created_at) 
                     VALUES (?, ?, ?, ?, ?)''', 
                  (user['id'], 'üçíüçíüçí', 'money', 25.0, datetime.now().isoformat()))
    
    conn.commit()
    conn.close()
    
    logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    return test_tg_id, user['id']

def check_user_data_exists(tg_id, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ"""
    conn = sqlite3.connect('data/users.db')
    cursor = conn.cursor()
    
    tables_to_check = [
        ('users', 'tg_id', tg_id),
        ('orders', 'user_id', user_id),
        ('reviews', 'user_id', user_id),
        ('activity_calendar', 'user_id', user_id),
        ('slot_machine', 'user_id', user_id),
        ('withdrawals', 'user_id', user_id),
        ('roulette_attempts', 'user_id', user_id),
        ('roulette_history', 'user_id', user_id),
    ]
    
    results = {}
    for table, column, value in tables_to_check:
        try:
            cursor.execute(f'SELECT COUNT(*) FROM {table} WHERE {column} = ?', (value,))
            count = cursor.fetchone()[0]
            results[table] = count
        except sqlite3.OperationalError:
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            results[table] = 0
    
    conn.close()
    return results

def test_user_deletion():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    try:
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
        setup_test_db()
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_tg_id, test_user_id = create_test_user()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è...")
        data_before = check_user_data_exists(test_tg_id, test_user_id)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {data_before}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_profile = get_user_profile(test_tg_id)
        assert user_profile is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        assert user_profile['balance'] == 100.0, "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100.0"
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        delete_user_everywhere_full(test_tg_id)
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...")
        data_after = check_user_data_exists(test_tg_id, test_user_id)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {data_after}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω
        user_profile_after = get_user_profile(test_tg_id)
        assert user_profile_after is None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
        for table, count in data_after.items():
            assert count == 0, f"–í —Ç–∞–±–ª–∏—Ü–µ {table} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∑–∞–ø–∏—Å–µ–π, –Ω–∞–π–¥–µ–Ω–æ: {count}"
        
        logger.info("‚úÖ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        # 6. –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–º—É–ª—è—Ü–∏—è /start)
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        new_user = get_or_create_user(test_tg_id, "Test User Delete", "test_user_delete", 
                                     datetime.now().strftime("%Y-%m-%d"))
        
        assert new_user is not None, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        assert new_user['balance'] == 0.0, "–ë–∞–ª–∞–Ω—Å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0"
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ –∫–∞–∫ –Ω–æ–≤—ã–π")
        
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {str(e)}")
        return False
    
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ë–î
        restore_db()

if __name__ == "__main__":
    success = test_user_deletion()
    if success:
        print("\n‚úÖ –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü")
        print("üîÑ –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–æ–≤—ã–π")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
        sys.exit(1)
